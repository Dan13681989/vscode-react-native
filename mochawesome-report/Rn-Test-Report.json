{
  "stats": {
    "suites": 91,
    "tests": 203,
    "passes": 188,
    "pending": 0,
    "failures": 15,
    "start": "2023-11-20T02:26:57.950Z",
    "end": "2023-11-20T02:29:29.130Z",
    "duration": 151180,
    "testsRegistered": 225,
    "passPercent": 83.55555555555556,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 22,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "getPlatformStub === null || getPlatformStub === void 0 ? void 0 : getPlatformStub.restore();",
          "err": {},
          "uuid": "db43cc87-18d1-43a2-810f-526ee5ba3df5",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (appLauncherTest) {\n    projectsStorage_1.ProjectsStorage.delFolder(appLauncherTest.getWorkspaceFolder());\n}\n(0, rn_extension_1.deactivate)();",
          "err": {},
          "uuid": "49c4e3cc-afdd-4284-ab09-547b4b73d431",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, NODE_MODULES_FOLDER));\nif (appLauncherTest) {\n    projectsStorage_1.ProjectsStorage.delFolder(appLauncherTest.getWorkspaceFolder());\n}\n(0, rn_extension_1.deactivate)();",
          "err": {},
          "uuid": "0feab33d-e224-4336-a519-350b8fc21499",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "fsHelper.removePathRecursivelySync(sampleTestProjectDir);\nif (appLauncherTest) {\n    projectsStorage_1.ProjectsStorage.delFolder(appLauncherTest.getWorkspaceFolder());\n}",
          "err": {},
          "uuid": "fc99b23b-0c1f-41cf-a773-0b6243801e2b",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "fsHelper.removePathRecursivelySync(innerProjectDir);",
          "err": {},
          "uuid": "74ebe288-17b5-4876-8839-6352ceaa11ba",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [
        {
          "title": "should succeed on correct env",
          "fullTitle": "should succeed on correct env",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(this, void 0, void 0, function* () {\n                const tempdir = yield fs_1.promises.mkdtemp(path.join(os.tmpdir(), \"foo\"));\n                setEnv(tempdir);\n                const result = yield envTest();\n                assert(result.status === \"success\");\n                restoreEnv();\n            })",
          "err": {},
          "uuid": "92eb1806-ae62-47da-bec2-8edbefd60913",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should fail on non existant path",
          "fullTitle": "should fail on non existant path",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(this, void 0, void 0, function* () {\n                setEnv(\"/non-existant-path-abcd\");\n                const result = yield envTest();\n                assert(result.status === \"failure\");\n                restoreEnv();\n            })",
          "err": {},
          "uuid": "a4ec7493-021a-441b-831b-10ed59e004a5",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should succeed on path with env values",
          "fullTitle": "should succeed on path with env values",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(this, void 0, void 0, function* () {\n                const varName = \"some-weired-variable-abcd\";\n                const tempDir = yield fs_1.promises.mkdtemp(path.join(os.tmpdir(), \"foo\"));\n                yield fs_1.promises.mkdir(path.join(tempDir, \"bar\"));\n                process.env[varName] = \"bar\";\n                setEnv(`${tempDir}/%${varName}%`);\n                const result = yield envTest();\n                assert(result.status === \"partial-success\");\n                restoreEnv();\n                delete process.env[varName];\n            })",
          "err": {},
          "uuid": "69cc3297-28c7-4905-b6e2-61a83ba0c4f6",
          "parentUUID": "3537f302-3542-4a75-aaeb-1d44744e8ac8",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "da4a0fc4-0de1-420e-9617-b450ad02aea2",
          "title": "reactNativeCDPProxy",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"reactNativeCDPProxy\"",
              "fullTitle": "reactNativeCDPProxy \"before all\" hook in \"reactNativeCDPProxy\"",
              "timedOut": false,
              "duration": 1031,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        proxy.setApplicationTargetPort(wsTargetPort);\n        yield proxy.initializeServer(new rnCDPMessageHandler_1.RnCDPMessageHandler(), cdpProxyLogLevel);\n        const server = yield vscode_cdp_proxy_1.Server.create({ host: \"localhost\", port: wsTargetPort });\n        wsTargetServer = server;\n        server.onConnection(([connection, request]) => {\n            targetConnection = connection;\n        });\n        const proxyUri = yield new debuggerEndpointHelper_1.DebuggerEndpointHelper().getWSEndpoint(`http://${cdpProxyHostAddress}:${cdpProxyPort}`);\n        debugConnection = new vscode_cdp_proxy_1.Connection(yield vscode_cdp_proxy_1.WebSocketTransport.create(proxyUri));\n        // Due to the time limit, sooner or later this cycle will end\n        yield promise_1.PromiseUtil.waitUntil(() => !!targetConnection, 1000, 5000);\n    })",
              "err": {},
              "uuid": "1000e6eb-e413-4e25-a1b7-afe853352e17",
              "parentUUID": "da4a0fc4-0de1-420e-9617-b450ad02aea2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"reactNativeCDPProxy\"",
              "fullTitle": "reactNativeCDPProxy \"after all\" hook in \"reactNativeCDPProxy\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (targetConnection) {\n    targetConnection.close();\n    targetConnection = null;\n}\nif (debugConnection) {\n    debugConnection.close();\n    debugConnection = null;\n}\nproxy.stopServer();\nif (wsTargetServer) {\n    wsTargetServer.dispose();\n    wsTargetServer = null;\n}",
              "err": {},
              "uuid": "e1aab077-cd88-4d5b-8220-55b5977f58b0",
              "parentUUID": "da4a0fc4-0de1-420e-9617-b450ad02aea2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "86dd76a7-b241-4415-aa35-92ca8e22e27a",
              "title": "MessageHandlers",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "cde42651-261a-493f-ba40-e2473d2c9773",
                  "title": "RnCDPMessageHandler",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"RnCDPMessageHandler\"",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers RnCDPMessageHandler \"before all\" hook in \"RnCDPMessageHandler\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                rnHandler = new rnCDPMessageHandler_1.RnCDPMessageHandler();\n                Object.assign(proxy, { CDPMessageHandler: rnHandler });\n            })",
                      "err": {},
                      "uuid": "508068d4-2658-4dfc-9f38-6cf2a49f5f85",
                      "parentUUID": "cde42651-261a-493f-ba40-e2473d2c9773",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Messages should be delivered correctly with RnCDPMessageHandler",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers RnCDPMessageHandler Messages should be delivered correctly with RnCDPMessageHandler",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const targetMessageStart = { method: \"Target.start\", params: { reason: \"test\" } };\n                const debuggerMessageStart = {\n                    method: \"Debugger.start\",\n                    params: { reason: \"test\" },\n                };\n                const messageFromTarget = yield getMessageFromTarget(targetMessageStart);\n                const messageFromDebugger = yield getMessageFromDebugger(debuggerMessageStart);\n                assert.deepStrictEqual(messageFromTarget, targetMessageStart);\n                assert.deepStrictEqual(messageFromDebugger, debuggerMessageStart);\n            })",
                      "err": {},
                      "uuid": "82961b71-60b0-43bc-8dd1-604c3876f326",
                      "parentUUID": "cde42651-261a-493f-ba40-e2473d2c9773",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Message from target with method 'Debugger.paused' in first time should transorm reason to 'Break on start'",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers RnCDPMessageHandler Message from target with method 'Debugger.paused' in first time should transorm reason to 'Break on start'",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const targetMessagePaused = {\n                    method: CDPAPINames_1.CDP_API_NAMES.DEBUGGER_PAUSED,\n                    params: { reason: \"other\" },\n                };\n                const messageFromTarget = yield getMessageFromTarget(targetMessagePaused);\n                targetMessagePaused.params.reason = \"Break on start\";\n                assert.deepStrictEqual(messageFromTarget, targetMessagePaused);\n            })",
                      "err": {},
                      "uuid": "a3cc8020-b117-4c7d-8d8a-39ca4d7e95f4",
                      "parentUUID": "cde42651-261a-493f-ba40-e2473d2c9773",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "82961b71-60b0-43bc-8dd1-604c3876f326",
                    "a3cc8020-b117-4c7d-8d8a-39ca4d7e95f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                  "title": "HermesCDPMessageHandler",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/cdp-proxy/reactNativeCDPProxy.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"HermesCDPMessageHandler\"",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers HermesCDPMessageHandler \"before all\" hook in \"HermesCDPMessageHandler\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                directHandler = new hermesCDPMessageHandler_1.HermesCDPMessageHandler();\n                Object.assign(proxy, { CDPMessageHandler: directHandler });\n            })",
                      "err": {},
                      "uuid": "97f80814-8cc5-4665-8656-b8b5ebfa1778",
                      "parentUUID": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Messages should be delivered correctly with HermesCDPMessageHandler",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers HermesCDPMessageHandler Messages should be delivered correctly with HermesCDPMessageHandler",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const targetMessageStart = { method: \"Target.start\", params: { reason: \"test\" } };\n                const debuggerMessageStart = {\n                    method: \"Debugger.start\",\n                    params: { reason: \"test\" },\n                };\n                const messageFromTarget = yield getMessageFromTarget(targetMessageStart);\n                const messageFromDebugger = yield getMessageFromDebugger(debuggerMessageStart);\n                assert.deepStrictEqual(messageFromTarget, targetMessageStart);\n                assert.deepStrictEqual(messageFromDebugger, debuggerMessageStart);\n            })",
                      "err": {},
                      "uuid": "8e3ee567-825f-4d23-9593-bf59c8bdbf1e",
                      "parentUUID": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Message from target with method 'Debugger.paused' should filter callFrames with Hermes Native function name and script id",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers HermesCDPMessageHandler Message from target with method 'Debugger.paused' should filter callFrames with Hermes Native function name and script id",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const targetMessagePaused = {\n                    method: CDPAPINames_1.CDP_API_NAMES.DEBUGGER_PAUSED,\n                    params: {\n                        reason: \"other\",\n                        callFrames: cdpConstants_1.mockCallFrames,\n                    },\n                };\n                const messageFromTarget = yield getMessageFromTarget(targetMessagePaused);\n                const filteredCallFrames = cdpConstants_1.mockCallFrames.filter((callFrame) => callFrame.functionName !== cdpConstants_1.HERMES_NATIVE_FUNCTION_NAME &&\n                    callFrame.location.scriptId !== cdpConstants_1.HERMES_NATIVE_FUNCTION_SCRIPT_ID);\n                targetMessagePaused.params.callFrames = filteredCallFrames;\n                assert.deepStrictEqual(messageFromTarget, targetMessagePaused);\n            })",
                      "err": {},
                      "uuid": "0490720d-0040-425c-98ff-2e12e67acf6e",
                      "parentUUID": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Message from target should add description for function result without description",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers HermesCDPMessageHandler Message from target should add description for function result without description",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const targetMessage = {\n                    method: \"Target.test\",\n                    params: {\n                        reason: \"test\",\n                    },\n                    result: cdpConstants_1.mockResults,\n                };\n                const messageFromTarget = yield getMessageFromTarget(targetMessage);\n                targetMessage.result.result.forEach(resultObj => {\n                    if (resultObj.value &&\n                        resultObj.value.type === \"function\" &&\n                        !resultObj.value.description) {\n                        resultObj.value.description = \"function() { … }\";\n                    }\n                });\n                assert.deepStrictEqual(messageFromTarget, targetMessage);\n            })",
                      "err": {},
                      "uuid": "37d8d182-e462-41a8-81e7-f329973ea107",
                      "parentUUID": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Message from debugger with method Debugger.setBreakpoint should delete column number field from params.location",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers HermesCDPMessageHandler Message from debugger with method Debugger.setBreakpoint should delete column number field from params.location",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const debuggerMessage = {\n                    method: CDPAPINames_1.CDP_API_NAMES.DEBUGGER_SET_BREAKPOINT,\n                    params: {\n                        reason: \"test\",\n                        location: {\n                            columnNumber: 15,\n                            rowNumber: 100,\n                        },\n                    },\n                };\n                const messageFromDebugger = yield getMessageFromDebugger(debuggerMessage);\n                delete debuggerMessage.params.location.columnNumber;\n                assert.deepStrictEqual(messageFromDebugger, debuggerMessage);\n            })",
                      "err": {},
                      "uuid": "3c4d9198-5e60-48d8-b707-b6f725cd57ef",
                      "parentUUID": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Message from debugger with method Runtime.callFunctionOn with Object.getOwnPropertyDescriptor in function declaration should return result based on message id and send back to debugger",
                      "fullTitle": "reactNativeCDPProxy MessageHandlers HermesCDPMessageHandler Message from debugger with method Runtime.callFunctionOn with Object.getOwnPropertyDescriptor in function declaration should return result based on message id and send back to debugger",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const debuggerMessage = {\n                    id: 1,\n                    method: CDPAPINames_1.CDP_API_NAMES.RUNTIME_CALL_FUNCTION_ON,\n                    params: {\n                        objectId: 2,\n                        reason: \"test\",\n                        functionDeclaration: [cdpConstants_1.ARRAY_REQUEST_PHRASE_MARKER, \"some other\"],\n                    },\n                };\n                let resultMessage = {\n                    result: {\n                        result: {\n                            objectId: debuggerMessage.params.objectId,\n                        },\n                    },\n                    id: debuggerMessage.id,\n                };\n                const messageFromDebugger = yield new Promise(resolve => {\n                    debugConnection === null || debugConnection === void 0 ? void 0 : debugConnection.send(debuggerMessage);\n                    debugConnection === null || debugConnection === void 0 ? void 0 : debugConnection.onReply((evt) => {\n                        resolve(evt);\n                    });\n                });\n                assert.deepStrictEqual(messageFromDebugger, resultMessage);\n            })",
                      "err": {},
                      "uuid": "96d42a1f-4340-4e70-b523-04384de9320c",
                      "parentUUID": "6d43ac66-924a-490e-93e1-3b5cf43e3593",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8e3ee567-825f-4d23-9593-bf59c8bdbf1e",
                    "0490720d-0040-425c-98ff-2e12e67acf6e",
                    "37d8d182-e462-41a8-81e7-f329973ea107",
                    "3c4d9198-5e60-48d8-b707-b6f725cd57ef",
                    "96d42a1f-4340-4e70-b523-04384de9320c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "275852ff-3325-4c61-8874-37c19954d791",
          "title": "errorHelper",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/error/errorHelper.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/common/error/errorHelper.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fdb31ebe-8431-4de1-a690-cbe043ef3119",
              "title": "commonContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/error/errorHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/error/errorHelper.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "internal error object with arguments should have correct NotAllSuccessPatternsMatched error message on English",
                  "fullTitle": "errorHelper commonContext internal error object with arguments should have correct NotAllSuccessPatternsMatched error message on English",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(internalErrorWithArgs.message, 'Unknown error: not all success patterns were matched. \\n It means that \"react-native run-android\" command failed. \\n Please, check the View -> Toggle Output -> React Native, \\n View -> Toggle Output -> React Native: Run ios output windows. (error code 712)');\ndone();",
                  "err": {},
                  "uuid": "c0f0be4a-7d91-4f8b-99dd-7904ec042839",
                  "parentUUID": "fdb31ebe-8431-4de1-a690-cbe043ef3119",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "internal error object without arguments should have correct UnsupportedCommandStatus error message on English",
                  "fullTitle": "errorHelper commonContext internal error object without arguments should have correct UnsupportedCommandStatus error message on English",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(internalErrorWithoutArgs.message, \"Unsupported command status (error code 112)\");\ndone();",
                  "err": {},
                  "uuid": "7dbd2816-4a4d-4c3a-963b-4f819bd8c87c",
                  "parentUUID": "fdb31ebe-8431-4de1-a690-cbe043ef3119",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested error object with arguments should have correct error message on English",
                  "fullTitle": "errorHelper commonContext nested error object with arguments should have correct error message on English",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(nestedErrorWithArgs.message, \"Error while executing command 'Command failed with ES Error': Nested ES Error\");\ndone();",
                  "err": {},
                  "uuid": "1ae24d42-b7cc-4a43-9eda-38324039f907",
                  "parentUUID": "fdb31ebe-8431-4de1-a690-cbe043ef3119",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "warning object should have correct error message on English",
                  "fullTitle": "errorHelper commonContext warning object should have correct error message on English",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(warning.errorCode, -1);\nassert.strictEqual(warning.message, \"Warning\");\ndone();",
                  "err": {},
                  "uuid": "fa9a9c77-936c-49e5-a7f2-23743aa0834c",
                  "parentUUID": "fdb31ebe-8431-4de1-a690-cbe043ef3119",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested warning object should have correct error message on English",
                  "fullTitle": "errorHelper commonContext nested warning object should have correct error message on English",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(nestedWarning.errorCode, -1);\nassert.strictEqual(nestedWarning.message, \"Warning: Nested ES Error\");\ndone();",
                  "err": {},
                  "uuid": "d1ea29bc-2a60-435e-aea5-577fc45dca52",
                  "parentUUID": "fdb31ebe-8431-4de1-a690-cbe043ef3119",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0f0be4a-7d91-4f8b-99dd-7904ec042839",
                "7dbd2816-4a4d-4c3a-963b-4f819bd8c87c",
                "1ae24d42-b7cc-4a43-9eda-38324039f907",
                "fa9a9c77-936c-49e5-a7f2-23743aa0834c",
                "d1ea29bc-2a60-435e-aea5-577fc45dca52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7e89ec93-47d5-4286-af5b-f03aea3cbef2",
          "title": "logHelper",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/log.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/common/log.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ecb51f2e-3125-4c53-9409-d172d608b0d0",
              "title": "commonContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/log.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/log.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"commonContext\"",
                  "fullTitle": "logHelper commonContext \"before all\" hook in \"commonContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete process.env.REACT_NATIVE_TOOLS_LOGS_DIR;",
                  "err": {},
                  "uuid": "9cea0f8b-6587-48fb-aef4-6a2762942c4e",
                  "parentUUID": "ecb51f2e-3125-4c53-9409-d172d608b0d0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"commonContext\"",
                  "fullTitle": "logHelper commonContext \"after all\" hook in \"commonContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.REACT_NATIVE_TOOLS_LOGS_DIR = REACT_NATIVE_TOOLS_LOGS_DIR;",
                  "err": {},
                  "uuid": "caf5cf30-1622-4b64-9d3a-0993df1d58ad",
                  "parentUUID": "ecb51f2e-3125-4c53-9409-d172d608b0d0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "getLoggingDirectory should return null if env variable REACT_NATIVE_TOOLS_LOGS_DIR is not defined",
                  "fullTitle": "logHelper commonContext getLoggingDirectory should return null if env variable REACT_NATIVE_TOOLS_LOGS_DIR is not defined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let loggingDir = (0, LogHelper_1.getLoggingDirectory)();\nassert.strictEqual(loggingDir, null);\ndone();",
                  "err": {},
                  "uuid": "3b0f35c3-428c-4d1b-93b7-795f9320c9f0",
                  "parentUUID": "ecb51f2e-3125-4c53-9409-d172d608b0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getLoggingDirectory should return null if env variable REACT_NATIVE_TOOLS_LOGS_DIR is defined by relative path",
                  "fullTitle": "logHelper commonContext getLoggingDirectory should return null if env variable REACT_NATIVE_TOOLS_LOGS_DIR is defined by relative path",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.REACT_NATIVE_TOOLS_LOGS_DIR = \"./logs\";\nlet loggingDir = (0, LogHelper_1.getLoggingDirectory)();\nassert.strictEqual(loggingDir, null);\ndone();",
                  "err": {},
                  "uuid": "ce50f3b7-5633-49f8-a1fb-84a34575c261",
                  "parentUUID": "ecb51f2e-3125-4c53-9409-d172d608b0d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getLoggingDirectory should return correct value if env variable REACT_NATIVE_TOOLS_LOGS_DIR is defined by absolute path",
                  "fullTitle": "logHelper commonContext getLoggingDirectory should return correct value if env variable REACT_NATIVE_TOOLS_LOGS_DIR is defined by absolute path",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "process.env.REACT_NATIVE_TOOLS_LOGS_DIR = path.join(__dirname, \"testFolder\");\nlet loggingDir = (0, LogHelper_1.getLoggingDirectory)();\nassert.strictEqual(loggingDir, process.env.REACT_NATIVE_TOOLS_LOGS_DIR);\nif (loggingDir) {\n    const checkDir = fs.existsSync(loggingDir);\n    if (checkDir) {\n        fs.rmdirSync(loggingDir);\n    }\n    else {\n        assert.fail(\"getLoggingDirectory did not create a directory\");\n    }\n}\nelse {\n    assert.fail(`${loggingDir} is not a correct path`);\n}\ndone();",
                  "err": {},
                  "uuid": "66921ec9-83af-4173-9355-a99ec2835ae5",
                  "parentUUID": "ecb51f2e-3125-4c53-9409-d172d608b0d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b0f35c3-428c-4d1b-93b7-795f9320c9f0",
                "ce50f3b7-5633-49f8-a1fb-84a34575c261",
                "66921ec9-83af-4173-9355-a99ec2835ae5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6a2bdfae-76f1-4e79-99e9-1f5406c4a152",
          "title": "packageLoader",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/packageLoader.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/common/packageLoader.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
              "title": "localNodeModules",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/packageLoader.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/packageLoader.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"localNodeModules\"",
                  "fullTitle": "packageLoader localNodeModules \"before all\" hook in \"localNodeModules\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    rimraf.sync(sampleProjectNodeModulesPath);\n    rimraf.sync(sampleProjectPackageLockJsonPath);\n    findFileInFolderHierarchyStub = sinon.stub(extensionHelper, \"findFileInFolderHierarchy\", () => {\n        return sampleProjectNodeModulesPath;\n    });\n    getVersionFromExtensionNodeModulesStub = sinon.stub(extensionHelper, \"getVersionFromExtensionNodeModules\", (packageName) => {\n        return getPackageVersionsFromNodeModules(sampleProjectPath, packageName);\n    });\n    tryToRequireAfterInstallSpy = sinon.spy(packageLoader_1.PackageLoader.getInstance(), \"tryToRequireAfterInstall\");\n});",
                  "err": {},
                  "uuid": "c969fab2-61f2-4e98-8dea-7f09401005a6",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"localNodeModules\"",
                  "fullTitle": "packageLoader localNodeModules \"after all\" hook in \"localNodeModules\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(packageLoaderTestTimeout);\nfindFileInFolderHierarchyStub === null || findFileInFolderHierarchyStub === void 0 ? void 0 : findFileInFolderHierarchyStub.restore();\ngetVersionFromExtensionNodeModulesStub === null || getVersionFromExtensionNodeModulesStub === void 0 ? void 0 : getVersionFromExtensionNodeModulesStub.restore();\ntryToRequireAfterInstallSpy === null || tryToRequireAfterInstallSpy === void 0 ? void 0 : tryToRequireAfterInstallSpy.restore();\nsinon.restore(extensionHelper);\nrimraf.sync(sampleProjectNodeModulesPath);\nrimraf.sync(sampleProjectPackageLockJsonPath);",
                  "err": {},
                  "uuid": "77d5accd-7b7c-4c85-832e-1520c04838c1",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"after each\" hook in \"localNodeModules\"",
                  "fullTitle": "packageLoader localNodeModules \"after each\" hook in \"localNodeModules\"",
                  "timedOut": false,
                  "duration": 10220,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(packageLoaderTestTimeout);\nfindFileInFolderHierarchyStub === null || findFileInFolderHierarchyStub === void 0 ? void 0 : findFileInFolderHierarchyStub.reset();\ngetVersionFromExtensionNodeModulesStub === null || getVersionFromExtensionNodeModulesStub === void 0 ? void 0 : getVersionFromExtensionNodeModulesStub.reset();\ntryToRequireAfterInstallSpy === null || tryToRequireAfterInstallSpy === void 0 ? void 0 : tryToRequireAfterInstallSpy.reset();\nrimraf.sync(sampleProjectNodeModulesPath);\nrimraf.sync(sampleProjectPackageLockJsonPath);",
                  "err": {},
                  "uuid": "97136c09-bb2e-4b62-8312-707fdecbf8e6",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "The package loader should install packages in node_modules where these packages are not present",
                  "fullTitle": "packageLoader localNodeModules The package loader should install packages in node_modules where these packages are not present",
                  "timedOut": false,
                  "duration": 55973,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(packageLoaderTestTimeout);\n    // There is the problem with '--no-save' flag for 'npm install' command for npm v6.\n    // Installing npm dependencies with the `--no-save` flag will remove\n    // other dependencies that were installed in the same manner (https://github.com/npm/cli/issues/1460).\n    // So we should workaround it passing all packages for install to only one npm install command\n    const getMkdrip = packageLoader_1.PackageLoader.getInstance().generateGetPackageFunction(mkdirpPackageConfig, rimrafPackageFirst);\n    const getRimraf = packageLoader_1.PackageLoader.getInstance().generateGetPackageFunction(rimrafPackageFirst, mkdirpPackageConfig);\n    const [mkdirpPackage, rimrafPackage] = yield Promise.all([getMkdrip(), getRimraf()]);\n    assert.strictEqual(isNotEmptyPackage(rimrafPackage) && isNotEmptyPackage(mkdirpPackage), true, \"Not all packages has been installed and required\");\n    const installedVersionOfMkdirp = yield getPackageVersionsFromNodeModules(sampleProjectPath, mkdirpPackageConfig.getPackageName());\n    const installedVersionOfRimraf = yield getPackageVersionsFromNodeModules(sampleProjectPath, rimrafPackageFirst.getPackageName());\n    assert.strictEqual(installedVersionOfMkdirp, mkdirpPackageConfig.getVersion(), `Wrong installed version of ${mkdirpPackageConfig.getPackageName()} package`);\n    assert.strictEqual(installedVersionOfRimraf, rimrafPackageFirst.getVersion(), `Wrong installed version of ${rimrafPackageFirst.getPackageName()} package`);\n});",
                  "err": {},
                  "uuid": "33bbdae9-7c19-47c9-a298-08a5a1a70b0a",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The package loader should not execute installation for packages that are already present in node_modules",
                  "fullTitle": "packageLoader localNodeModules The package loader should not execute installation for packages that are already present in node_modules",
                  "timedOut": false,
                  "duration": 10348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(packageLoaderTestTimeout);\n    yield commandExecutor.spawn(hostPlatform_1.HostPlatform.getNpmCliCommand(\"npm\"), [\n        \"install\",\n        rimrafPackageFirst.getStringForInstall(),\n        \"--no-save\",\n    ]);\n    assert.strictEqual(yield getPackageVersionsFromNodeModules(sampleProjectPath, rimrafPackageFirst.getPackageName()), rimrafPackageFirst.getVersion(), \"Package was preinstalled with wrong version\");\n    const getRimraf = packageLoader_1.PackageLoader.getInstance().generateGetPackageFunction(rimrafPackageFirst);\n    assert.strictEqual(isNotEmptyPackage(yield getRimraf()), true, \"Package was not required\");\n    assert.strictEqual(tryToRequireAfterInstallSpy === null || tryToRequireAfterInstallSpy === void 0 ? void 0 : tryToRequireAfterInstallSpy.notCalled, true, \"Package loader executes installation for packages that already exist in node_modules\");\n    tryToRequireAfterInstallSpy === null || tryToRequireAfterInstallSpy === void 0 ? void 0 : tryToRequireAfterInstallSpy.reset();\n});",
                  "err": {},
                  "uuid": "b9e518a0-2eaa-4c51-b33e-87dfef7d9c79",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The package loader should install a package with the specific version if the package is already installed but with another version",
                  "fullTitle": "packageLoader localNodeModules The package loader should install a package with the specific version if the package is already installed but with another version",
                  "timedOut": false,
                  "duration": 10708,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(packageLoaderTestTimeout);\n    yield commandExecutor.spawn(hostPlatform_1.HostPlatform.getNpmCliCommand(\"npm\"), [\n        \"install\",\n        rimrafPackageFirst.getStringForInstall(),\n        \"--no-save\",\n    ]);\n    assert.strictEqual(yield getPackageVersionsFromNodeModules(sampleProjectPath, rimrafPackageFirst.getPackageName()), rimrafPackageFirst.getVersion(), \"Package was preinstalled with wrong version\");\n    const getRimraf = packageLoader_1.PackageLoader.getInstance().generateGetPackageFunction(rimrafPackageSecond);\n    assert.strictEqual(isNotEmptyPackage(yield getRimraf()), true, \"Package was not required\");\n    assert.strictEqual(tryToRequireAfterInstallSpy === null || tryToRequireAfterInstallSpy === void 0 ? void 0 : tryToRequireAfterInstallSpy.calledOnce, true, \"Package loader not execute installation for packages that are already present in node_modules but with wrong version\");\n    tryToRequireAfterInstallSpy === null || tryToRequireAfterInstallSpy === void 0 ? void 0 : tryToRequireAfterInstallSpy.reset();\n    const installedVersionOfRimraf = yield getPackageVersionsFromNodeModules(sampleProjectPath, rimrafPackageSecond.getPackageName());\n    assert.strictEqual(installedVersionOfRimraf, rimrafPackageSecond.getVersion(), `Wrong installed version of ${rimrafPackageSecond.getPackageName()} package`);\n});",
                  "err": {},
                  "uuid": "2ce4eb63-2c3c-44d9-84d3-70e6ce8f58dc",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The package loader should install package and require specific subpath for this package",
                  "fullTitle": "packageLoader localNodeModules The package loader should install package and require specific subpath for this package",
                  "timedOut": false,
                  "duration": 14935,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(packageLoaderTestTimeout);\n    const getChalk = packageLoader_1.PackageLoader.getInstance().generateGetPackageFunction(chalkPackageConfig);\n    const chalkPackage = yield getChalk();\n    assert.strictEqual(isNotEmptyPackage(chalkPackage), true, \"Package was not required\");\n    assert.strictEqual(!!(chalkPackage.stringReplaceAll && chalkPackage.stringEncaseCRLFWithFirstIndex), true, \"Required package subpath does not contains all members. It means what there are problems with subpath requiring\");\n});",
                  "err": {},
                  "uuid": "fb4fdc36-c6a3-4af4-91cf-d9a46a61cb8c",
                  "parentUUID": "bf2f71d4-f2b2-4963-9090-d25a9ba30ae6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33bbdae9-7c19-47c9-a298-08a5a1a70b0a",
                "b9e518a0-2eaa-4c51-b33e-87dfef7d9c79",
                "2ce4eb63-2c3c-44d9-84d3-70e6ce8f58dc",
                "fb4fdc36-c6a3-4af4-91cf-d9a46a61cb8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91964,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4f5475a2-7bbc-4700-a083-1889c0aa6d1b",
          "title": "projectVersionHelper",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/projectVersionHelper.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/common/projectVersionHelper.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getReactNativeVersionsFromProjectPackage should return object containing version strings if 'version' field is found in project's package.json file",
              "fullTitle": "projectVersionHelper getReactNativeVersionsFromProjectPackage should return object containing version strings if 'version' field is found in project's package.json file",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        let additionalPackages = [];\n        additionalPackages.push(projectVersionHelper_1.REACT_NATIVE_PACKAGES.REACT_NATIVE_WINDOWS);\n        const versions = yield projectVersionHelper_1.ProjectVersionHelper.getReactNativeVersionsFromProjectPackage(sampleReactNativeProjectDir, additionalPackages);\n        assert.strictEqual(versions.reactNativeVersion, \"0.65.0\");\n        assert.strictEqual(versions.reactNativeWindowsVersion, \"0.65.9\");\n    })",
              "err": {},
              "uuid": "9bb11486-d494-4a17-bd44-b37468d19e12",
              "parentUUID": "4f5475a2-7bbc-4700-a083-1889c0aa6d1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getReactNativePackageVersionsFromNodeModules should throw ReactNativePackageIsNotInstalled error if the package is not installed",
              "fullTitle": "projectVersionHelper getReactNativePackageVersionsFromNodeModules should throw ReactNativePackageIsNotInstalled error if the package is not installed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return projectVersionHelper_1.ProjectVersionHelper.getReactNativePackageVersionsFromNodeModules(nodeModulesRoot).catch(error => {\n    assert.strictEqual(error.errorCode, 606);\n});",
              "err": {},
              "uuid": "5766b317-7671-419b-b102-3130529caff6",
              "parentUUID": "4f5475a2-7bbc-4700-a083-1889c0aa6d1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "isVersionError should return true if a version string contains an error substring",
              "fullTitle": "projectVersionHelper isVersionError should return true if a version string contains an error substring",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(versionError_1.RN_VERSION_ERRORS.MISSING_DEPENDENCIES_FIELDS_IN_PROJECT_PACKAGE_FILE), true);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(versionError_1.RN_VERSION_ERRORS.MISSING_PACKAGE_IN_NODE_MODULES), true);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(versionError_1.RN_VERSION_ERRORS.MISSING_DEPENDENCY_IN_PROJECT_PACKAGE_FILE), true);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(versionError_1.RN_VERSION_ERRORS.UNKNOWN_ERROR), true);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"someError\"), true);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"ERRORSTRING\"), true);\ndone();",
              "err": {},
              "uuid": "e9bb6bb7-16da-4e17-a80c-c61a904557d2",
              "parentUUID": "4f5475a2-7bbc-4700-a083-1889c0aa6d1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "isVersionError should return false if a version string doesn't contain an error substring",
              "fullTitle": "projectVersionHelper isVersionError should return false if a version string doesn't contain an error substring",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"^0.60.0-vnext.68\"), false);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"https://github.com/expo/react-native/archive/sdk-35.0.0.tar.gz\"), false);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"SemverInvalid\"), false);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"0.61.0\"), false);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"SemverInvalid: URL\"), false);\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.isVersionError(\"*\"), false);\ndone();",
              "err": {},
              "uuid": "1b0bdc71-524e-4f99-9e92-b9c85b0ecc2b",
              "parentUUID": "4f5475a2-7bbc-4700-a083-1889c0aa6d1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "processVersion should return semver valid version strings or correct error strings",
              "fullTitle": "projectVersionHelper processVersion should return semver valid version strings or correct error strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"^0.60.0-vnext.68\", false), \"0.60.0-vnext.68\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"=v0.60.0-vnext.68\", false), \"0.60.0-vnext.68\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"1.0.0 - 2.9999.9999\", false), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"latest\", false), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"~1.2\", false), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"2.x\", false), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\">=1.0.2\", false), \"1.0.2\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"<3.0.0\", false), \"3.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"0.61.0-rc.0\"), \"0.61.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"~1.2.3-beta.1\"), \"1.2.3\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"~0.61.3-dev\"), \"0.61.3\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"v0.61.3-dev\"), \"0.61.3\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"^0.61.2.0\"), \"0.61.2\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"0.61.3\"), \"0.61.3\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"https://github.com/expo/react-native/archive/sdk-35.0.0.tar.gz\"), \"SemverInvalid: URL\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"/github.com/expo/react-native/archive/sdk-35.0.0.tar.gz\"), \"35.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"git+https://git@github.com/test/test.git\"), \"SemverInvalid: URL\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"/github.com/expo/react-native/archive/sdk\"), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"qwertyuiop[]asdfghjk\"), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"/Users/test/Data\"), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"@#.str?/4568-7468/.fd\"), \"4568.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"^str.0.61.str.2\"), \"0.61.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"qwert  1 asdf\"), \"1.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"^0.str.str.2\"), \"0.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"\"), \"SemverInvalid\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"1.0.x\"), \"1.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"*.0.*\"), \"0.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"~1.*\"), \"1.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"1.0\"), \"1.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"~1\"), \"1.0.0\");\nassert.strictEqual(projectVersionHelper_1.ProjectVersionHelper.processVersion(\"*\"), \"SemverInvalid\");\ndone();",
              "err": {},
              "uuid": "ae9a77fc-79f2-44a5-8553-50e72cb0be21",
              "parentUUID": "4f5475a2-7bbc-4700-a083-1889c0aa6d1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9cc8ad86-7534-43a8-8cea-f014551af719",
              "title": "getReactNativeVersionsFromProjectWithIncorrectPackageJson",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/projectVersionHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/projectVersionHelper.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"getReactNativeVersionsFromProjectWithIncorrectPackageJson\"",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromProjectWithIncorrectPackageJson \"before all\" hook in \"getReactNativeVersionsFromProjectWithIncorrectPackageJson\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fs.writeFileSync(packageJsonPath, JSON.stringify(versionObj, null, 2));",
                  "err": {},
                  "uuid": "682b1a74-f64e-43ef-a99e-ddfd63093746",
                  "parentUUID": "9cc8ad86-7534-43a8-8cea-f014551af719",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"getReactNativeVersionsFromProjectWithIncorrectPackageJson\"",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromProjectWithIncorrectPackageJson \"after all\" hook in \"getReactNativeVersionsFromProjectWithIncorrectPackageJson\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fs.writeFileSync(packageJsonPath, packageJsonContent);",
                  "err": {},
                  "uuid": "058b97e5-3a56-4416-8c12-8400d678adc7",
                  "parentUUID": "9cc8ad86-7534-43a8-8cea-f014551af719",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "getReactNativeVersionsFromProjectPackage should return containing empty version strings if 'version' field isn't found in project's package.json file",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromProjectWithIncorrectPackageJson getReactNativeVersionsFromProjectPackage should return containing empty version strings if 'version' field isn't found in project's package.json file",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            let additionalPackages = [];\n            additionalPackages.push(projectVersionHelper_1.REACT_NATIVE_PACKAGES.REACT_NATIVE_WINDOWS);\n            const versions = yield projectVersionHelper_1.ProjectVersionHelper.getReactNativeVersionsFromProjectPackage(sampleReactNativeProjectDir, additionalPackages);\n            assert.strictEqual(versions.reactNativeVersion, \"errorMissingDependenciesFieldsInProjectPackageFile\");\n            assert.strictEqual(versions.reactNativeWindowsVersion, \"errorMissingDependenciesFieldsInProjectPackageFile\");\n        })",
                  "err": {},
                  "uuid": "3036a0ee-3dca-4f41-9877-bd96ec5eeb47",
                  "parentUUID": "9cc8ad86-7534-43a8-8cea-f014551af719",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3036a0ee-3dca-4f41-9877-bd96ec5eeb47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf10126b-68c7-4428-94e3-b786476b77c6",
              "title": "getReactNativeVersionsFromNodeModules",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/projectVersionHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/projectVersionHelper.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"getReactNativeVersionsFromNodeModules\"",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromNodeModules \"before all\" hook in \"getReactNativeVersionsFromNodeModules\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.makeDirectoryRecursiveSync(reactNativePackageDir);\nfsHelper.makeDirectoryRecursiveSync(reactNativeWindowsPackageDir);",
                  "err": {},
                  "uuid": "0ffaf31f-d3c9-4f09-8d54-1b2dd00a64a0",
                  "parentUUID": "bf10126b-68c7-4428-94e3-b786476b77c6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"getReactNativeVersionsFromNodeModules\"",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromNodeModules \"after all\" hook in \"getReactNativeVersionsFromNodeModules\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"node_modules\"));",
                  "err": {},
                  "uuid": "a6d8eacc-8afb-43b6-a5df-fdaa6c956890",
                  "parentUUID": "bf10126b-68c7-4428-94e3-b786476b77c6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "getReactNativePackageVersionsFromNodeModules should return object containing packages versions if 'version' field is found in react-native and react-native-windows packages package.json files from node_modules",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromNodeModules getReactNativePackageVersionsFromNodeModules should return object containing packages versions if 'version' field is found in react-native and react-native-windows packages package.json files from node_modules",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const reactNativeVersionObj = {\n                version: \"^0.20.0\",\n            };\n            const reactNativeWindowsVersionObj = {\n                version: \"^0.60.0-vnext.68\",\n            };\n            fs.writeFileSync(path.join(reactNativePackageDir, \"package.json\"), JSON.stringify(reactNativeVersionObj, null, 2));\n            fs.writeFileSync(path.join(reactNativeWindowsPackageDir, \"package.json\"), JSON.stringify(reactNativeWindowsVersionObj, null, 2));\n            let additionalPackages = [];\n            additionalPackages.push(projectVersionHelper_1.REACT_NATIVE_PACKAGES.REACT_NATIVE_WINDOWS);\n            const versions = yield projectVersionHelper_1.ProjectVersionHelper.getReactNativePackageVersionsFromNodeModules(nodeModulesRoot, additionalPackages);\n            assert.strictEqual(versions.reactNativeVersion, \"0.20.0\");\n            assert.strictEqual(versions.reactNativeWindowsVersion, \"0.60.0-vnext.68\");\n        })",
                  "err": {},
                  "uuid": "427db8f5-a252-4b00-86b1-3e94202b31f6",
                  "parentUUID": "bf10126b-68c7-4428-94e3-b786476b77c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getReactNativePackageVersionsFromNodeModules should return object containing strings if version field is an URL",
                  "fullTitle": "projectVersionHelper getReactNativeVersionsFromNodeModules getReactNativePackageVersionsFromNodeModules should return object containing strings if version field is an URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const versionObj = {\n                version: \"https://github.com/expo/react-native/archive/sdk-35.0.0.tar.gz\",\n            };\n            fs.writeFileSync(path.join(reactNativePackageDir, \"package.json\"), JSON.stringify(versionObj, null, 2));\n            const versions = yield projectVersionHelper_1.ProjectVersionHelper.getReactNativePackageVersionsFromNodeModules(nodeModulesRoot);\n            assert.strictEqual(versions.reactNativeVersion, \"SemverInvalid: URL\");\n        })",
                  "err": {},
                  "uuid": "2fffa77a-8ae6-4132-979f-b99165216a66",
                  "parentUUID": "bf10126b-68c7-4428-94e3-b786476b77c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "427db8f5-a252-4b00-86b1-3e94202b31f6",
                "2fffa77a-8ae6-4132-979f-b99165216a66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "9bb11486-d494-4a17-bd44-b37468d19e12",
            "5766b317-7671-419b-b102-3130529caff6",
            "e9bb6bb7-16da-4e17-a80c-c61a904557d2",
            "1b0bdc71-524e-4f99-9e92-b9c85b0ecc2b",
            "ae9a77fc-79f2-44a5-8553-50e72cb0be21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bcb3bb78-74ce-4bdb-91a5-49b84df7f9d5",
          "title": "ReactNativeProjectHelper",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6043fdd-5186-44a5-9a29-730c194c56b2",
              "title": "isAndroidHermesEnabled",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"isAndroidHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isAndroidHermesEnabled \"before all\" hook in \"isAndroidHermesEnabled\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.makeDirectoryRecursiveSync(path.dirname(buildGradleFilePath));",
                  "err": {},
                  "uuid": "3ba456fb-6735-42d3-a7b6-0700b4f16087",
                  "parentUUID": "c6043fdd-5186-44a5-9a29-730c194c56b2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"isAndroidHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isAndroidHermesEnabled \"after all\" hook in \"isAndroidHermesEnabled\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"android\"));",
                  "err": {},
                  "uuid": "14424d0d-b956-4576-960a-685962fd66dd",
                  "parentUUID": "c6043fdd-5186-44a5-9a29-730c194c56b2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "isAndroidHermesEnabled should return 'true' if Hermes engine is enabled in the build.gradle file",
                  "fullTitle": "ReactNativeProjectHelper isAndroidHermesEnabled isAndroidHermesEnabled should return 'true' if Hermes engine is enabled in the build.gradle file",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const buildGradleFileContent = \"project.ext.react = [\\nenableHermes: true,  // clean and rebuild if changing\\n]\";\nfs.writeFileSync(buildGradleFilePath, buildGradleFileContent);\nconst androidHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isAndroidHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(androidHermesEnabled, true);",
                  "err": {},
                  "uuid": "a864ccd7-e67e-43a5-9f4c-b9da97886e1c",
                  "parentUUID": "c6043fdd-5186-44a5-9a29-730c194c56b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isAndroidHermesEnabled should return 'false' if Hermes engine is disabled in the build.gradle file",
                  "fullTitle": "ReactNativeProjectHelper isAndroidHermesEnabled isAndroidHermesEnabled should return 'false' if Hermes engine is disabled in the build.gradle file",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const buildGradleFileContent = \"project.ext.react = [\\nenableHermes: false,  // clean and rebuild if changing\\n]\";\nfs.writeFileSync(buildGradleFilePath, buildGradleFileContent);\nconst androidHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isAndroidHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(androidHermesEnabled, false);",
                  "err": {},
                  "uuid": "2faca07f-dc16-497e-bdbb-e90f510d5b5e",
                  "parentUUID": "c6043fdd-5186-44a5-9a29-730c194c56b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isAndroidHermesEnabled should return 'false' if the Hermes engine parameter is absent in the build.gradle file",
                  "fullTitle": "ReactNativeProjectHelper isAndroidHermesEnabled isAndroidHermesEnabled should return 'false' if the Hermes engine parameter is absent in the build.gradle file",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const buildGradleFileContent = \"project.ext.react = [\\n]\";\nfs.writeFileSync(buildGradleFilePath, buildGradleFileContent);\nconst androidHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isAndroidHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(androidHermesEnabled, false);",
                  "err": {},
                  "uuid": "11d1368f-a6d8-4e94-a054-4576c95481c2",
                  "parentUUID": "c6043fdd-5186-44a5-9a29-730c194c56b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a864ccd7-e67e-43a5-9f4c-b9da97886e1c",
                "2faca07f-dc16-497e-bdbb-e90f510d5b5e",
                "11d1368f-a6d8-4e94-a054-4576c95481c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e74d2c7b-9bbb-4391-a4cb-c7cf064b3e8a",
              "title": "isIOSHermesEnabled",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"isIOSHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isIOSHermesEnabled \"before all\" hook in \"isIOSHermesEnabled\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.makeDirectoryRecursiveSync(path.dirname(podfileFilePath));",
                  "err": {},
                  "uuid": "9edba1b0-21c4-427d-8d22-19e6ed891a19",
                  "parentUUID": "e74d2c7b-9bbb-4391-a4cb-c7cf064b3e8a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"isIOSHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isIOSHermesEnabled \"after all\" hook in \"isIOSHermesEnabled\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"ios\"));",
                  "err": {},
                  "uuid": "b94098ca-843a-40ec-97ef-3f77c5ae5dd7",
                  "parentUUID": "e74d2c7b-9bbb-4391-a4cb-c7cf064b3e8a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "isIOSHermesEnabled should return 'true' if Hermes engine is enabled in the Podfile file",
                  "fullTitle": "ReactNativeProjectHelper isIOSHermesEnabled isIOSHermesEnabled should return 'true' if Hermes engine is enabled in the Podfile file",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  use_react_native!(\\n\" +\n    \"    :path => config[:reactNativePath],\\n\" +\n    \"    # to enable hermes on iOS, change `false` to `true` and then install pods\\n\" +\n    \"    :hermes_enabled => true\\n\" +\n    \"  )\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst iOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isIOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(iOSHermesEnabled, true);",
                  "err": {},
                  "uuid": "ea4a94a2-b88b-404f-b0d7-f7861631da47",
                  "parentUUID": "e74d2c7b-9bbb-4391-a4cb-c7cf064b3e8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isIOSHermesEnabled should return 'false' if Hermes engine is disabled in the Podfile file",
                  "fullTitle": "ReactNativeProjectHelper isIOSHermesEnabled isIOSHermesEnabled should return 'false' if Hermes engine is disabled in the Podfile file",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  use_react_native!(\\n\" +\n    \"    :path => config[:reactNativePath],\\n\" +\n    \"    # to enable hermes on iOS, change `false` to `true` and then install pods\\n\" +\n    \"    :hermes_enabled => false\\n\" +\n    \"  )\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst iOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isIOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(iOSHermesEnabled, false);",
                  "err": {},
                  "uuid": "49cccbba-2ab7-48ed-b431-d3daf04e95ce",
                  "parentUUID": "e74d2c7b-9bbb-4391-a4cb-c7cf064b3e8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isIOSHermesEnabled should return 'false' if the Hermes engine parameter is absent in the Podfile file",
                  "fullTitle": "ReactNativeProjectHelper isIOSHermesEnabled isIOSHermesEnabled should return 'false' if the Hermes engine parameter is absent in the Podfile file",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  use_react_native!(\\n\" + \"    :path => config[:reactNativePath],\\n\" + \"  )\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst iOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isIOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(iOSHermesEnabled, false);",
                  "err": {},
                  "uuid": "e314f0a3-fe6c-44d9-beb7-1732a38d5948",
                  "parentUUID": "e74d2c7b-9bbb-4391-a4cb-c7cf064b3e8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea4a94a2-b88b-404f-b0d7-f7861631da47",
                "49cccbba-2ab7-48ed-b431-d3daf04e95ce",
                "e314f0a3-fe6c-44d9-beb7-1732a38d5948"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7377c836-5df2-4577-bcab-6f7907062ea3",
              "title": "isMacOSHermesEnabled",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"isMacOSHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isMacOSHermesEnabled \"before all\" hook in \"isMacOSHermesEnabled\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.makeDirectoryRecursiveSync(path.dirname(podfileFilePath));",
                  "err": {},
                  "uuid": "ec8ba19a-0e64-4e17-8d77-f98d4afee4bb",
                  "parentUUID": "7377c836-5df2-4577-bcab-6f7907062ea3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"isMacOSHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isMacOSHermesEnabled \"after all\" hook in \"isMacOSHermesEnabled\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"macos\"));",
                  "err": {},
                  "uuid": "a7233314-4ff7-40e5-a129-129c61b3f71d",
                  "parentUUID": "7377c836-5df2-4577-bcab-6f7907062ea3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "isMacOSHermesEnabled should return 'true' if the 'hermes_enabled' parameter in the Podfile file is uncommented and equal to 'true'",
                  "fullTitle": "ReactNativeProjectHelper isMacOSHermesEnabled isMacOSHermesEnabled should return 'true' if the 'hermes_enabled' parameter in the Podfile file is uncommented and equal to 'true'",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  use_react_native!(\\n\" +\n    \"    :path => '../node_modules/react-native-macos',\\n\" +\n    \"    # To use Hermes, install the `hermes-engine-darwin` npm package, e.g.:\\n\" +\n    \"    #   $ yarn add 'hermes-engine-darwin@~0.5.3'\\n\" +\n    \"    #\\n\" +\n    \"    # Then enable this option:\\n\" +\n    \"    :hermes_enabled => true\\n\" +\n    \"  )\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst macOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isMacOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(macOSHermesEnabled, true);",
                  "err": {},
                  "uuid": "189166b3-d0a3-4e68-bc78-d0b4f032d55b",
                  "parentUUID": "7377c836-5df2-4577-bcab-6f7907062ea3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isMacOSHermesEnabled should return 'true' if the \"pod 'hermes'\" parameter in the Podfile file is uncommented",
                  "fullTitle": "ReactNativeProjectHelper isMacOSHermesEnabled isMacOSHermesEnabled should return 'true' if the \"pod 'hermes'\" parameter in the Podfile file is uncommented",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  target 'rnmacos62-macOS' do\\n\" +\n    \"    platform :macos, '10.13'\\n\" +\n    \"    use_native_modules!\\n\" +\n    \"    # Enables Hermes\\n\" +\n    \"    #\\n\" +\n    \"    # Be sure to first install the `hermes-engine-darwin` npm package, e.g.:\\n\" +\n    \"    #\\n\" +\n    \"    #   $ yarn add 'hermes-engine-darwin@^0.4.3'\\n\" +\n    \"    #\\n\" +\n    \"    pod 'React-Core/Hermes', :path => '../node_modules/react-native-macos/'\\n\" +\n    \"    pod 'hermes', :path => '../node_modules/hermes-engine-darwin'\\n\" +\n    \"    pod 'libevent', :podspec => '../node_modules/react-native-macos/third-party-podspecs/libevent.podspec'\\n\" +\n    \"    # Pods specifically for macOS target\\n\" +\n    \"  end\\n\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst macOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isMacOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(macOSHermesEnabled, true);",
                  "err": {},
                  "uuid": "018b8d38-8e8f-4b8a-a19f-dbb5137c61bf",
                  "parentUUID": "7377c836-5df2-4577-bcab-6f7907062ea3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isMacOSHermesEnabled should return 'false' if the 'hermes_enabled' parameter in the Podfile file is commented and equal to 'true'",
                  "fullTitle": "ReactNativeProjectHelper isMacOSHermesEnabled isMacOSHermesEnabled should return 'false' if the 'hermes_enabled' parameter in the Podfile file is commented and equal to 'true'",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  use_react_native!(\\n\" +\n    \"    :path => '../node_modules/react-native-macos',\\n\" +\n    \"    # To use Hermes, install the `hermes-engine-darwin` npm package, e.g.:\\n\" +\n    \"    #   $ yarn add 'hermes-engine-darwin@~0.5.3'\\n\" +\n    \"    #\\n\" +\n    \"    # Then enable this option:\\n\" +\n    \"    #   :hermes_enabled => true\\n\" +\n    \"  )\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst macOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isMacOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(macOSHermesEnabled, false);",
                  "err": {},
                  "uuid": "465122c2-44d0-4313-a79b-3aa44b628771",
                  "parentUUID": "7377c836-5df2-4577-bcab-6f7907062ea3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isMacOSHermesEnabled should return 'false' if the Hermes engine parameter is absent in the Podfile file",
                  "fullTitle": "ReactNativeProjectHelper isMacOSHermesEnabled isMacOSHermesEnabled should return 'false' if the Hermes engine parameter is absent in the Podfile file",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const podfileFileContent = \"  use_react_native!(\\n\" +\n    \"    :path => '../node_modules/react-native-macos',\\n\" +\n    \"  )\";\nfs.writeFileSync(podfileFilePath, podfileFileContent);\nconst macOSHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isMacOSHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(macOSHermesEnabled, false);",
                  "err": {},
                  "uuid": "6a4c218c-1305-4bb8-b043-d26ef5e58277",
                  "parentUUID": "7377c836-5df2-4577-bcab-6f7907062ea3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "189166b3-d0a3-4e68-bc78-d0b4f032d55b",
                "018b8d38-8e8f-4b8a-a19f-dbb5137c61bf",
                "465122c2-44d0-4313-a79b-3aa44b628771",
                "6a4c218c-1305-4bb8-b043-d26ef5e58277"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9b020f6-8f64-4e0c-915f-beef39d2a02e",
              "title": "isWindowsHermesEnabled",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/reactNativeProjectHelper.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"isWindowsHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isWindowsHermesEnabled \"before all\" hook in \"isWindowsHermesEnabled\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.makeDirectoryRecursiveSync(path.dirname(experimentalFeaturesFilePath));",
                  "err": {},
                  "uuid": "3d97a81e-a262-4452-85e7-c17ca8dbc7a1",
                  "parentUUID": "e9b020f6-8f64-4e0c-915f-beef39d2a02e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"isWindowsHermesEnabled\"",
                  "fullTitle": "ReactNativeProjectHelper isWindowsHermesEnabled \"after all\" hook in \"isWindowsHermesEnabled\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"windows\"));",
                  "err": {},
                  "uuid": "2f7ac41c-1d8f-40dc-8973-d149b0e1860e",
                  "parentUUID": "e9b020f6-8f64-4e0c-915f-beef39d2a02e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "isWindowsHermesEnabled should return 'true' if Hermes engine is enabled in the ExperimentalFeatures.props file",
                  "fullTitle": "ReactNativeProjectHelper isWindowsHermesEnabled isWindowsHermesEnabled should return 'true' if Hermes engine is enabled in the ExperimentalFeatures.props file",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const experimentalFeaturesFileContent = '  <PropertyGroup Label=\"Microsoft.ReactNative Experimental Features\">\\n' +\n    \"    <!--\\n\" +\n    \"      Enables default usage of Hermes.\\n\" +\n    \"      \\n\" +\n    \"      See https://microsoft.github.io/react-native-windows/docs/hermes\\n\" +\n    \"    -->\\n\" +\n    \"    <UseHermes>true</UseHermes>\\n\" +\n    \"    <UseWinUI3>false</UseWinUI3>\\n\" +\n    \"  </PropertyGroup>\";\nfs.writeFileSync(experimentalFeaturesFilePath, experimentalFeaturesFileContent);\nconst windowsHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isWindowsHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(windowsHermesEnabled, true);",
                  "err": {},
                  "uuid": "00c636e5-5d0e-441f-a8bc-6f697b78a720",
                  "parentUUID": "e9b020f6-8f64-4e0c-915f-beef39d2a02e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isWindowsHermesEnabled should return 'fasle' if Hermes engine is disabled in the ExperimentalFeatures.props file",
                  "fullTitle": "ReactNativeProjectHelper isWindowsHermesEnabled isWindowsHermesEnabled should return 'fasle' if Hermes engine is disabled in the ExperimentalFeatures.props file",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const experimentalFeaturesFileContent = '  <PropertyGroup Label=\"Microsoft.ReactNative Experimental Features\">\\n' +\n    \"    <!--\\n\" +\n    \"      Enables default usage of Hermes.\\n\" +\n    \"      \\n\";\n\"      See https://microsoft.github.io/react-native-windows/docs/hermes\\n\" +\n    \"    -->\\n\" +\n    \"    <UseHermes>false</UseHermes>\\n\" +\n    \"    <UseWinUI3>false</UseWinUI3>\\n\" +\n    \"  </PropertyGroup>\";\nfs.writeFileSync(experimentalFeaturesFilePath, experimentalFeaturesFileContent);\nconst windowsHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isWindowsHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(windowsHermesEnabled, false);",
                  "err": {},
                  "uuid": "7cd9b819-3c82-467b-bb0d-9b51cca5aeab",
                  "parentUUID": "e9b020f6-8f64-4e0c-915f-beef39d2a02e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isWindowsHermesEnabled should return 'fasle' if there is no the ExperimentalFeatures.props file",
                  "fullTitle": "ReactNativeProjectHelper isWindowsHermesEnabled isWindowsHermesEnabled should return 'fasle' if there is no the ExperimentalFeatures.props file",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"windows\"));\nconst windowsHermesEnabled = reactNativeProjectHelper_1.ReactNativeProjectHelper.isWindowsHermesEnabled(sampleReactNativeProjectDir);\nassert.strictEqual(windowsHermesEnabled, false);",
                  "err": {},
                  "uuid": "4c1c8306-f10c-410f-b5f9-fe4344b151db",
                  "parentUUID": "e9b020f6-8f64-4e0c-915f-beef39d2a02e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00c636e5-5d0e-441f-a8bc-6f697b78a720",
                "7cd9b819-3c82-467b-bb0d-9b51cca5aeab",
                "4c1c8306-f10c-410f-b5f9-fe4344b151db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c3dc937-64a3-4ce9-bdd6-338dd0c25cee",
          "title": "utilHelper",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/utils.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/common/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "44167a1b-01a2-47a1-8ddb-a806de82bd0c",
              "title": "stripJsonTrailingComma",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/common/utils.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/common/utils.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove trailing comma from a JSON",
                  "fullTitle": "utilHelper stripJsonTrailingComma should remove trailing comma from a JSON",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const strWithTrailingComma = `\n{\n    \"runtimeArgs\": [\n        \"--inspect-brk=9237\",\n        \"start\",\n    ],\n    \"runtimeVersion\": \"12.16.3\",\n    \"port\": 9237,\n    \"type\": \"node\",\n    \"name\": \"some-project\",\n    \"timeout\": 300000\n}\n`;\nconst strObject = (0, utils_1.stripJsonTrailingComma)(strWithTrailingComma);\nconst strippedStr = `{\n    \"runtimeArgs\": [\n        \"--inspect-brk=9237\",\n        \"start\"\n    ],\n    \"runtimeVersion\": \"12.16.3\",\n    \"port\": 9237,\n    \"type\": \"node\",\n    \"name\": \"some-project\",\n    \"timeout\": 300000\n}`;\nconst strippedStrObject = JSON.parse(strippedStr);\nassert.strictEqual(JSON.stringify(strObject), JSON.stringify(strippedStrObject));\ndone();",
                  "err": {},
                  "uuid": "5308af1b-e6c3-4a24-bc0a-926a4d43a295",
                  "parentUUID": "44167a1b-01a2-47a1-8ddb-a806de82bd0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should manage string contains end of string trailing comma",
                  "fullTitle": "utilHelper stripJsonTrailingComma should manage string contains end of string trailing comma",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const strWithTrailingComma = `\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Android\",\n      \"cwd\": \"\\${workspaceFolder\\}\",\n      \"type\": \"reactnative\",\n      \"request\": \"launch\",\n      \"platform\": \"android\",\n      \"logCatArguments\": [\"ReactNative\", \"ReactNativeJS\"],\n      \"env\": {\n        \"testvar\": \"(value0), (value1), (value2)\"\n      }\n    }\n  ]\n},\n`;\nconst strObject = (0, utils_1.stripJsonTrailingComma)(strWithTrailingComma);\nconst strippedStr = `\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Android\",\n      \"cwd\": \"\\${workspaceFolder\\}\",\n      \"type\": \"reactnative\",\n      \"request\": \"launch\",\n      \"platform\": \"android\",\n      \"logCatArguments\": [\"ReactNative\", \"ReactNativeJS\"],\n      \"env\": {\n        \"testvar\": \"(value0), (value1), (value2)\"\n      }\n    }\n  ]\n}\n`;\nconst strippedStrObject = JSON.parse(strippedStr);\nassert.strictEqual(JSON.stringify(strObject), JSON.stringify(strippedStrObject));\ndone();",
                  "err": {},
                  "uuid": "f81a200c-4511-49ae-b835-4801e7ff0aa6",
                  "parentUUID": "44167a1b-01a2-47a1-8ddb-a806de82bd0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5308af1b-e6c3-4a24-bc0a-926a4d43a295",
                "f81a200c-4511-49ae-b835-4801e7ff0aa6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b1b4dfb3-bca6-4e36-b133-f188b5802ce6",
          "title": "appWorker",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c00a0b1-b5fb-4363-a0a1-78df2525b98f",
              "title": "debuggerContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a45adb13-b41d-4349-89c1-d322c9040c88",
                  "title": "SandboxedAppWorker",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "beforeHooks": [],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker \"after each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Reset everything\nif (spawnStub) {\n    spawnStub.restore();\n}\npostReplyFunction.reset();\nif (testWorker) {\n    testWorker.stop();\n}",
                      "err": {},
                      "uuid": "db002bcb-7191-4d20-b116-cdf2110da0ac",
                      "parentUUID": null,
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "should execute scripts correctly and be able to invoke the callback",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker should execute scripts correctly and be able to invoke the callback",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const expectedMessageResult = { success: true };\n    const startScriptContents = `var testResponse = ${JSON.stringify(expectedMessageResult)}; postMessage(testResponse);`;\n    yield workerWithScript(startScriptContents).start();\n    yield promise_1.PromiseUtil.delay(1000);\n    assert(postReplyFunction.calledWithExactly(expectedMessageResult));\n});",
                      "err": {},
                      "uuid": "cbf5fcfc-d7c1-4641-8f4a-f85c7adf00c0",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should be able to import scripts",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker should be able to import scripts",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    // NOTE: we're not able to mock reading script for import since this is performed by a\n    // separate node process and is out of control so we must provide a real script file\n    const scriptImportPath = path\n        .resolve(sourcesStoragePath, \"importScriptsTest.js\")\n        .replace(/\\\\/g, \"/\");\n    const startScriptContents = `importScripts(\"${scriptImportPath}\"); postMessage(\"postImport\");`;\n    yield workerWithScript(startScriptContents).start();\n    // We have not yet finished importing the script, we should not have posted a response yet\n    assert(postReplyFunction.notCalled, \"postReplyFuncton called before scripts imported\");\n    yield promise_1.PromiseUtil.delay(500);\n    assert(postReplyFunction.calledWith(\"postImport\"), \"postMessage after import not handled\");\n    assert(postReplyFunction.calledWith(\"inImport\"), \"postMessage not registered from within import\");\n});",
                      "err": {},
                      "uuid": "affede20-c32a-4d9c-80f4-67d1a2d9781c",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should correctly pass postMessage to the loaded script",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker should correctly pass postMessage to the loaded script",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const startScriptContents = `onmessage = postMessage;`;\n    const testMessage = { method: \"test\", success: true };\n    const worker = workerWithScript(startScriptContents);\n    yield worker.start();\n    assert(postReplyFunction.notCalled, \"postReplyFunction called before message sent\");\n    worker.postMessage(testMessage);\n    yield promise_1.PromiseUtil.delay(1000);\n    assert(postReplyFunction.calledWith({ data: testMessage }), \"No echo back from app\");\n});",
                      "err": {},
                      "uuid": "a57ce4b1-0854-49b9-8706-21b7bf7b7480",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should be able to require an installed node module via __debug__.require",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker should be able to require an installed node module via __debug__.require",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const expectedMessageResult = { promiseString: Promise.toString() };\n    const startScriptContents = `var testResponse = { promiseString: Promise.toString() };\n    postMessage(testResponse);`;\n    yield workerWithScript(startScriptContents).start();\n    yield promise_1.PromiseUtil.delay(5000);\n    assert(postReplyFunction.calledWithExactly(expectedMessageResult));\n});",
                      "err": {},
                      "uuid": "22fb550e-aa3a-4c43-b58a-21dbf49d3219",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should download script from remote packager",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker should download script from remote packager",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                class MockAppWorker extends forkedAppWorker_1.ForkedAppWorker {\n                    constructor() {\n                        super(...arguments);\n                        this.debuggeeProcess = {\n                            send: () => void 0,\n                        };\n                    }\n                }\n                const remotePackagerAddress = \"1.2.3.4\";\n                const remotePackagerPort = 1337;\n                const worker = new MockAppWorker(remotePackagerAddress, remotePackagerPort, sourcesStoragePath, \"\", postReplyFunction);\n                const downloadAppScriptStub = sinon.stub(worker.scriptImporter, \"downloadAppScript\");\n                const fakeDownloadedScript = { filepath: \"/home/test/file\" };\n                downloadAppScriptStub.returns(Promise.resolve(fakeDownloadedScript));\n                const debuggeeProcessSendStub = sinon.stub(worker.debuggeeProcess, \"send\");\n                worker.workerLoaded = Promise.resolve();\n                const fakeMessage = {\n                    method: \"executeApplicationScript\",\n                    url: \"http://localhost:8081/test-url\",\n                };\n                yield worker.postMessage(fakeMessage);\n                assert.strictEqual(downloadAppScriptStub.calledOnce, true);\n                assert.strictEqual(downloadAppScriptStub.firstCall.args[0], `http://${remotePackagerAddress}:${remotePackagerPort}/test-url`);\n                assert.strictEqual(debuggeeProcessSendStub.calledOnce, true);\n                assert.deepStrictEqual(debuggeeProcessSendStub.firstCall.args[0], {\n                    data: Object.assign(Object.assign({}, fakeMessage), { url: worker.pathToFileUrl(fakeDownloadedScript.filepath) }),\n                });\n            })",
                      "err": {},
                      "uuid": "5f4bcc91-edab-48ba-bf89-8faaef87b710",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "debuggee process should pass its output to appWorker",
                      "fullTitle": "appWorker debuggerContext SandboxedAppWorker debuggee process should pass its output to appWorker",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "class MockAppWorker extends forkedAppWorker_1.ForkedAppWorker {\n    getDebuggeeProcess() {\n        return this.debuggeeProcess;\n    }\n}\nconst sourcesStoragePath = path.resolve(__dirname, \"assets\", \"consoleLog\");\nconst testWorker = new MockAppWorker(\"localhost\", packagerPort, sourcesStoragePath, \"\", \n// eslint-disable-next-line @typescript-eslint/no-empty-function\n() => { });\nlet ws;\nlet waitForContinue;\nlet waitForCheckingOutput;\nlet debuggeeProcess;\nteardown(done => {\n    if (ws)\n        ws.close();\n    done();\n});\nconst sendContinueToDebuggee = (wsDebuggerUrl, resolve, reject) => {\n    ws = new WebSocket(wsDebuggerUrl);\n    ws.on(\"open\", function open() {\n        ws.send(JSON.stringify({\n            // id is just a random number, because debugging protocol requires it\n            id: 100,\n            method: \"Runtime.runIfWaitingForDebugger\",\n        }), (err) => __awaiter(this, void 0, void 0, function* () {\n            if (err) {\n                reject(err);\n            }\n            // Delay is needed for debuggee process to execute script\n            yield promise_1.PromiseUtil.delay(1000);\n            resolve();\n        }));\n    });\n    ws.on(\"error\", () => {\n        // Suppress any errors from websocket client otherwise you'd get ECONNRESET or 400 errors\n        // for some reasons\n    });\n};\nwaitForContinue = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n    yield testWorker.start();\n    let output = \"\";\n    let debugOutput = \"\";\n    let isAlreadySending = false;\n    debuggeeProcess = testWorker.getDebuggeeProcess();\n    debuggeeProcess.stderr.on(\"data\", (data) => {\n        // Two notices:\n        // 1. More correct way would be getting websocket debugger url by requesting GET http://localhost:debugPort/json/list\n        //    but for some reason sometimes it returns ECONNRESET, so we have to find it in debug logs produced by debuggee\n        // 2. Debuggee process writes debug logs in stderr for some reasons\n        data = data.toString();\n        debugOutput += data;\n        console.log(data);\n        // Looking for websocket url\n        // 1. Node v8+: ws://127.0.0.1:31732/7dd4c075-3222-4f31-8fb5-50cc5705dd21\n        const guidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n        const finalPattern = new RegExp(`(ws:\\/\\/127.0.0.1:[0-9]+\\/${guidPattern}$)`, \"gm\");\n        let found = debugOutput.match(finalPattern);\n        if (found && !isAlreadySending) {\n            isAlreadySending = true;\n            // Debuggee process which has been ran with --debug-brk will be stopped at 0 line,\n            // so we have to send it a command to continue execution of the script via websocket.\n            sendContinueToDebuggee(found[0], resolve, reject);\n            return;\n        }\n        // 2. Node v6: ws=127.0.0.1:31732/7dd4c075-3222-4f31-8fb5-50cc5705dd21\n        found = debugOutput.match(/(ws=.+$)/gm);\n        if (found) {\n            sendContinueToDebuggee(found[0].replace(\"ws=\", \"ws:\\\\\\\\\"), resolve, reject);\n            return;\n        }\n    });\n    debuggeeProcess.stdout.on(\"data\", (data) => {\n        output += data;\n    });\n    debuggeeProcess.on(\"exit\", () => {\n        assert.notEqual(output, \"\");\n        assert.strictEqual(output.trim(), \"test output from debuggee process\");\n        waitForCheckingOutput = Promise.resolve();\n    });\n    yield waitForContinue;\n    debuggeeProcess.kill();\n    yield waitForCheckingOutput;\n}));",
                      "err": {},
                      "uuid": "76212aa2-06fd-408f-accf-627c7525d666",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "cbf5fcfc-d7c1-4641-8f4a-f85c7adf00c0",
                    "affede20-c32a-4d9c-80f4-67d1a2d9781c",
                    "a57ce4b1-0854-49b9-8706-21b7bf7b7480",
                    "22fb550e-aa3a-4c43-b58a-21dbf49d3219",
                    "5f4bcc91-edab-48ba-bf89-8faaef87b710",
                    "76212aa2-06fd-408f-accf-627c7525d666"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "46a2e25a-20d3-4d30-a723-cca1af166c70",
                  "title": "ScriptImporter",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "appWorker debuggerContext ScriptImporter \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "scriptImporter = new scriptImporter_1.ScriptImporter(\"localhost\", 8081, \"sources\");",
                      "err": {},
                      "uuid": "f3a066db-b40b-4a45-b44f-2f6414af4728",
                      "parentUUID": null,
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "prepareDebuggerWorkerURL should return correct URL for RN < 0.50.0",
                      "fullTitle": "appWorker debuggerContext ScriptImporter prepareDebuggerWorkerURL should return correct URL for RN < 0.50.0",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(scriptImporter.prepareDebuggerWorkerURL(\"0.49.0\"), \"http://localhost:8081/debuggerWorker.js\");",
                      "err": {},
                      "uuid": "a3adf9cd-1451-44de-bfc0-664f2c6ec90e",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "prepareDebuggerWorkerURL should return correct URL for RN >= 0.50.0",
                      "fullTitle": "appWorker debuggerContext ScriptImporter prepareDebuggerWorkerURL should return correct URL for RN >= 0.50.0",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(scriptImporter.prepareDebuggerWorkerURL(\"0.50.0\"), \"http://localhost:8081/debugger-ui/debuggerWorker.js\");",
                      "err": {},
                      "uuid": "b3bfd43f-76a8-4dae-bbe8-28cc387bd950",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "prepareDebuggerWorkerURL should return correct URL when debuggerWorkerUrlPath is used",
                      "fullTitle": "appWorker debuggerContext ScriptImporter prepareDebuggerWorkerURL should return correct URL when debuggerWorkerUrlPath is used",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(scriptImporter.prepareDebuggerWorkerURL(\"0.55.4\", \"\"), \"http://localhost:8081/debuggerWorker.js\");\nassert.strictEqual(scriptImporter.prepareDebuggerWorkerURL(\"0.55.4\", \"new-debugger/\"), \"http://localhost:8081/new-debugger/debuggerWorker.js\");\nassert.strictEqual(scriptImporter.prepareDebuggerWorkerURL(\"0.55.4\", undefined), \"http://localhost:8081/debugger-ui/debuggerWorker.js\");\nassert.strictEqual(scriptImporter.prepareDebuggerWorkerURL(\"0.49.0\", \"debugger-ui/\"), \"http://localhost:8081/debugger-ui/debuggerWorker.js\");",
                      "err": {},
                      "uuid": "80ad0511-485b-4042-b50c-6456a3b33af4",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "a3adf9cd-1451-44de-bfc0-664f2c6ec90e",
                    "b3bfd43f-76a8-4dae-bbe8-28cc387bd950",
                    "80ad0511-485b-4042-b50c-6456a3b33af4"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f100bf53-a90c-4624-b6f5-5cee42fbf060",
                  "title": "MultipleLifetimesAppWorker",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "webSocket = sinon.createStubInstance(WebSocket);\nsandboxedAppWorkerStub = sinon.createStubInstance(forkedAppWorker_1.ForkedAppWorker);\nappWorkerModuleStub = sinon\n    .stub(ForkedAppWorkerModule, \"ForkedAppWorker\")\n    .returns(sandboxedAppWorkerStub);\nconst messageInvocation = webSocket.on.withArgs(\"message\");\nsendMessage = (message) => messageInvocation.callArgWith(1, message);\nwebSocketConstructor = sinon.stub();\nwebSocketConstructor.returns(webSocket);\npackagerIsRunning = sinon.stub(packagerStatus, \"ensurePackagerRunning\");\npackagerIsRunning.returns(Promise.resolve());\nconst attachRequestArguments = {\n    address: \"localhost\",\n    port: packagerPort,\n};\nmultipleLifetimesWorker = new appWorker_1.MultipleLifetimesAppWorker(attachRequestArguments, sourcesStoragePath, \"\", new vscode.CancellationTokenSource().token, {\n    webSocketConstructor: webSocketConstructor,\n});\nsinon\n    .stub(multipleLifetimesWorker, \"downloadAndPatchDebuggerWorker\")\n    .returns(Promise.resolve());",
                      "err": {},
                      "uuid": "d78c0fdb-d7af-4c8d-862e-acd39544dcbb",
                      "parentUUID": null,
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker \"after each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Reset everything\nmultipleLifetimesWorker.stop();\nappWorkerModuleStub.restore();\npackagerIsRunning.restore();\nif (clock) {\n    clock.restore();\n}",
                      "err": {},
                      "uuid": "7ccba8cf-86f9-4c6f-b2f5-c40a69b999de",
                      "parentUUID": null,
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "with packager running should construct a websocket connection to the correct endpoint and listen for events",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker with packager running should construct a websocket connection to the correct endpoint and listen for events",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield multipleLifetimesWorker.start();\n    const websocketRegex = new RegExp(\"ws://[^:]*:[0-9]*/debugger-proxy\\\\?role=debugger\");\n    assert(webSocketConstructor.calledWithMatch(websocketRegex), \"The web socket was not constructed to the correct url: \" +\n        webSocketConstructor.args[0][0]);\n    const expectedListeners = [\"open\", \"close\", \"message\", \"error\"];\n    expectedListeners.forEach(event => {\n        assert(webSocket.on.calledWithMatch(event), `Missing listener for ${event}`);\n    });\n});",
                      "err": {},
                      "uuid": "3b372519-c35d-488f-a769-0b10481d13ba",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "with packager running should attempt to reconnect after disconnecting",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker with packager running should attempt to reconnect after disconnecting",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    let startWorker = sinon.spy(multipleLifetimesWorker, \"start\");\n    yield multipleLifetimesWorker.start();\n    // Forget previous invocations\n    startWorker.reset();\n    packagerIsRunning.returns(Promise.resolve());\n    clock = sinon.useFakeTimers();\n    const closeInvocation = webSocket.on.withArgs(\"close\");\n    closeInvocation.callArg(1);\n    // Ensure that the retry is 100ms after the disconnection\n    clock.tick(99);\n    assert(startWorker.notCalled, \"Attempted to reconnect too quickly\");\n    clock.tick(1);\n    assert(startWorker.called);\n});",
                      "err": {},
                      "uuid": "23bb3ad2-be94-492f-9b5b-aca1b7b1f171",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "with packager running should respond correctly to prepareJSRuntime messages",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker with packager running should respond correctly to prepareJSRuntime messages",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield multipleLifetimesWorker.start();\n    const messageId = 1;\n    const testMessage = JSON.stringify({\n        method: \"prepareJSRuntime\",\n        id: messageId,\n    });\n    const expectedReply = JSON.stringify({ replyID: messageId });\n    const appWorkerStart = sandboxedAppWorkerStub.start;\n    const websocketSend = webSocket.send;\n    const appWorkerDeferred = new Promise(resolve => {\n        appWorkerStart.returns(appWorkerDeferred);\n        sendMessage(testMessage);\n        assert(appWorkerStart.called, \"SandboxedAppWorker not started in respones to prepareJSRuntime\");\n        assert(websocketSend.notCalled, \"Response sent prior to configuring sandbox worker\");\n        resolve();\n    });\n    yield promise_1.PromiseUtil.delay(1);\n    assert(websocketSend.calledWith(expectedReply), \"Did not receive the expected response to prepareJSRuntime\");\n});",
                      "err": {},
                      "uuid": "93a4dac7-510c-46eb-8550-8df4901e9eb4",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "with packager running should pass unknown messages to the sandboxedAppWorker",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker with packager running should pass unknown messages to the sandboxedAppWorker",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield multipleLifetimesWorker.start();\n    // Start up an app worker\n    const prepareJSMessage = JSON.stringify({ method: \"prepareJSRuntime\", id: 1 });\n    const appWorkerStart = sandboxedAppWorkerStub.start;\n    appWorkerStart.returns(Promise.resolve());\n    sendMessage(prepareJSMessage);\n    // Then attempt to message it\n    const testMessage = { method: \"unknownMethod\" };\n    const testMessageString = JSON.stringify(testMessage);\n    const postMessageStub = sandboxedAppWorkerStub.postMessage;\n    assert(postMessageStub.notCalled, \"sandboxedAppWorker.postMessage called prior to any message\");\n    sendMessage(testMessageString);\n    assert(postMessageStub.calledWith(testMessage), \"message was not passed to sandboxedAppWorker\");\n});",
                      "err": {},
                      "uuid": "8a339d5e-d737-4908-a32d-618fb6bd97d4",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "with packager running should close connection if there is another debugger connected to packager",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker with packager running should close connection if there is another debugger connected to packager",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield multipleLifetimesWorker.start();\n                // Forget previous invocations\n                webSocketConstructor.reset();\n                clock = sinon.useFakeTimers(new Date().getTime());\n                const closeInvocation = webSocket.on.withArgs(\"close\");\n                webSocket._closeMessage = \"Another debugger is already connected\";\n                closeInvocation.callArg(1);\n                // Ensure it doesn't try to reconnect\n                clock.tick(100);\n                assert(webSocketConstructor.notCalled, \"socket attempted to reconnect\");\n            })",
                      "err": {},
                      "uuid": "222e3fb7-b660-43fd-aba9-407bced25ed8",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "without packager running should not start if there is no packager running",
                      "fullTitle": "appWorker debuggerContext MultipleLifetimesAppWorker without packager running should not start if there is no packager running",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                packagerIsRunning.returns(Promise.reject(new Error()));\n                try {\n                    yield multipleLifetimesWorker.start();\n                }\n                catch (error) {\n                    assert(webSocketConstructor.notCalled, \"socket should not be created\");\n                }\n            })",
                      "err": {},
                      "uuid": "0e730010-b206-4575-b6a3-7347e09496c0",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "3b372519-c35d-488f-a769-0b10481d13ba",
                    "23bb3ad2-be94-492f-9b5b-aca1b7b1f171",
                    "93a4dac7-510c-46eb-8550-8df4901e9eb4",
                    "8a339d5e-d737-4908-a32d-618fb6bd97d4",
                    "222e3fb7-b660-43fd-aba9-407bced25ed8",
                    "0e730010-b206-4575-b6a3-7347e09496c0"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f221f65c-fae4-4241-be99-a1a3e8d487d7",
                  "title": "console.trace()",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "console.trace() patch should produce a correct output if called without args",
                      "fullTitle": "appWorker debuggerContext console.trace() console.trace() patch should produce a correct output if called without args",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const consoleTraceCall = `console.trace();`;\nconst expectedTraceMessage = \"Trace\";\nrunScriptAndCheckOutput(expectedTraceMessage, consoleTraceCall, done);",
                      "err": {},
                      "uuid": "11594117-4c1e-4937-beb6-2a902d148611",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "console.trace() patch should produce a correct output if called with simple args",
                      "fullTitle": "appWorker debuggerContext console.trace() console.trace() patch should produce a correct output if called with simple args",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const consoleTraceCall = `console.trace(\\\"Simple string\\\", 1337);`;\nconst expectedTraceMessage = \"Trace: Simple string 1337\";\nrunScriptAndCheckOutput(expectedTraceMessage, consoleTraceCall, done);",
                      "err": {},
                      "uuid": "0ade5887-a782-4c7e-b509-0fa36ee66dcb",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "console.trace() patch should produce a correct output if called with formatted string",
                      "fullTitle": "appWorker debuggerContext console.trace() console.trace() patch should produce a correct output if called with formatted string",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const consoleTraceCall = `console.trace(\"%s: %d\", \"Format string prints\", 42);`;\nconst expectedTraceMessage = \"Trace: Format string prints: 42\";\nrunScriptAndCheckOutput(expectedTraceMessage, consoleTraceCall, done);",
                      "err": {},
                      "uuid": "7cfa010e-8c90-4ba2-b9cb-1ecef59b22f9",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "11594117-4c1e-4937-beb6-2a902d148611",
                    "0ade5887-a782-4c7e-b509-0fa36ee66dcb",
                    "7cfa010e-8c90-4ba2-b9cb-1ecef59b22f9"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "75dff83b-96fb-44a3-82bc-7151b13e39e4",
                  "title": "process.toString()",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "process.toString() should return empty string to avoid errors in native app",
                      "fullTitle": "appWorker debuggerContext process.toString() process.toString() should return empty string to avoid errors in native app",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const nodeProcessCheckToStringReturnCommand = \"console.log(process.toString());\";\nconst nodeProcessCheckCommand = \"console.log(Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]');\";\nconst script = [\n    appWorker_1.MultipleLifetimesAppWorker.PROCESS_TO_STRING_PATCH,\n    nodeProcessCheckToStringReturnCommand,\n    nodeProcessCheckCommand,\n].join(\"\\n\");\nconst testProcess = child_process.spawn(\"node\", [\"-e\", script]);\nlet procData = \"\";\nlet procErrData = \"\";\ntestProcess.stdout.on(\"data\", (data) => {\n    procData += data.toString();\n});\ntestProcess.stderr.on(\"data\", (data) => {\n    procErrData += data.toString();\n});\ntestProcess.on(\"error\", (err) => {\n    console.error(err);\n});\ntestProcess.on(\"close\", (code) => {\n    assert.strictEqual(code, 0);\n    if (procErrData !== \"\") {\n        assert.fail(procErrData);\n    }\n    const output = procData.split(\"\\n\");\n    assert.strictEqual(output[0].trim(), \"\");\n    assert.strictEqual(output[1].trim(), \"false\");\n    done();\n});",
                      "err": {},
                      "uuid": "08507edc-4645-45d3-947e-e6c798e4abcf",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "08507edc-4645-45d3-947e-e6c798e4abcf"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "775b6a81-e80f-461a-86e4-ec688cdaa839",
                  "title": "node --no-deprecation tests",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/appWorker.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "node process should work with --no-deprecation flag and produce no deprecation warnings for Buffer function and GLOBAL variable usage",
                      "fullTitle": "appWorker debuggerContext node --no-deprecation tests node process should work with --no-deprecation flag and produce no deprecation warnings for Buffer function and GLOBAL variable usage",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const globalVariableCheck = \"GLOBAL.toString();\";\nconst bufferCommandCheck = \"Buffer('TestString');\";\nconst script = [globalVariableCheck, bufferCommandCheck].join(\"\\n\");\nconst testProcess = child_process.spawn(\"node\", [\"--no-deprecation\", \"-e\", script]);\nlet procData = \"\";\nlet procErrData = \"\";\ntestProcess.stdout.on(\"data\", (data) => {\n    procData += data.toString();\n});\ntestProcess.stderr.on(\"data\", (data) => {\n    procErrData += data.toString();\n});\ntestProcess.on(\"error\", (err) => {\n    console.error(err);\n});\ntestProcess.on(\"close\", (code) => {\n    assert.strictEqual(code, 0);\n    if (procErrData !== \"\") {\n        if (procErrData.indexOf(\"DeprecationWarning\") !== -1 ||\n            procErrData.indexOf(\"DEP\") !== -1) {\n            assert.fail(`Deprecation messages found in stderr:\\n ${procErrData}`);\n        }\n        else {\n            assert.fail(procErrData);\n        }\n    }\n    if (procData !== \"\") {\n        if (procData.indexOf(\"DeprecationWarning\") !== -1 ||\n            procData.indexOf(\"DEP\") !== -1) {\n            assert.fail(`Deprecation messages found in stdout:\\n ${procData}`);\n        }\n    }\n    done();\n});",
                      "err": {},
                      "uuid": "f2e1686c-afcc-4eaa-b0ea-d39983b0c5a8",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "f2e1686c-afcc-4eaa-b0ea-d39983b0c5a8"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
          "title": "sourceMap",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/sourceMap.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/sourceMap.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should convert host filesystem paths to URL-style-paths",
              "fullTitle": "sourceMap should convert host filesystem paths to URL-style-paths",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const sourceMap = new sourceMap_1.SourceMapUtil();\nconst filePath = path.join(\"foo\", \"bar\", \"baz\");\nconst urlPath = \"foo/bar/baz\";\nconst result = sourceMap.makeUnixStylePath(filePath);\nassert(result === urlPath, `Expected \"${urlPath}\", found \"${result}\"`);",
              "err": {},
              "uuid": "02eb3a81-b389-4027-bde2-056fcd015db8",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore sourcemap urls in JavaScript objects and strings",
              "fullTitle": "sourceMap should ignore sourcemap urls in JavaScript objects and strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expectedUrlHref = \"http://localhost:8081/index.map?platform=android&dev=true\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst testFunction = (scriptBody, expectedResult) => {\n    const matchResult = sourceMap.searchSourceMapURL(scriptBody);\n    assert.strictEqual(expectedResult, matchResult && matchResult[2]);\n};\ntestFunction('var myTest = \"\\\\n//# sourceMappingURL=test.min.js.map\\\\n\\\\n//# sourceMappingURL=test.min.js.map\\\\n\\\\n\";\\n' +\n    \"//# sourceMappingURL=http://localhost:8081/index.map?platform=android&dev=true\", expectedUrlHref);\ntestFunction(\"  var test_js = function test_js(cdn) {\\n\" +\n    `    return cdn === true ? '<script src=\"https://cdn.testjs.com/11.33.77/test.min.js\"></script>' : \"\\\\n <script>\\\\n` +\n    '!function(t,e){\\\\\"object\\\\\"==typeof exports&&\\\\\"object\\\\\"==typeof module?module.exports=e():\\\\\"function\\\\\"==typeof define&&define;' +\n    '\\\\n   //# sourceMappingURL=test.min.js.map\\\\n   </script>\\\\n\";\\n' +\n    \"};\\n\" +\n    \"//# sourceMappingURL=http://localhost:8081/index.map?platform=android&dev=true\", expectedUrlHref);",
              "err": {},
              "uuid": "2fdc8378-f588-41ff-93d6-3e1e483e2bae",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should resolve a valid sourcemap url",
              "fullTitle": "sourceMap should resolve a valid sourcemap url",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptUrl = url.parse(\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\");\nconst scriptBody = \"//# sourceMappingURL=/index.ios.map?platform=ios&dev=true\";\nconst expectedUrlHref = \"http://localhost:8081/index.ios.map?platform=ios&dev=true\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.getSourceMapURL(scriptUrl, scriptBody);\nassert.strictEqual(expectedUrlHref, result && result.href);",
              "err": {},
              "uuid": "a47c42fe-8506-4636-8211-b219ccea023b",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore inline sourcemap urls",
              "fullTitle": "sourceMap should ignore inline sourcemap urls",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptUrl = url.parse(\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\");\nconst scriptBody = \"//# sourceMappingURL=data:application/json;base64,eyJmb28iOiJiYXIifQ==\\n\" +\n    \"//# sourceMappingURL=/index.ios.map?platform=ios&dev=true\";\nconst expectedUrlHref = \"http://localhost:8081/index.ios.map?platform=ios&dev=true\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.getSourceMapURL(scriptUrl, scriptBody);\nassert.strictEqual(expectedUrlHref, result && result.href);",
              "err": {},
              "uuid": "e85a62e0-75b1-43d0-8c31-8dcfc400de3a",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct sourcemap url for RN macOS",
              "fullTitle": "sourceMap should return correct sourcemap url for RN macOS",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptUrl = url.parse(\"http://localhost:8081/index.bundle?platform=macos&dev=true\");\nconst scriptBody = \"//# sourceMappingURL=//localhost:8081/index.map?platform=macos&dev=true\";\nconst expectedUrlHref = \"http://localhost:8081/index.map?platform=macos&dev=true\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.getSourceMapURL(scriptUrl, scriptBody);\nassert.strictEqual(expectedUrlHref, result && result.href);",
              "err": {},
              "uuid": "e2db4442-0ce6-42e1-9d11-cb104821101f",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default IStrictUrl for an invalid sourcemap url",
              "fullTitle": "sourceMap should return default IStrictUrl for an invalid sourcemap url",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptUrl = url.parse(\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\");\nconst scriptBody = \"\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.getSourceMapURL(scriptUrl, scriptBody);\nassert.deepStrictEqual(null, result);",
              "err": {},
              "uuid": "1e26786f-4e9d-4ada-8bf0-c917a48e1e95",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default IStrictUrl if there are only inline sourcemap urls",
              "fullTitle": "sourceMap should return default IStrictUrl if there are only inline sourcemap urls",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptUrl = url.parse(\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\");\nconst scriptBody = \"//# sourceMappingURL=data:application/json;base64,eyJmb28iOiJiYXIifQ==\\n\" +\n    \"//# sourceMappingURL=data:application/json;base64,eyJiYXoiOiJxdXV4In0=\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.getSourceMapURL(scriptUrl, scriptBody);\nassert.deepStrictEqual(null, result);",
              "err": {},
              "uuid": "c39e3816-3ce4-4123-beeb-adfe5a7cd311",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the contents of a source map file",
              "fullTitle": "sourceMap should update the contents of a source map file",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const sourceMapBody = JSON.stringify({\n    version: 3,\n    sources: [\"test/index.ts\"],\n    names: [],\n    mappings: \"\",\n    file: \"test/index.js\",\n    sourceRoot: \"../../src\",\n});\nconst scriptPath = \"test/newIndex.ts\";\nconst sourcesRootPath = \"new/src\";\nconst expectedSourceMapBody = JSON.stringify({\n    version: 3,\n    sources: [\"../../test/index.ts\"],\n    names: [],\n    mappings: \"\",\n    file: scriptPath,\n    sourceRoot: \"\",\n});\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.updateSourceMapFile(sourceMapBody, scriptPath, sourcesRootPath);\nassert.strictEqual(expectedSourceMapBody, result);",
              "err": {},
              "uuid": "53c86f87-1744-4a03-b902-85315dbedd70",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update source map file path for remote packager",
              "fullTitle": "sourceMap should update source map file path for remote packager",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const localRoot = \"/home/local\";\nconst remoteRoot = \"/home/remote\";\nconst sourceMapBody = JSON.stringify({\n    version: 3,\n    sources: [`${remoteRoot}/test/index.ts`],\n    names: [],\n    mappings: \"\",\n    file: \"test/index.js\",\n    sourceRoot: \"../../src\",\n});\nconst scriptPath = \"test/newIndex.ts\";\nconst sourcesRootPath = `${localRoot}/new/src`;\nconst expectedSourceMapBody = JSON.stringify({\n    version: 3,\n    sources: [`../../test/index.ts`],\n    names: [],\n    mappings: \"\",\n    file: scriptPath,\n    sourceRoot: \"\",\n});\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.updateSourceMapFile(sourceMapBody, scriptPath, sourcesRootPath, remoteRoot, localRoot);\nassert.strictEqual(expectedSourceMapBody, result);",
              "err": {},
              "uuid": "b7348498-8756-48ed-bbef-ac9107273e80",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update scripts with source mapping urls",
              "fullTitle": "sourceMap should update scripts with source mapping urls",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptBody = \"//# sourceMappingURL=/index.ios.map?platform=ios&dev=true\";\nconst sourceMappingUrl = url.parse(\"/index.android.map\");\nconst expectedScriptBody = \"//# sourceMappingURL=index.android.map\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.updateScriptPaths(scriptBody, sourceMappingUrl);\nassert.strictEqual(expectedScriptBody, result);",
              "err": {},
              "uuid": "cf900b6b-447e-4f21-aa4a-3ed29e28cc44",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update scripts without source mapping urls",
              "fullTitle": "sourceMap should not update scripts without source mapping urls",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptBody = \"var path = require('path');\";\nconst sourceMappingUrl = url.parse(\"/index.android.map\");\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.updateScriptPaths(scriptBody, sourceMappingUrl);\nassert.strictEqual(scriptBody, result);",
              "err": {},
              "uuid": "5cbcbfe3-11d0-4d62-b5a5-41f7b9fcaa49",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update absolute source path to relative unix style path",
              "fullTitle": "sourceMap should update absolute source path to relative unix style path",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const sourcePath = \"foo/bar\";\nconst sourcesRootPath = \"baz/fuzz\";\nconst expectedPath = \"../../foo/bar\";\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.updateSourceMapPath(sourcePath, sourcesRootPath);\nassert.strictEqual(expectedPath, result);",
              "err": {},
              "uuid": "face9376-888a-4a25-b350-ae76d12dd382",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get only the latest sourceMappingURL",
              "fullTitle": "sourceMap should get only the latest sourceMappingURL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptBody = `//# sourceMappingURL=abort.controller.js.map\n//# sourceMappingURL=index.map\n//# sourceURL=http://localhost:8081/index.bundle?platform=android&dev=true&minify=false`;\nconst expectedScriptBody = `index.map`;\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.getSourceMapRelativeUrl(scriptBody);\nassert.strictEqual(expectedScriptBody, result);",
              "err": {},
              "uuid": "5175921f-8dcb-4b11-a6bb-ec4525da7bcd",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove sourceURL from the bundle script body correctly",
              "fullTitle": "sourceMap should remove sourceURL from the bundle script body correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptBody = `var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/[\\\\r\\\\n]/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\\\\n';\n//# sourceMappingURL=index.map\n//# sourceURL=http://localhost:8081/index.bundle?platform=android&dev=true&minify=false`;\nconst expectedScriptBody = `var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/[\\\\r\\\\n]/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\\\\n';\n//# sourceMappingURL=index.map\\n`;\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.removeSourceURL(scriptBody);\nassert.strictEqual(expectedScriptBody, result);",
              "err": {},
              "uuid": "4ac1833f-3576-4586-891d-6aa47946034f",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove sourceURL if it is before sourceMappingURL",
              "fullTitle": "sourceMap should remove sourceURL if it is before sourceMappingURL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const scriptBody = `var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/[\\\\r\\\\n]/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\\\\n';\n//# sourceURL=http://localhost:8081/index.bundle?platform=android&dev=true&minify=false\n//# sourceMappingURL=index.map`;\nconst expectedScriptBody = `var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/[\\\\r\\\\n]/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\\\\n';\n\n//# sourceMappingURL=index.map`;\nconst sourceMap = new sourceMap_1.SourceMapUtil();\nconst result = sourceMap.removeSourceURL(scriptBody);\nassert.strictEqual(expectedScriptBody, result);",
              "err": {},
              "uuid": "eb83424e-603d-4150-8920-397cb1f90f5a",
              "parentUUID": "7caf18a3-5817-4f6d-8357-b2bda22bd092",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02eb3a81-b389-4027-bde2-056fcd015db8",
            "2fdc8378-f588-41ff-93d6-3e1e483e2bae",
            "a47c42fe-8506-4636-8211-b219ccea023b",
            "e85a62e0-75b1-43d0-8c31-8dcfc400de3a",
            "e2db4442-0ce6-42e1-9d11-cb104821101f",
            "1e26786f-4e9d-4ada-8bf0-c917a48e1e95",
            "c39e3816-3ce4-4123-beeb-adfe5a7cd311",
            "53c86f87-1744-4a03-b902-85315dbedd70",
            "b7348498-8756-48ed-bbef-ac9107273e80",
            "cf900b6b-447e-4f21-aa4a-3ed29e28cc44",
            "5cbcbfe3-11d0-4d62-b5a5-41f7b9fcaa49",
            "face9376-888a-4a25-b350-ae76d12dd382",
            "5175921f-8dcb-4b11-a6bb-ec4525da7bcd",
            "4ac1833f-3576-4586-891d-6aa47946034f",
            "eb83424e-603d-4150-8920-397cb1f90f5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 142,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa5b1a75-42a3-4a02-b405-75707850ffcb",
          "title": "sourceMapsCombinator",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/sourceMapsCombinator.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/sourceMapsCombinator.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9410d768-6274-45a1-85c6-0e04798472f9",
              "title": "#convert",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/debugger/sourceMapsCombinator.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/debugger/sourceMapsCombinator.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#convert\"",
                  "fullTitle": "sourceMapsCombinator #convert \"before each\" hook in \"#convert\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsReadFileStub = sinon.stub(fs, \"readFileSync\");\nfsReadFileStub.withArgs(pathToJS).returns(codeJS);\nfsReadFileStub.withArgs(pathToTS).returns(codeTS);\nfsReadFileStub.withArgs(sourcemapPath).returns(JSON.stringify(sourcemap));",
                  "err": {},
                  "uuid": "8210ad59-ae57-48ec-a5db-108dd0b1034e",
                  "parentUUID": "9410d768-6274-45a1-85c6-0e04798472f9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"#convert\"",
                  "fullTitle": "sourceMapsCombinator #convert \"after each\" hook in \"#convert\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "fsReadFileStub.restore();",
                  "err": {},
                  "uuid": "f7781081-3265-42b6-91a0-076bb8b8d0f1",
                  "parentUUID": "9410d768-6274-45a1-85c6-0e04798472f9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "convert sourcemap",
                  "fullTitle": "sourceMapsCombinator #convert convert sourcemap",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expected = {\n    version: 3,\n    sources: [\"d:/hello.ts\"],\n    names: [],\n    mappings: \"AAAA,IAAA,MAAM,EAAM,CAAA,SAAA,CAAA,EAAA;IACR,SAAA,KAAa,CAAA,GAAA,EAAO;QACpB,IAAA,CAAA,IAAA,EAAA,GAAA;IACA;SACI,CAAA,SAAO,CAAA,SAAc,EAAA,SAAM,CAAA,EAAO;QACtC,OAAA,OAAA,EAAA,IAAA,CAAA,IAAA,EAAA,OAAA;IACJ,CAAA;;AAEA,CAAA,CAAA,CAAA,CAAA;;AAEA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC\",\n};\nconst rawBundleSourcemap = {\n    version: 3,\n    sources: [\"d:/hello.js\"],\n    names: [],\n    mappings: \"AAAA,IAAI,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE;IACrB,SAAS,KAAK,CAAC,GAAG,EAAE;QAChB,IAAI,CAAC,IAAI,EAAE,GAAG;IAClB;IACA,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;QACnC,OAAO,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO;IACtC,CAAC;IACD,OAAO,KAAK;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,IAAI,MAAM,EAAE,IAAI,KAAK,CAAC,gDAAgD,CAAC;AACvE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC\",\n    file: \"hello.js\",\n    sourceRoot: \"\",\n};\nlet sourceMapsCombinator = new sourceMapsCombinator_1.SourceMapsCombinator();\nlet result = sourceMapsCombinator.convert(rawBundleSourcemap);\nresult.sources = result.sources.map(p => {\n    return p.replace(/\\\\/g, \"/\");\n});\nassert.deepEqual(expected, result);",
                  "err": {},
                  "uuid": "62f7fa32-c4b7-44e6-9c88-f5904e9b4045",
                  "parentUUID": "9410d768-6274-45a1-85c6-0e04798472f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62f7fa32-c4b7-44e6-9c88-f5904e9b4045"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "25fe8ab3-059f-4434-85cc-025743991394",
          "title": "androidPlatform",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/android/androidPlatform.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/android/androidPlatform.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "69a2b212-3efa-4cfe-8135-401a4307745d",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/android/androidPlatform.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/android/androidPlatform.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"extensionContext\"",
                  "fullTitle": "androidPlatform extensionContext \"before each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            // Configure all the dependencies we'll use in our tests\n            fileSystem = new fileSystem_1.FileSystem();\n            adbHelper = new adb.AdbHelper(genericRunOptions.projectRoot, nodeModulesRoot);\n            launchAppStub = sinon.stub(adbHelper, \"launchApp\", (projectRoot_, packageName, debugTarget) => __awaiter(this, void 0, void 0, function* () {\n                devices = devices.map((device) => {\n                    if (!debugTarget) {\n                        device.installedApplications[androidPackageName] = {\n                            isInDebugMode: false,\n                        };\n                    }\n                    if (debugTarget && debugTarget === device.id) {\n                        device.installedApplications[androidPackageName] = {\n                            isInDebugMode: false,\n                        };\n                    }\n                    return device;\n                });\n            }));\n            getConnectedTargetsStub = sinon.stub(adbHelper, \"getConnectedTargets\", function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    return devices;\n                });\n            });\n            getOnlineTargetsStub = sinon.stub(adbHelper, \"getOnlineTargets\", function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    return devices.filter((device) => {\n                        return device.isOnline;\n                    });\n                });\n            });\n            apiVersionStub = sinon.stub(adbHelper, \"apiVersion\", function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    return adb.AndroidAPILevel.LOLLIPOP;\n                });\n            });\n            reverseAdbStub = sinon.stub(adbHelper, \"reverseAdb\", function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    return;\n                });\n            });\n            reactNative = new reactNative065_1.ReactNative065(fileSystem, adbHelper);\n            getReactNativeProjectRootStub = sinon.stub(settingsHelper_1.SettingsHelper, \"getReactNativeProjectRoot\", () => projectRoot);\n            androidPlatform = createAndroidPlatform(genericRunOptions);\n            spawnReactCommandStub = sinon.stub(commandExecutor_1.CommandExecutor.prototype, \"spawnReactCommand\", function () {\n                return reactNative.runAndroid(genericRunOptions);\n            });\n            getReactNativeVersionsStub = sinon.stub(projectVersionHelper_1.ProjectVersionHelper, \"getReactNativeVersions\", function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    return {\n                        reactNativeVersion: \"0.0.1\",\n                        reactNativeWindowsVersion: \"\",\n                    };\n                });\n            });\n            androidPlatform.adbHelper = adbHelper;\n            installAppInDeviceStub = sinon.stub(reactNative, \"installAppInDevice\", function (deviceId) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    devices = devices.map((device) => {\n                        if (deviceId && deviceId === device.id) {\n                            device.installedApplications[androidPackageName] = {};\n                        }\n                        return device;\n                    });\n                });\n            });\n            // Delete existing React Native project before creating\n            yield (0, utils_1.rimrafAsync)(projectsFolder, {});\n            // Create a React-Native project we'll use in our tests\n            yield reactNative\n                .fromProjectFileContent(rnProjectContent)\n                .createProject(projectRoot, applicationName);\n        })",
                  "err": {},
                  "uuid": "a32a6195-e499-4035-93ff-a115d882a1da",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"extensionContext\"",
                  "fullTitle": "androidPlatform extensionContext \"after each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            // Delete existing React Native project after each test\n            yield (0, utils_1.rimrafAsync)(projectsFolder, {});\n            launchAppStub.restore();\n            getConnectedTargetsStub.restore();\n            getOnlineTargetsStub.restore();\n            apiVersionStub.restore();\n            reverseAdbStub.restore();\n            getReactNativeProjectRootStub.restore();\n            spawnReactCommandStub.restore();\n            getReactNativeVersionsStub.restore();\n            installAppInDeviceStub.restore();\n            devices = [];\n        })",
                  "err": {},
                  "uuid": "2057c5e7-fe56-42ee-8ce2-a60cbc60418c",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "runApp launches the app when a single emulator is connected using recording react-native/run-android/win10-rn0.21.0/succeedsWithOneVSEmulator",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app when a single emulator is connected using recording react-native/run-android/win10-rn0.21.0/succeedsWithOneVSEmulator",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "09a962f1-e9d5-478f-b451-030ff1fd9542",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app when a single emulator is connected using recording react-native/run-android/win10-rn0.22.2/succeedsWithOneVSEmulator",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app when a single emulator is connected using recording react-native/run-android/win10-rn0.22.2/succeedsWithOneVSEmulator",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "7d0f34bc-a830-4199-a936-1cdd74dbb017",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app when a single emulator is connected using recording react-native/run-android/osx10.10-rn0.21.0/succeedsWithOneVSEmulator",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app when a single emulator is connected using recording react-native/run-android/osx10.10-rn0.21.0/succeedsWithOneVSEmulator",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "fe903169-7b36-44dc-bfa9-c8c2a14a4861",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app when two emulators are connected using recording react-native/run-android/win10-rn0.21.0/succeedsWithTwoVSEmulators",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app when two emulators are connected using recording react-native/run-android/win10-rn0.21.0/succeedsWithTwoVSEmulators",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "d90cb8d0-f01b-47f9-bb43-fc71b1570884",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app when three emulators are connected using recording react-native/run-android/win10-rn0.21.0/succeedsWithThreeVSEmulators",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app when three emulators are connected using recording react-native/run-android/win10-rn0.21.0/succeedsWithThreeVSEmulators",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "f1355472-0cfa-4eb3-b58c-61d29ce720af",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp fails if no devices are connected using recording react-native/run-android/win10-rn0.21.0/failsDueToNoDevicesConnected",
                  "fullTitle": "androidPlatform extensionContext runApp fails if no devices are connected using recording react-native/run-android/win10-rn0.21.0/failsDueToNoDevicesConnected",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "1e359775-062b-4b9f-a3ca-8ed1214e2dd6",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app in an online emulator only using recording react-native/run-android/win10-rn0.21.0/succeedsWithFiveVSEmulators",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app in an online emulator only using recording react-native/run-android/win10-rn0.21.0/succeedsWithFiveVSEmulators",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "e3963048-073c-44b3-8bbe-c26dd6a9a4c1",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app in the device specified as target using recording react-native/run-android/win10-rn0.21.0/succeedsWithFiveVSEmulators",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app in the device specified as target using recording react-native/run-android/win10-rn0.21.0/succeedsWithFiveVSEmulators",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "29244085-b772-4c0a-8e06-fe1edf9c0ec0",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp launches the app in a random online device if the target is offline using recording react-native/run-android/win10-rn0.21.0/succeedsWithTenVSEmulators",
                  "fullTitle": "androidPlatform extensionContext runApp launches the app in a random online device if the target is offline using recording react-native/run-android/win10-rn0.21.0/succeedsWithTenVSEmulators",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "32d5ecc0-2d35-49b0-9c40-dc78cec12772",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp doesn't fail even if the call to start the LogCat does fail using recording react-native/run-android/win10-rn0.21.0/succeedsWithOneVSEmulator",
                  "fullTitle": "androidPlatform extensionContext runApp doesn't fail even if the call to start the LogCat does fail using recording react-native/run-android/win10-rn0.21.0/succeedsWithOneVSEmulator",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "c0b1b83f-9196-45fe-a229-2d394af886cb",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp doesn't fail even if the call to start the LogCat does fail using recording react-native/run-android/win10-rn0.22.2/succeedsWithOneVSEmulator",
                  "fullTitle": "androidPlatform extensionContext runApp doesn't fail even if the call to start the LogCat does fail using recording react-native/run-android/win10-rn0.22.2/succeedsWithOneVSEmulator",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "d4eee2b0-c37c-44a5-aebf-8be1d7936569",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp doesn't fail even if the call to start the LogCat does fail using recording react-native/run-android/osx10.10-rn0.21.0/succeedsWithOneVSEmulator",
                  "fullTitle": "androidPlatform extensionContext runApp doesn't fail even if the call to start the LogCat does fail using recording react-native/run-android/osx10.10-rn0.21.0/succeedsWithOneVSEmulator",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "05fc4511-0d3d-4cd2-b663-a460f71ef817",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp fails when the android project doesn't exist, and shows a nice error message using recording react-native/run-android/win10-rn0.21.0/failsDueToAndroidFolderMissing",
                  "fullTitle": "androidPlatform extensionContext runApp fails when the android project doesn't exist, and shows a nice error message using recording react-native/run-android/win10-rn0.21.0/failsDueToAndroidFolderMissing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "5f0e038e-72ed-4ed7-9959-047bf6c50a4f",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp fails when the android project doesn't exist, and shows a nice error message using recording react-native/run-android/win10-rn0.22.2/failsDueToAndroidFolderMissing",
                  "fullTitle": "androidPlatform extensionContext runApp fails when the android project doesn't exist, and shows a nice error message using recording react-native/run-android/win10-rn0.22.2/failsDueToAndroidFolderMissing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "0125cf60-070a-4351-ab39-4e8218b6d84a",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "runApp fails when the android emulator shell is unresponsive, and shows a nice error message using recording react-native/run-android/osx10.10-rn0.21.0/failsDueToAdbCommandTimeout",
                  "fullTitle": "androidPlatform extensionContext runApp fails when the android emulator shell is unresponsive, and shows a nice error message using recording react-native/run-android/osx10.10-rn0.21.0/failsDueToAdbCommandTimeout",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We use function () because we need the this pointer\nreturn recordingsHelper\n    .getRecordingConsumer()\n    .loadRecordingFromString(recording)\n    .then(code.bind(test));",
                  "err": {},
                  "uuid": "be0aedd2-0969-4a34-bc31-8a3175654637",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArguments should return correct target",
                  "fullTitle": "androidPlatform extensionContext getRunArguments should return correct target",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const runOptions = {\n    platform: launchArgs_1.PlatformType.Android,\n    workspaceRoot: projectRoot,\n    projectRoot: projectRoot,\n    target: \"Nexus_12\",\n    nodeModulesRoot,\n};\nconst platform = createAndroidPlatform(runOptions);\nconst runArgs = platform.getRunArguments();\nrunArgs.should.be.an.Array();\nrunArgs.should.containDeepOrdered([\"--deviceId\", \"Nexus_12\"]);",
                  "err": {},
                  "uuid": "437b36ae-2488-4501-bffc-cb323c131a99",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArguments should remove simulator target from args",
                  "fullTitle": "androidPlatform extensionContext getRunArguments should remove simulator target from args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const runOptions = {\n    platform: launchArgs_1.PlatformType.Android,\n    workspaceRoot: projectRoot,\n    projectRoot: projectRoot,\n    target: \"simulator\",\n    nodeModulesRoot,\n};\nconst platform = createAndroidPlatform(runOptions);\nconst runArgs = platform.getRunArguments();\nrunArgs.should.be.an.Array();\nrunArgs.should.be.empty();",
                  "err": {},
                  "uuid": "226c51e8-b8e3-410e-aeb2-9ae73b307353",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArguments should remove device target from args",
                  "fullTitle": "androidPlatform extensionContext getRunArguments should remove device target from args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const runOptions = {\n    platform: launchArgs_1.PlatformType.Android,\n    workspaceRoot: projectRoot,\n    projectRoot: projectRoot,\n    target: \"device\",\n    nodeModulesRoot,\n};\nconst platform = createAndroidPlatform(runOptions);\nconst runArgs = platform.getRunArguments();\nrunArgs.should.be.an.Array();\nrunArgs.should.be.empty();",
                  "err": {},
                  "uuid": "f4bf0adf-f39a-40cc-894a-670dcd1ae3ca",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArguments should return correct args",
                  "fullTitle": "androidPlatform extensionContext getRunArguments should return correct args",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const args = [\"--deviceId\", \"device_id\"];\nconst runOptions = {\n    platform: launchArgs_1.PlatformType.Android,\n    workspaceRoot: projectRoot,\n    projectRoot: projectRoot,\n    runArguments: args,\n    target: \"Nexus_12\",\n    nodeModulesRoot,\n};\nconst platform = createAndroidPlatform(runOptions);\nconst runArgs = platform.getRunArguments();\nrunArgs.should.be.an.Array();\nrunArgs.should.containDeepOrdered(args);",
                  "err": {},
                  "uuid": "c220d73d-1733-4b19-a182-d0c525d0ec82",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AdbHelper should correctly parse Android Sdk Location from local.properties file content",
                  "fullTitle": "androidPlatform extensionContext AdbHelper should correctly parse Android Sdk Location from local.properties file content",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const adbHelper = new adb.AdbHelper(\"\", nodeModulesRoot);\nlet getPlatformStub;\nfunction testPaths(inputPath, expectedPath) {\n    const resultPath1 = adbHelper.parseSdkLocation(`sdk.dir=${inputPath}`);\n    const resultPath2 = adbHelper.parseSdkLocation(`sdk.dir   =${inputPath}`);\n    const resultPath3 = adbHelper.parseSdkLocation(`sdk.dir = ${inputPath}`);\n    assert.strictEqual(resultPath1, expectedPath);\n    assert.strictEqual(resultPath2, expectedPath);\n    assert.strictEqual(resultPath3, expectedPath);\n}\nconst os = require(\"os\");\nfunction mockPlatform(platform) {\n    getPlatformStub === null || getPlatformStub === void 0 ? void 0 : getPlatformStub.restore();\n    getPlatformStub = sinon.stub(os, \"platform\", function () {\n        return platform;\n    });\n}\nmockPlatform(\"win32\");\ntestPaths(String.raw `C\\:\\\\Users\\\\User1\\\\AndroidSdk`, String.raw `C:\\Users\\User1\\AndroidSdk`);\ntestPaths(String.raw `\\\\\\\\Network\\\\Shared\\\\Folder`, String.raw `\\\\Network\\Shared\\Folder`);\ntestPaths(String.raw `\\\\\\\\Network\\\\Shared\\\\Folder\\\\Android SDK`, String.raw `\\\\Network\\Shared\\Folder\\Android SDK`);\ntestPaths(String.raw `C\\:\\\\Users\\\\User1\\\\Android Sdk`, String.raw `C:\\Users\\User1\\Android Sdk`);\nmockPlatform(\"darwin\");\ntestPaths(String.raw `/var/lib/some/path`, String.raw `/var/lib/some/path`);\ntestPaths(String.raw `~/Library`, String.raw `~/Library`);\ntestPaths(String.raw `/Users/User1/home/path`, String.raw `/Users/User1/home/path`);\ntestPaths(String.raw `/Users/User1/home/path/Android SDK`, String.raw `/Users/User1/home/path/Android SDK`);\ntestPaths(String.raw `/Volumes/Macintosh HD/Users/foo/Library/Android/sdk/platform-tools`, String.raw `/Volumes/Macintosh HD/Users/foo/Library/Android/sdk/platform-tools`);\nteardown(() => {\n    getPlatformStub === null || getPlatformStub === void 0 ? void 0 : getPlatformStub.restore();\n});",
                  "err": {},
                  "uuid": "c2b55694-d6ca-4697-9bd4-2659bb1c6cec",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AdbHelper parseSdkLocation function should correctly parse Android Sdk Location from local.properties and wrap with quotes",
                  "fullTitle": "androidPlatform extensionContext AdbHelper parseSdkLocation function should correctly parse Android Sdk Location from local.properties and wrap with quotes",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function testPaths(expectedPath, projectRoot) {\n    const adbHelper = new adb.AdbHelper(projectRoot, nodeModulesRoot);\n    const localPropertiesFilePath = path.join(projectRoot, \"android\", \"local.properties\");\n    const fileContent = fs.readFileSync(localPropertiesFilePath).toString();\n    const resultPath = adbHelper.parseSdkLocation(fileContent);\n    assert.strictEqual(resultPath, expectedPath);\n}\nif (process.platform == \"win32\") {\n    const mockProjectRoot = path.join(__dirname, \"..\", \"..\", \"..\", \"test\", \"resources\", \"auxiliaryFiles\", \"templateProject\", \"win\");\n    testPaths(String.raw `C:\\Android\\android sdk`, mockProjectRoot);\n}\nelse {\n    const mockProjectRoot = path.join(__dirname, \"..\", \"..\", \"..\", \"test\", \"resources\", \"auxiliaryFiles\", \"templateProject\", \"others\");\n    testPaths(String.raw `/Volumes/Macintosh HD/Users/foo/Library/Android/sdk/`, mockProjectRoot);\n}",
                  "err": {},
                  "uuid": "f832436b-7ad8-44c7-a015-5470b2ce70ec",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "AdbHelper getAdbPath function should get sdk and adb path flexible from local.properties file and environment variable",
                  "fullTitle": "androidPlatform extensionContext AdbHelper getAdbPath function should get sdk and adb path flexible from local.properties file and environment variable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let mockProjectRoot;\nif (process.platform == \"win32\") {\n    mockProjectRoot = path.join(__dirname, \"..\", \"..\", \"..\", \"test\", \"resources\", \"auxiliaryFiles\", \"templateProject\", \"win\");\n}\nelse {\n    mockProjectRoot = path.join(__dirname, \"..\", \"..\", \"..\", \"test\", \"resources\", \"auxiliaryFiles\", \"templateProject\", \"others\");\n}\nconst adbHelper = new adb.AdbHelper(mockProjectRoot, nodeModulesRoot);\nconst adbValue = adbHelper.getAdbPath(mockProjectRoot);\nassert.strictEqual(adbValue, \"adb\");",
                  "err": {},
                  "uuid": "72791ef8-4906-4359-bbf3-a660f7c93fec",
                  "parentUUID": "69a2b212-3efa-4cfe-8135-401a4307745d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09a962f1-e9d5-478f-b451-030ff1fd9542",
                "7d0f34bc-a830-4199-a936-1cdd74dbb017",
                "fe903169-7b36-44dc-bfa9-c8c2a14a4861",
                "d90cb8d0-f01b-47f9-bb43-fc71b1570884",
                "f1355472-0cfa-4eb3-b58c-61d29ce720af",
                "1e359775-062b-4b9f-a3ca-8ed1214e2dd6",
                "e3963048-073c-44b3-8bbe-c26dd6a9a4c1",
                "29244085-b772-4c0a-8e06-fe1edf9c0ec0",
                "32d5ecc0-2d35-49b0-9c40-dc78cec12772",
                "c0b1b83f-9196-45fe-a229-2d394af886cb",
                "d4eee2b0-c37c-44a5-aebf-8be1d7936569",
                "05fc4511-0d3d-4cd2-b663-a460f71ef817",
                "5f0e038e-72ed-4ed7-9959-047bf6c50a4f",
                "0125cf60-070a-4351-ab39-4e8218b6d84a",
                "be0aedd2-0969-4a34-bc31-8a3175654637",
                "437b36ae-2488-4501-bffc-cb323c131a99",
                "226c51e8-b8e3-410e-aeb2-9ae73b307353",
                "f4bf0adf-f39a-40cc-894a-670dcd1ae3ca",
                "c220d73d-1733-4b19-a182-d0c525d0ec82",
                "c2b55694-d6ca-4697-9bd4-2659bb1c6cec",
                "f832436b-7ad8-44c7-a015-5470b2ce70ec",
                "72791ef8-4906-4359-bbf3-a660f7c93fec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 343,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8477283a-8438-4264-af68-6ba73ccb9cc0",
          "title": "appLauncher",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/appLauncher.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/appLauncher.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"appLauncher\"",
              "fullTitle": "appLauncher \"before all\" hook in \"appLauncher\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fsHelper.makeDirectoryRecursiveSync(sampleReactNativeProjectDir);\nfs.writeFileSync(path.join(sampleReactNativeProjectDir, INFORMATION_PACKAGE_FILENAME), JSON.stringify(versionObj, null, 2));",
              "err": {},
              "uuid": "1854a93a-2e17-434a-afee-c0db0a36ee36",
              "parentUUID": "8477283a-8438-4264-af68-6ba73ccb9cc0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"appLauncher\"",
              "fullTitle": "appLauncher \"after all\" hook in \"appLauncher\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fsHelper.removePathRecursivelySync(sampleReactNativeProjectDir);",
              "err": {},
              "uuid": "26fe1358-b243-4a34-bba3-0fa727bffce5",
              "parentUUID": "8477283a-8438-4264-af68-6ba73ccb9cc0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5e8803bf-8bbf-420d-873c-832b4291577f",
              "title": "getOrCreateAppLauncherByProjectRootPath",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/appLauncher.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/appLauncher.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getOrCreateAppLauncherByProjectRootPath creates an AppLauncher",
                  "fullTitle": "appLauncher getOrCreateAppLauncherByProjectRootPath getOrCreateAppLauncherByProjectRootPath creates an AppLauncher",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let isAppLauncherExist = !!projectsStorage_1.ProjectsStorage.projectsCache[sampleReactNativeProjectDir.toLowerCase()];\n    let appLauncherTest;\n    teardown(() => {\n        if (appLauncherTest) {\n            projectsStorage_1.ProjectsStorage.delFolder(appLauncherTest.getWorkspaceFolder());\n        }\n        (0, rn_extension_1.deactivate)();\n    });\n    assert.strictEqual(isAppLauncherExist, false);\n    (0, rn_extension_1.activate)({\n        subscriptions: [{}],\n    });\n    const appLauncher = yield appLauncher_1.AppLauncher.getOrCreateAppLauncherByProjectRootPath(sampleReactNativeProjectDir);\n    appLauncherTest = appLauncher;\n    assert.strictEqual(appLauncher.getPackager().getProjectPath(), sampleReactNativeProjectDir);\n    isAppLauncherExist =\n        !!projectsStorage_1.ProjectsStorage.projectsCache[sampleReactNativeProjectDir.toLowerCase()];\n    assert.strictEqual(isAppLauncherExist, true);\n});",
                  "err": {},
                  "uuid": "bee27c6c-d1bb-4945-9119-77117e625686",
                  "parentUUID": "5e8803bf-8bbf-420d-873c-832b4291577f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bee27c6c-d1bb-4945-9119-77117e625686"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 141,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "261ba143-7332-40b3-acf5-a1f7ab1fcc3a",
              "title": "getOrUpdateNodeModulesRoot",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/appLauncher.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/appLauncher.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getOrUpdateNodeModulesRoot gets a node modules root",
                  "fullTitle": "appLauncher getOrUpdateNodeModulesRoot getOrUpdateNodeModulesRoot gets a node modules root",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const reactNativePackageDir = path.join(sampleReactNativeProjectDir, NODE_MODULES_FOLDER, REACT_NATIVE_MODULE);\n    fsHelper.makeDirectoryRecursiveSync(reactNativePackageDir);\n    let appLauncherTest;\n    teardown(() => {\n        fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, NODE_MODULES_FOLDER));\n        if (appLauncherTest) {\n            projectsStorage_1.ProjectsStorage.delFolder(appLauncherTest.getWorkspaceFolder());\n        }\n        (0, rn_extension_1.deactivate)();\n    });\n    (0, rn_extension_1.activate)({\n        subscriptions: [{}],\n    });\n    const appLauncher = yield appLauncher_1.AppLauncher.getOrCreateAppLauncherByProjectRootPath(sampleReactNativeProjectDir);\n    appLauncherTest = appLauncher;\n    assert.strictEqual(appLauncher.getOrUpdateNodeModulesRoot(), sampleReactNativeProjectDir);\n});",
                  "err": {},
                  "uuid": "c22a5f37-52e6-4a5b-bc85-b8244500b3cc",
                  "parentUUID": "261ba143-7332-40b3-acf5-a1f7ab1fcc3a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getOrUpdateNodeModulesRoot force updates a node modules root",
                  "fullTitle": "appLauncher getOrUpdateNodeModulesRoot getOrUpdateNodeModulesRoot force updates a node modules root",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const SAMPLE_TEST_PROJECT_NAME = \"sampleGetOrUpdateNodeModulesRootProject\";\n    const sampleTestProjectDir = path.join(__dirname, \"..\", \"resources\", SAMPLE_TEST_PROJECT_NAME);\n    const reactNativePackageDir1 = path.join(sampleTestProjectDir, NODE_MODULES_FOLDER, REACT_NATIVE_MODULE);\n    const INNER_FOLDER = \"inner\";\n    const innerProjectDir = path.join(sampleTestProjectDir, INNER_FOLDER);\n    const reactNativePackageDir2 = path.join(innerProjectDir, NODE_MODULES_FOLDER, REACT_NATIVE_MODULE);\n    let appLauncherTest;\n    let nodeModulesRoot1;\n    let nodeModulesRoot2;\n    fsHelper.makeDirectoryRecursiveSync(reactNativePackageDir2);\n    fs.writeFileSync(path.join(innerProjectDir, INFORMATION_PACKAGE_FILENAME), JSON.stringify(versionObj, null, 2));\n    teardown(() => {\n        fsHelper.removePathRecursivelySync(sampleTestProjectDir);\n        if (appLauncherTest) {\n            projectsStorage_1.ProjectsStorage.delFolder(appLauncherTest.getWorkspaceFolder());\n        }\n    });\n    (0, rn_extension_1.activate)({\n        subscriptions: [{}],\n    });\n    const appLauncher = yield appLauncher_1.AppLauncher.getOrCreateAppLauncherByProjectRootPath(innerProjectDir);\n    nodeModulesRoot1 = appLauncher.getOrUpdateNodeModulesRoot();\n    assert.deepStrictEqual(nodeModulesRoot1, innerProjectDir);\n    fsHelper.removePathRecursivelySync(innerProjectDir);\n    appLauncherTest = appLauncher;\n    fsHelper.makeDirectoryRecursiveSync(reactNativePackageDir1);\n    fs.writeFileSync(path.join(sampleTestProjectDir, INFORMATION_PACKAGE_FILENAME), JSON.stringify(versionObj, null, 2));\n    nodeModulesRoot2 = appLauncher.getOrUpdateNodeModulesRoot(true);\n    assert.deepStrictEqual(nodeModulesRoot2, sampleTestProjectDir);\n    assert.notStrictEqual(nodeModulesRoot1, nodeModulesRoot2);\n});",
                  "err": {},
                  "uuid": "17c611d6-16c0-4cce-8e3c-05412803e89e",
                  "parentUUID": "261ba143-7332-40b3-acf5-a1f7ab1fcc3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c22a5f37-52e6-4a5b-bc85-b8244500b3cc",
                "17c611d6-16c0-4cce-8e3c-05412803e89e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d694d7ce-90c4-4663-92d9-6457a0950394",
          "title": "checkEnvironment",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/checkEnvironment.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/checkEnvironment.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
              "title": "basicCheck",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/checkEnvironment.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/checkEnvironment.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "command should exist",
                  "fullTitle": "checkEnvironment basicCheck command should exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            commandExistsStub.sync = () => true;\n            assert.deepStrictEqual(yield fakeUtil.basicCheck({ command: \"whatever\" }), {\n                exists: true,\n            });\n        })",
                  "err": {},
                  "uuid": "579aa13c-1548-4656-9c45-ecde73de55b3",
                  "parentUUID": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "command should not exist",
                  "fullTitle": "checkEnvironment basicCheck command should not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            commandExistsStub.sync = () => false;\n            assert.deepStrictEqual(yield fakeUtil.basicCheck({ command: \"whatever\" }), {\n                exists: false,\n            });\n        })",
                  "err": {},
                  "uuid": "d89cdf5a-2a77-41d1-a739-8760275d97b8",
                  "parentUUID": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "command should check version",
                  "fullTitle": "checkEnvironment basicCheck command should check version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            commandExistsStub.sync = () => true;\n            let wasExecuted = false;\n            assert.deepStrictEqual(yield fakeUtil.basicCheck({\n                command: \"whatever\",\n                getVersion: () => __awaiter(this, void 0, void 0, function* () { return ((wasExecuted = true), \"0.0.1\"); }),\n            }), {\n                exists: true,\n                versionCompare: 0,\n            });\n            assert(wasExecuted);\n        })",
                  "err": {},
                  "uuid": "a4abfeb6-215e-49f2-8c06-a15e4e86e766",
                  "parentUUID": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "command should compare version lt",
                  "fullTitle": "checkEnvironment basicCheck command should compare version lt",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            commandExistsStub.sync = () => true;\n            assert.deepStrictEqual(yield fakeUtil.basicCheck({\n                command: \"whatever\",\n                getVersion: () => __awaiter(this, void 0, void 0, function* () { return \"0.0.1\"; }),\n                versionRange: \">0.0.1\",\n            }), {\n                exists: true,\n                versionCompare: -1,\n            });\n        })",
                  "err": {},
                  "uuid": "7dbc3da1-bd27-4943-b6a6-55845c53bdb3",
                  "parentUUID": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "command should compare version gt",
                  "fullTitle": "checkEnvironment basicCheck command should compare version gt",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            commandExistsStub.sync = () => true;\n            assert.deepStrictEqual(yield fakeUtil.basicCheck({\n                command: \"whatever\",\n                getVersion: () => __awaiter(this, void 0, void 0, function* () { return \"0.0.1\"; }),\n                versionRange: \"<0.0.1\",\n            }), {\n                exists: true,\n                versionCompare: 1,\n            });\n        })",
                  "err": {},
                  "uuid": "6fda9089-aa5d-4d14-8f9a-abadad64a2ff",
                  "parentUUID": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "command should compare version eq",
                  "fullTitle": "checkEnvironment basicCheck command should compare version eq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            commandExistsStub.sync = () => true;\n            assert.deepStrictEqual(yield fakeUtil.basicCheck({\n                command: \"whatever\",\n                getVersion: () => __awaiter(this, void 0, void 0, function* () { return \"0.0.1\"; }),\n                versionRange: \"=0.0.1\",\n            }), {\n                exists: true,\n                versionCompare: 0,\n            });\n        })",
                  "err": {},
                  "uuid": "d439eb3d-9848-4b3a-81bd-8397bc5696c1",
                  "parentUUID": "33be93de-5ebd-4c90-b7bf-4dfe7e77ad3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "579aa13c-1548-4656-9c45-ecde73de55b3",
                "d89cdf5a-2a77-41d1-a739-8760275d97b8",
                "a4abfeb6-215e-49f2-8c06-a15e4e86e766",
                "7dbc3da1-bd27-4943-b6a6-55845c53bdb3",
                "6fda9089-aa5d-4d14-8f9a-abadad64a2ff",
                "d439eb3d-9848-4b3a-81bd-8397bc5696c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b73e0a8-4ba1-46c5-8cea-dad547343d78",
          "title": "commandExecutor",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"extensionContext\"",
                  "fullTitle": "commandExecutor extensionContext \"before each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "childProcessStub = sinon\n    .stub(node_1.Node, \"ChildProcess\")\n    .returns(childProcessStubInstance);\nappLauncherStub = sinon.stub(appLauncher_1.AppLauncher, \"getNodeModulesRootByProjectPath\", (projectRoot) => nodeModulesRoot);\nnodeModulesRoot = sampleReactNativeProjectDir;",
                  "err": {},
                  "uuid": "ed57a0bb-cf03-4c71-b0fb-df4ba07e07fe",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"extensionContext\"",
                  "fullTitle": "commandExecutor extensionContext \"after each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockedMethods = [Log.log, ...Object.keys(childProcessStubInstance)];\nmockedMethods.forEach(method => {\n    if (method.hasOwnProperty(\"restore\")) {\n        method.restore();\n    }\n});\nchildProcessStub.restore();\nappLauncherStub.restore();",
                  "err": {},
                  "uuid": "e4f0f28e-28c1-47fc-8e0f-b8c9f9fdca4d",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should execute a command",
                  "fullTitle": "commandExecutor extensionContext should execute a command",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot, process.cwd(), Log);\n    let loggedOutput = \"\";\n    sinon.stub(Log, \"log\", function (message, formatMessage = true) {\n        loggedOutput += semver.clean(message) || \"\";\n        console.log(message);\n    });\n    yield ce.execute(\"node -v\");\n    assert(loggedOutput);\n});",
                  "err": {},
                  "uuid": "d9021362-39e6-4dee-8e48-c07e86a210ee",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject on bad command",
                  "fullTitle": "commandExecutor extensionContext should reject on bad command",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot);\n            try {\n                yield ce.execute(\"bar\");\n                assert.fail(null, null, \"bar should not be a valid command\");\n            }\n            catch (reason) {\n                console.log(reason.message);\n                assert.strictEqual(reason.errorCode, 101);\n                assert.strictEqual(reason.errorLevel, 0);\n            }\n        })",
                  "err": {},
                  "uuid": "5302d242-c736-48a5-ad73-7150e1376647",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject on good command that fails",
                  "fullTitle": "commandExecutor extensionContext should reject on good command that fails",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot);\n            try {\n                yield ce.execute(\"node install bad-package\");\n                assert.fail(null, null, \"node should not be able to install bad-package\");\n            }\n            catch (reason) {\n                console.log(reason.message);\n                assert.strictEqual(reason.errorCode, 101);\n                assert.strictEqual(reason.errorLevel, 0);\n            }\n        })",
                  "err": {},
                  "uuid": "988c7be6-a6ab-49e1-a4d4-3db54220c3c1",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should spawn a command",
                  "fullTitle": "commandExecutor extensionContext should spawn a command",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot);\n            sinon.stub(Log, \"log\", function (message, formatMessage = true) {\n                console.log(message);\n            });\n            return yield ce.spawn(\"node\", [\"-v\"]);\n        })",
                  "err": {},
                  "uuid": "3887f231-83f2-4d0a-af37-39bbc96783a6",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "spawn should reject a bad command",
                  "fullTitle": "commandExecutor extensionContext spawn should reject a bad command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot);\n            sinon.stub(Log, \"log\", function (message, formatMessage = true) {\n                console.log(message);\n            });\n            try {\n                return yield ce.spawn(\"bar\", [\"-v\"]);\n            }\n            catch (reason) {\n                console.log(reason.message);\n                assert.strictEqual(reason.errorCode, 101);\n                assert.strictEqual(reason.errorLevel, 0);\n            }\n        })",
                  "err": {},
                  "uuid": "e592739d-e6d9-49c6-8387-8f4e9498bd9b",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return correct CLI react command",
                  "fullTitle": "commandExecutor extensionContext should return correct CLI react command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot);\n            // const expected =\n            //     \"test\\\\resources\\\\sampleReactNativeProject\\\\node_modules\\\\.bin\\react-native.cmd\";\n            const command = hostPlatform_1.HostPlatform.getNpmCliCommand(ce.selectReactNativeCLI());\n            assert.ok(command.includes(\"react-native\"));\n        })",
                  "err": {},
                  "uuid": "2ee55331-9d86-40af-b433-fced61b00069",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return correct CLI Expo command",
                  "fullTitle": "commandExecutor extensionContext should return correct CLI Expo command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const ce = new commandExecutor_1.CommandExecutor(nodeModulesRoot);\n            // const expected =\n            // \"test\\\\resources\\\\sampleReactNativeProject\\\\node_modules\\\\.bin\\\\expo.cmd\";\n            const command = hostPlatform_1.HostPlatform.getNpmCliCommand(ce.selectExpoCLI());\n            assert.ok(command.includes(\"expo\"));\n        })",
                  "err": {},
                  "uuid": "e6244ea1-13e3-447f-931d-fe311b06163c",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not fail on react-native command without arguments",
                  "fullTitle": "commandExecutor extensionContext should not fail on react-native command without arguments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            sinon.stub(childProcessStubInstance, \"spawn\").returns({\n                stdout: new events_1.EventEmitter(),\n                stderr: new events_1.EventEmitter(),\n                outcome: Promise.resolve(),\n            });\n            try {\n                yield new commandExecutor_1.CommandExecutor(nodeModulesRoot).spawnReactCommand(\"run-ios\").outcome;\n            }\n            catch (error) {\n                assert.fail(\"react-native command was not expected to fail\");\n            }\n        })",
                  "err": {},
                  "uuid": "01c8a435-5053-404f-8664-190b5cba2d2f",
                  "parentUUID": "3d8a5239-a13c-4563-bb11-4b988bcbe3d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b5c4d176-fe5d-4993-ad36-969438092a11",
                  "title": "getReactNativeVersion",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"getReactNativeVersion\"",
                      "fullTitle": "commandExecutor extensionContext getReactNativeVersion \"before all\" hook in \"getReactNativeVersion\"",
                      "timedOut": false,
                      "duration": 6,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fsHelper.makeDirectoryRecursiveSync(reactNativePackageDir);",
                      "err": {},
                      "uuid": "1be9514b-9f00-4efd-8864-837638b44140",
                      "parentUUID": "b5c4d176-fe5d-4993-ad36-969438092a11",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after all\" hook in \"getReactNativeVersion\"",
                      "fullTitle": "commandExecutor extensionContext getReactNativeVersion \"after all\" hook in \"getReactNativeVersion\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, \"node_modules\"));",
                      "err": {},
                      "uuid": "e510abb7-01ac-42d9-89d0-8c2fb6a63eb0",
                      "parentUUID": "b5c4d176-fe5d-4993-ad36-969438092a11",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "getReactNativeVersion should return version string if 'version' field is found in react-native package package.json file from node_modules",
                      "fullTitle": "commandExecutor extensionContext getReactNativeVersion getReactNativeVersion should return version string if 'version' field is found in react-native package package.json file from node_modules",
                      "timedOut": false,
                      "duration": 231,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const commandExecutor = new commandExecutor_1.CommandExecutor(nodeModulesRoot, sampleReactNativeProjectDir);\n                const versionObj = {\n                    version: \"0.65.0\",\n                };\n                fs.writeFileSync(path.join(reactNativePackageDir, \"package.json\"), JSON.stringify(versionObj, null, 2));\n                const version = yield commandExecutor.getReactNativeVersion();\n                assert.strictEqual(version, \"0.65.0\");\n            })",
                      "err": {},
                      "uuid": "559a168f-f971-4007-9c1f-fc6e97aba010",
                      "parentUUID": "b5c4d176-fe5d-4993-ad36-969438092a11",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "getReactNativeVersion should return version string if there isn't 'version' field in react-native package's package.json file",
                      "fullTitle": "commandExecutor extensionContext getReactNativeVersion getReactNativeVersion should return version string if there isn't 'version' field in react-native package's package.json file",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const commandExecutor = new commandExecutor_1.CommandExecutor(nodeModulesRoot, sampleReactNativeProjectDir);\n                const testObj = {\n                    test: \"test\",\n                };\n                fs.writeFileSync(path.join(reactNativePackageDir, \"package.json\"), JSON.stringify(testObj, null, 2));\n                const version = yield commandExecutor.getReactNativeVersion();\n                assert.strictEqual(version, \"0.65.0\");\n            })",
                      "err": {},
                      "uuid": "cde36235-645e-437f-aefb-e74e759060bf",
                      "parentUUID": "b5c4d176-fe5d-4993-ad36-969438092a11",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "559a168f-f971-4007-9c1f-fc6e97aba010",
                    "cde36235-645e-437f-aefb-e74e759060bf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 233,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b212bf4f-600b-4279-aec8-53d73dfdba00",
                  "title": "ReactNativeClIApproaches",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/commandExecutor.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "selectReactNativeCLI should return local CLI",
                      "fullTitle": "commandExecutor extensionContext ReactNativeClIApproaches selectReactNativeCLI should return local CLI",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const localCLIPath = path.join(sampleReactNativeProjectDir, \"node_modules\", \".bin\", \"react-native\");\nconst commandExecutor = new commandExecutor_1.CommandExecutor(nodeModulesRoot, sampleReactNativeProjectDir);\ncommandExecutor_1.CommandExecutor.ReactNativeCommand =\n    RNGlobalCLINameContent[\"react-native-tools.reactNativeGlobalCommandName\"];\nassert.strictEqual(commandExecutor.selectReactNativeCLI(), localCLIPath);\ndone();",
                      "err": {},
                      "uuid": "d516817a-e376-4409-ac58-64c747b353fb",
                      "parentUUID": "b212bf4f-600b-4279-aec8-53d73dfdba00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "selectReactNativeCLI should return global CLI",
                      "fullTitle": "commandExecutor extensionContext ReactNativeClIApproaches selectReactNativeCLI should return global CLI",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomHash = new crypto_1.Crypto().hash(Math.random().toString(36).substring(2, 15));\nRNGlobalCLINameContent[\"react-native-tools.reactNativeGlobalCommandName\"] =\n    randomHash;\nconst commandExecutor = new commandExecutor_1.CommandExecutor(nodeModulesRoot, sampleReactNativeProjectDir);\ncommandExecutor_1.CommandExecutor.ReactNativeCommand =\n    RNGlobalCLINameContent[\"react-native-tools.reactNativeGlobalCommandName\"];\nassert.strictEqual(commandExecutor.selectReactNativeCLI(), randomHash);\ndone();",
                      "err": {},
                      "uuid": "d5c1aad0-eacc-4bb7-a1da-76ba2c218528",
                      "parentUUID": "b212bf4f-600b-4279-aec8-53d73dfdba00",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d516817a-e376-4409-ac58-64c747b353fb",
                    "d5c1aad0-eacc-4bb7-a1da-76ba2c218528"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "d9021362-39e6-4dee-8e48-c07e86a210ee",
                "5302d242-c736-48a5-ad73-7150e1376647",
                "988c7be6-a6ab-49e1-a4d4-3db54220c3c1",
                "3887f231-83f2-4d0a-af37-39bbc96783a6",
                "e592739d-e6d9-49c6-8387-8f4e9498bd9b",
                "2ee55331-9d86-40af-b433-fced61b00069",
                "e6244ea1-13e3-447f-931d-fe311b06163c",
                "01c8a435-5053-404f-8664-190b5cba2d2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 186,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7a266ab4-1012-4ab1-acf2-752d0f2b8d4e",
          "title": "elementInspector",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/elementInspector.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/elementInspector.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "af2a3c63-dd0f-4f60-847d-8fb34ad1bbb1",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/elementInspector.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/elementInspector.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "element inspector should run and close without errors",
                  "fullTitle": "elementInspector extensionContext element inspector should run and close without errors",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield runElementInspector.baseFn();\n    yield stopElementInspector.baseFn();\n});",
                  "err": {},
                  "uuid": "c367a0e3-129d-4a82-8f47-80bbb0ee18ae",
                  "parentUUID": "af2a3c63-dd0f-4f60-847d-8fb34ad1bbb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "element inspector should not allow multiple windows to run",
                  "fullTitle": "elementInspector extensionContext element inspector should not allow multiple windows to run",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield runElementInspector.baseFn();\n    yield runElementInspector.baseFn();\n    yield stopElementInspector.baseFn();\n});",
                  "err": {},
                  "uuid": "1ec07c64-3836-4e7b-89d1-e66883100107",
                  "parentUUID": "af2a3c63-dd0f-4f60-847d-8fb34ad1bbb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c367a0e3-129d-4a82-8f47-80bbb0ee18ae",
                "1ec07c64-3836-4e7b-89d1-e66883100107"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e73b094a-7c46-4204-a113-f069a48c9669",
          "title": "experimentService",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"experimentService\"",
              "fullTitle": "experimentService \"after each\" hook in \"experimentService\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "experimentService_1.ExperimentService.instance = null;",
              "err": {},
              "uuid": "d18c4102-5df5-4cd6-ad89-7d9c86bd66e5",
              "parentUUID": "e73b094a-7c46-4204-a113-f069a48c9669",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b82c92f2-44ab-421a-8a30-e684443660f9",
              "title": "initializationAndExperimentConfig",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return correct experiment config",
                  "fullTitle": "experimentService initializationAndExperimentConfig should return correct experiment config",
                  "timedOut": true,
                  "duration": 2063,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            let experimentService = experimentService_1.ExperimentService.create();\n            let downloadedExperimentsConfig = yield experimentService\n                .downloadConfigRequest;\n            let result = downloadedExperimentsConfig.every(expConfig => typeof expConfig.enabled === \"boolean\" &&\n                typeof expConfig.experimentName === \"string\" &&\n                typeof expConfig.popCoveragePercent === \"number\");\n            assert.strictEqual(result, true);\n        })",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                    "diff": null
                  },
                  "uuid": "0a4372d9-c47b-44ee-8d2d-4367a21d479c",
                  "parentUUID": "b82c92f2-44ab-421a-8a30-e684443660f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0a4372d9-c47b-44ee-8d2d-4367a21d479c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2063,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e87f1ae-9f0c-4343-bf74-a1bc88399bf1",
              "title": "executeExperiment",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/experimentService/experimentService.test.js",
              "beforeHooks": [],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"executeExperiment\"",
                  "fullTitle": "experimentService executeExperiment \"after each\" hook in \"executeExperiment\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "experimentService_1.ExperimentService.instance = null;\nconfig.delete(testExperimentName);\nconfig.delete(RNTPreviewPromptExp.experimentName);",
                  "err": {},
                  "uuid": "053f397d-3e6d-418a-86fd-7936b0f438dd",
                  "parentUUID": "9e87f1ae-9f0c-4343-bf74-a1bc88399bf1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should skip the experiment",
                  "fullTitle": "experimentService executeExperiment should skip the experiment",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            config.set(testExperimentName, expTestConfig);\n            let experimentService = experimentService_1.ExperimentService.create();\n            yield configureExperimentService(experimentService, expTestConfig);\n            let experimentResult = yield experimentService.executeExperiment(expTestConfig);\n            assert.strictEqual(experimentResult.resultStatus, experimentService_1.ExperimentStatuses.DISABLED);\n        })",
                  "err": {},
                  "uuid": "eba9f572-3602-4a67-88a0-a396e7d26231",
                  "parentUUID": "9e87f1ae-9f0c-4343-bf74-a1bc88399bf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should succeed the experiment",
                  "fullTitle": "experimentService executeExperiment should succeed the experiment",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            let experimentService = experimentService_1.ExperimentService.create();\n            yield configureExperimentService(experimentService, RNTPreviewPromptExp);\n            let experimentResult = yield experimentService.executeExperiment(RNTPreviewPromptExp);\n            assert.strictEqual(experimentResult.resultStatus, experimentService_1.ExperimentStatuses.ENABLED);\n        })",
                  "err": {},
                  "uuid": "031d85cd-8c4d-4b62-b789-71897febac00",
                  "parentUUID": "9e87f1ae-9f0c-4343-bf74-a1bc88399bf1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eba9f572-3602-4a67-88a0-a396e7d26231",
                "031d85cd-8c4d-4b62-b789-71897febac00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7962e5ca-1eb6-4c6c-a316-a6163719373c",
          "title": "exponentHelper",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/exponent/exponentHelper.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/exponent/exponentHelper.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d52c5b1-1fcf-4212-aa35-6b856896360f",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/exponent/exponentHelper.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/exponent/exponentHelper.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                  "title": "isExpoManagedApp",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/exponent/exponentHelper.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/exponent/exponentHelper.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return false if dependencies are empty",
                      "fullTitle": "exponentHelper extensionContext isExpoManagedApp should return false if dependencies are empty",
                      "timedOut": false,
                      "duration": 189,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield checkIsExpoManagedApp(false, {});\n            })",
                      "err": {},
                      "uuid": "4513c944-016b-474a-8b58-71e0cc25b2eb",
                      "parentUUID": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should return false if (dev)dependencies.expo is missing",
                      "fullTitle": "exponentHelper extensionContext isExpoManagedApp should return false if (dev)dependencies.expo is missing",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield checkIsExpoManagedApp(false, { dependencies: {} });\n                yield checkIsExpoManagedApp(false, { devDependencies: {} });\n            })",
                      "err": {},
                      "uuid": "58ccb6f3-1cf8-44d2-b061-757e764995c2",
                      "parentUUID": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should return false if there are '.xcodeproj' files in 'ios/**' foldes",
                      "fullTitle": "exponentHelper extensionContext isExpoManagedApp should return false if there are '.xcodeproj' files in 'ios/**' foldes",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield checkIsExpoManagedApp(false, { dependencies: { expo: \"37.0.1\" } }, (pattern, options) => {\n                    return pattern === \"ios/**/*.xcodeproj\" ? [\"ios/myProject.xcodeproj\"] : [];\n                });\n            })",
                      "err": {},
                      "uuid": "dadfd3f0-3575-4466-8728-6b39c840d6fb",
                      "parentUUID": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should return false if there are '.gradle' files in 'android/**' foldes",
                      "fullTitle": "exponentHelper extensionContext isExpoManagedApp should return false if there are '.gradle' files in 'android/**' foldes",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield checkIsExpoManagedApp(false, { dependencies: { expo: \"37.0.1\" } }, (pattern, options) => {\n                    return pattern === \"android/**/*.gradle\" ? [\"android/build.gradle\"] : [];\n                });\n            })",
                      "err": {},
                      "uuid": "a03d6d2c-d7a7-4a94-ac74-86099f9e92f2",
                      "parentUUID": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should return true if there are `expo` and 'expokit' packages in (dev)dependencies",
                      "fullTitle": "exponentHelper extensionContext isExpoManagedApp should return true if there are `expo` and 'expokit' packages in (dev)dependencies",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield checkIsExpoManagedApp(true, {\n                    dependencies: { expo: \"37.0.1\", expokit: \"37.0.0\" },\n                });\n                yield checkIsExpoManagedApp(true, {\n                    devDependencies: { expo: \"37.0.1\", expokit: \"37.0.0\" },\n                });\n            })",
                      "err": {},
                      "uuid": "8b81414c-3bb5-49ee-8d41-f754a64a9cb5",
                      "parentUUID": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should return true if (dev)dependencies.expo exists and there are no '.xcodeproj' and '.gradle' files",
                      "fullTitle": "exponentHelper extensionContext isExpoManagedApp should return true if (dev)dependencies.expo exists and there are no '.xcodeproj' and '.gradle' files",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield checkIsExpoManagedApp(true, { dependencies: { expo: \"37.0.1\" } }, (pattern, options) => []);\n                yield checkIsExpoManagedApp(true, { devDependencies: { expo: \"37.0.1\" } }, (pattern, options) => []);\n            })",
                      "err": {},
                      "uuid": "a64bdcb4-ef3e-4e65-aa00-8e2b272be6ed",
                      "parentUUID": "c20da763-a616-4387-81d6-2cb2b6b9ad58",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4513c944-016b-474a-8b58-71e0cc25b2eb",
                    "58ccb6f3-1cf8-44d2-b061-757e764995c2",
                    "dadfd3f0-3575-4466-8728-6b39c840d6fb",
                    "a03d6d2c-d7a7-4a94-ac74-86099f9e92f2",
                    "8b81414c-3bb5-49ee-8d41-f754a64a9cb5",
                    "a64bdcb4-ef3e-4e65-aa00-8e2b272be6ed"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 195,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76b36999-80b3-47de-b33e-43e14d3d55e5",
          "title": "expoWeb",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/exponent/expoWeb.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/exponent/expoWeb.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add expo web metro bundler in app.json if it's not existing",
              "fullTitle": "expoWeb should add expo web metro bundler in app.json if it's not existing",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(this, void 0, void 0, function* () {\n        const projectPath = path.join(__dirname, \"..\", \"..\", \"resources\", \"sampleExpoProject\");\n        const launchArgs = {\n            cwd: projectPath,\n        };\n        const appJsonPath = path.join(launchArgs.cwd, \"app.json\");\n        const fs = new fileSystem_1.FileSystem();\n        const appJson = yield fs.readFile(appJsonPath);\n        const jsonString = JSON.stringify(appJson);\n        assert.strictEqual(jsonString.includes(\"bundler\") && jsonString.includes(\"metro\"), false);\n        yield reactNativeProjectHelper_1.ReactNativeProjectHelper.UpdateMertoBundlerForExpoWeb(launchArgs);\n        const newAppJson = yield fs.readFile(appJsonPath);\n        const newJsonString = JSON.stringify(newAppJson);\n        assert.strictEqual(newJsonString.includes(\"bundler\") && newJsonString.includes(\"metro\"), true);\n    })",
              "err": {},
              "uuid": "1deb580d-a139-4ee9-afa0-646f668c516e",
              "parentUUID": "76b36999-80b3-47de-b33e-43e14d3d55e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1deb580d-a139-4ee9-afa0-646f668c516e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b088eb8-f5d8-4de4-953a-4a4a308abba9",
          "title": "GeneralPlatform",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eec3e682-54fb-490d-ae8e-e7d176cc2156",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4516a475-a8ba-4e23-838d-17e7327215a5",
                  "title": "getEnvArgument",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"getEnvArgument\"",
                      "fullTitle": "GeneralPlatform extensionContext getEnvArgument \"before each\" hook in \"getEnvArgument\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fs.writeFileSync(envFile, envForFile);",
                      "err": {},
                      "uuid": "db06c71d-8955-4c77-a6a6-364ac9431110",
                      "parentUUID": "4516a475-a8ba-4e23-838d-17e7327215a5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after each\" hook in \"getEnvArgument\"",
                      "fullTitle": "GeneralPlatform extensionContext getEnvArgument \"after each\" hook in \"getEnvArgument\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fs.unlinkSync(envFile);",
                      "err": {},
                      "uuid": "9ecf3cfd-64f8-477f-a1d0-69e229bc6c0e",
                      "parentUUID": "4516a475-a8ba-4e23-838d-17e7327215a5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "existing args should not should not depend on the existence of the envFile",
                      "fullTitle": "GeneralPlatform extensionContext getEnvArgument existing args should not should not depend on the existence of the envFile",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.deepEqual(generalPlatform_1.GeneralPlatform.getEnvArgument(origEnv, undefined, fakeEnvFile), {\n    test1: \"origEnv\",\n    test2: \"origEnv\",\n    test3: \"origEnv\",\n});",
                      "err": {},
                      "uuid": "1613b8a7-d4b3-4fa2-a59f-9bd73e137ed4",
                      "parentUUID": "4516a475-a8ba-4e23-838d-17e7327215a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "existing args should not depend on null or undefined env and envFile",
                      "fullTitle": "GeneralPlatform extensionContext getEnvArgument existing args should not depend on null or undefined env and envFile",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.deepEqual(generalPlatform_1.GeneralPlatform.getEnvArgument(origEnv, undefined, undefined), {\n    test1: \"origEnv\",\n    test2: \"origEnv\",\n    test3: \"origEnv\",\n});",
                      "err": {},
                      "uuid": "8c1cbcef-0e9e-4a23-aa7a-3d4278935d72",
                      "parentUUID": "4516a475-a8ba-4e23-838d-17e7327215a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "args from envFile should not overwrite existing variables",
                      "fullTitle": "GeneralPlatform extensionContext getEnvArgument args from envFile should not overwrite existing variables",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.deepEqual(generalPlatform_1.GeneralPlatform.getEnvArgument(origEnv, null, envFile), {\n    test1: \"origEnv\",\n    test2: \"origEnv\",\n    test3: \"origEnv\",\n    test4: \"envFile\",\n    test5: \"envFile\",\n});",
                      "err": {},
                      "uuid": "0a88c982-fed5-4b53-8b1e-0d62322e14f6",
                      "parentUUID": "4516a475-a8ba-4e23-838d-17e7327215a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "args from envFile and original args should be overwritten by env args",
                      "fullTitle": "GeneralPlatform extensionContext getEnvArgument args from envFile and original args should be overwritten by env args",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.deepEqual(generalPlatform_1.GeneralPlatform.getEnvArgument(origEnv, env, envFile), {\n    test1: \"origEnv\",\n    test2: \"env\",\n    test3: \"env\",\n    test4: \"env\",\n    test5: \"envFile\",\n});",
                      "err": {},
                      "uuid": "025f9188-c2d2-47cf-8e62-9a4e51882619",
                      "parentUUID": "4516a475-a8ba-4e23-838d-17e7327215a5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1613b8a7-d4b3-4fa2-a59f-9bd73e137ed4",
                    "8c1cbcef-0e9e-4a23-aa7a-3d4278935d72",
                    "0a88c982-fed5-4b53-8b1e-0d62322e14f6",
                    "025f9188-c2d2-47cf-8e62-9a4e51882619"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "16250448-7a7f-4a0d-a0df-b51aec145d72",
                  "title": "runArguments",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "b9354fc3-d7ae-49e6-bc3b-6968e0b086d9",
                      "title": "getOptFromRunArgs",
                      "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                      "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should return undefined if arguments are empty",
                          "fullTitle": "GeneralPlatform extensionContext runArguments getOptFromRunArgs should return undefined if arguments are empty",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const args = [];\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--param1\", true), undefined);",
                          "err": {},
                          "uuid": "bf6056c4-1fc3-40a9-834e-a05951fc2835",
                          "parentUUID": "b9354fc3-d7ae-49e6-bc3b-6968e0b086d9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should return correct result for binary parameters",
                          "fullTitle": "GeneralPlatform extensionContext runArguments getOptFromRunArgs should return correct result for binary parameters",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const args = [\"--param1\", \"param2\"];\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--param1\", true), true);\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"param2\", true), true);\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--unknown\", true), undefined);",
                          "err": {},
                          "uuid": "3b0cbb28-61cb-45bd-8dd3-3d27bca9b870",
                          "parentUUID": "b9354fc3-d7ae-49e6-bc3b-6968e0b086d9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should return correct result for non-binary parameters",
                          "fullTitle": "GeneralPlatform extensionContext runArguments getOptFromRunArgs should return correct result for non-binary parameters",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const args = [\n    \"--param1\",\n    \"value1\",\n    \"--param2=value2\",\n    \"param3=value3\",\n    \"param4value4\",\n];\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--param1\", false), \"value1\");\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--param2\", false), \"value2\");\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--param1\"), \"value1\");\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"--param2\"), \"value2\");\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"param3\", false), \"value3\");\nassert.strictEqual(generalPlatform_1.GeneralPlatform.getOptFromRunArgs(args, \"param4\", false), undefined);",
                          "err": {},
                          "uuid": "3700490e-2abf-4601-9e64-d7f93bc029c4",
                          "parentUUID": "b9354fc3-d7ae-49e6-bc3b-6968e0b086d9",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "bf6056c4-1fc3-40a9-834e-a05951fc2835",
                        "3b0cbb28-61cb-45bd-8dd3-3d27bca9b870",
                        "3700490e-2abf-4601-9e64-d7f93bc029c4"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "26f55ef5-e25a-4260-aaa9-efcf15b621c8",
                      "title": "removeRunArgument",
                      "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                      "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"removeRunArgument\"",
                          "fullTitle": "GeneralPlatform extensionContext runArguments removeRunArgument \"before each\" hook in \"removeRunArgument\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "mockRunArguments = [paramWithValue, \"value\", binaryParam];",
                          "err": {},
                          "uuid": "987d098a-627c-4019-9318-16d2eb658ff3",
                          "parentUUID": "26f55ef5-e25a-4260-aaa9-efcf15b621c8",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "existing binary parameter should be removed from runArguments",
                          "fullTitle": "GeneralPlatform extensionContext runArguments removeRunArgument existing binary parameter should be removed from runArguments",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.removeRunArgument(mockRunArguments, binaryParam, true);\nassert.deepEqual(mockRunArguments, [paramWithValue, \"value\"]);",
                          "err": {},
                          "uuid": "8ab8873e-ab4b-47b4-b423-c7f0192e2fe0",
                          "parentUUID": "26f55ef5-e25a-4260-aaa9-efcf15b621c8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "existing parameter and its value should be removed from runArguments",
                          "fullTitle": "GeneralPlatform extensionContext runArguments removeRunArgument existing parameter and its value should be removed from runArguments",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.removeRunArgument(mockRunArguments, paramWithValue, false);\nassert.deepEqual(mockRunArguments, [binaryParam]);",
                          "err": {},
                          "uuid": "a75b6156-40e5-4cee-8c72-47419068039d",
                          "parentUUID": "26f55ef5-e25a-4260-aaa9-efcf15b621c8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "nothing should happen if try to remove not existing parameter",
                          "fullTitle": "GeneralPlatform extensionContext runArguments removeRunArgument nothing should happen if try to remove not existing parameter",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.removeRunArgument(mockRunArguments, \"--undefined\", false);\nassert.deepEqual(mockRunArguments, [paramWithValue, \"value\", binaryParam]);\ngeneralPlatform_1.GeneralPlatform.removeRunArgument(mockRunArguments, \"--undefined\", true);\nassert.deepEqual(mockRunArguments, [paramWithValue, \"value\", binaryParam]);",
                          "err": {},
                          "uuid": "9b044f23-28fa-4668-a7f6-e468353af966",
                          "parentUUID": "26f55ef5-e25a-4260-aaa9-efcf15b621c8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "8ab8873e-ab4b-47b4-b423-c7f0192e2fe0",
                        "a75b6156-40e5-4cee-8c72-47419068039d",
                        "9b044f23-28fa-4668-a7f6-e468353af966"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "77714828-87e5-49fd-8fc1-85514c121613",
                      "title": "setRunArgument",
                      "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                      "file": "Users/ezio/Desktop/vscode-react-native/test/extension/generalPlatform.test.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"setRunArgument\"",
                          "fullTitle": "GeneralPlatform extensionContext runArguments setRunArgument \"before each\" hook in \"setRunArgument\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "mockRunArguments = [paramWithValue, \"value\", binaryParam];",
                          "err": {},
                          "uuid": "e55d9e0c-a006-48e1-998f-8dfb5213cdb4",
                          "parentUUID": "77714828-87e5-49fd-8fc1-85514c121613",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "new binary parameter should be added to runArguments",
                          "fullTitle": "GeneralPlatform extensionContext runArguments setRunArgument new binary parameter should be added to runArguments",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.setRunArgument(mockRunArguments, \"--newBinaryParam\", true);\nassert.deepEqual(mockRunArguments, [\n    paramWithValue,\n    \"value\",\n    binaryParam,\n    \"--newBinaryParam\",\n]);",
                          "err": {},
                          "uuid": "9f7b75d4-6545-42c0-a212-7e02d6331647",
                          "parentUUID": "77714828-87e5-49fd-8fc1-85514c121613",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "new parameter with value and its value should be added to runArguments",
                          "fullTitle": "GeneralPlatform extensionContext runArguments setRunArgument new parameter with value and its value should be added to runArguments",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.setRunArgument(mockRunArguments, \"--newParamWithValue\", \"itsValue\");\nassert.deepEqual(mockRunArguments, [\n    paramWithValue,\n    \"value\",\n    binaryParam,\n    \"--newParamWithValue\",\n    \"itsValue\",\n]);",
                          "err": {},
                          "uuid": "18a2ef09-5f74-4b4f-a0a3-e83b854f3d1a",
                          "parentUUID": "77714828-87e5-49fd-8fc1-85514c121613",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "value of existing parameter with value should be overwritten by new value",
                          "fullTitle": "GeneralPlatform extensionContext runArguments setRunArgument value of existing parameter with value should be overwritten by new value",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.setRunArgument(mockRunArguments, paramWithValue, \"newValue\");\nassert.deepEqual(mockRunArguments, [paramWithValue, \"newValue\", binaryParam]);",
                          "err": {},
                          "uuid": "fabe3591-53f6-4ce6-aeef-d1a11f3b4a47",
                          "parentUUID": "77714828-87e5-49fd-8fc1-85514c121613",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "new binary parameter should not be added to runArguments if its value if false",
                          "fullTitle": "GeneralPlatform extensionContext runArguments setRunArgument new binary parameter should not be added to runArguments if its value if false",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.setRunArgument(mockRunArguments, \"--newBinaryParam\", false);\nassert.deepEqual(mockRunArguments, [paramWithValue, \"value\", binaryParam]);",
                          "err": {},
                          "uuid": "d256df95-9b2d-44dd-9a18-91bb32ead590",
                          "parentUUID": "77714828-87e5-49fd-8fc1-85514c121613",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "existing binary parameter should be removed from runArguments if its value if false",
                          "fullTitle": "GeneralPlatform extensionContext runArguments setRunArgument existing binary parameter should be removed from runArguments if its value if false",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "generalPlatform_1.GeneralPlatform.setRunArgument(mockRunArguments, binaryParam, false);\nassert.deepEqual(mockRunArguments, [paramWithValue, \"value\"]);",
                          "err": {},
                          "uuid": "d854b4f4-a50f-4490-9abb-7680021ae00b",
                          "parentUUID": "77714828-87e5-49fd-8fc1-85514c121613",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "9f7b75d4-6545-42c0-a212-7e02d6331647",
                        "18a2ef09-5f74-4b4f-a0a3-e83b854f3d1a",
                        "fabe3591-53f6-4ce6-aeef-d1a11f3b4a47",
                        "d256df95-9b2d-44dd-9a18-91bb32ead590",
                        "d854b4f4-a50f-4490-9abb-7680021ae00b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "45864716-504c-4ce6-9b10-11a60b9f2e96",
          "title": "iOSPlatform",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/iOSPlatform.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/iOSPlatform.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"iOSPlatform\"",
              "fullTitle": "iOSPlatform \"before each\" hook in \"iOSPlatform\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getReactNativeProjectRootStub = sinon.stub(settingsHelper_1.SettingsHelper, \"getReactNativeProjectRoot\", () => projectRoot);",
              "err": {},
              "uuid": "ff564c2f-ef09-4db9-b830-0de0138aebd2",
              "parentUUID": "45864716-504c-4ce6-9b10-11a60b9f2e96",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"iOSPlatform\"",
              "fullTitle": "iOSPlatform \"after each\" hook in \"iOSPlatform\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "runOptions = {\n    platform: launchArgs_1.PlatformType.iOS,\n    workspaceRoot,\n    projectRoot,\n    nodeModulesRoot,\n};\ngetReactNativeProjectRootStub.restore();",
              "err": {},
              "uuid": "4b2f8711-7330-4bea-8f76-f02d7a5cced3",
              "parentUUID": "45864716-504c-4ce6-9b10-11a60b9f2e96",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b767bc07-d04c-4d66-adba-254c520124b4",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/iOSPlatform.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/iOSPlatform.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getRunArgument properties not defined",
                  "fullTitle": "iOSPlatform extensionContext getRunArgument properties not defined",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let platform = new iOSPlatform_1.IOSPlatform(runOptions);\nassert.deepEqual(platform.runArguments, []);",
                  "err": {},
                  "uuid": "caed1418-2ee0-4bc4-a178-582cd792fa1f",
                  "parentUUID": "b767bc07-d04c-4d66-adba-254c520124b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArgument simulator simulator",
                  "fullTitle": "iOSPlatform extensionContext getRunArgument simulator simulator",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "runOptions.target = \"simulator\";\nconst expected = [\"--simulator\"];\nlet platform = new iOSPlatform_1.IOSPlatform(runOptions);\nassert.deepEqual(platform.runArguments, expected);",
                  "err": {},
                  "uuid": "e0b8c6cf-c8dd-4b3a-8095-90cc5ae87b27",
                  "parentUUID": "b767bc07-d04c-4d66-adba-254c520124b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArgument device device",
                  "fullTitle": "iOSPlatform extensionContext getRunArgument device device",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "runOptions.target = \"device\";\nconst expected = [\"--device\"];\nlet platform = new iOSPlatform_1.IOSPlatform(runOptions);\nassert.deepEqual(platform.runArguments, expected);",
                  "err": {},
                  "uuid": "52c88897-50c7-4942-8c77-d8553605da8e",
                  "parentUUID": "b767bc07-d04c-4d66-adba-254c520124b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getRunArgument target device id",
                  "fullTitle": "iOSPlatform extensionContext getRunArgument target device id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "runOptions.target = \"925E6E38-0D7B-45E9-ADE0-89C20779D467\";\nconst expected = [\"--udid\", runOptions.target];\nlet platform = new iOSPlatform_1.IOSPlatform(runOptions);\nassert.deepEqual(platform.runArguments, expected);",
                  "err": {},
                  "uuid": "435f9905-399a-45c5-a11c-49cab9b5c684",
                  "parentUUID": "b767bc07-d04c-4d66-adba-254c520124b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caed1418-2ee0-4bc4-a178-582cd792fa1f",
                "e0b8c6cf-c8dd-4b3a-8095-90cc5ae87b27",
                "52c88897-50c7-4942-8c77-d8553605da8e",
                "435f9905-399a-45c5-a11c-49cab9b5c684"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ef20f58-eec6-42ce-93e6-4a3eff4c73c0",
          "title": "plistBuddy",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/plistBuddy.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/plistBuddy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e13935e-b565-4359-b1d5-d50923515cfe",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/plistBuddy.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/plistBuddy.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"extensionContext\"",
                  "fullTitle": "plistBuddy extensionContext \"before each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockedExecFunc = sinon.stub();",
                  "err": {},
                  "uuid": "5bd20a79-740a-4c13-b869-ef6b1f2d4f69",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"extensionContext\"",
                  "fullTitle": "plistBuddy extensionContext \"after each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockedExecFunc === null || mockedExecFunc === void 0 ? void 0 : mockedExecFunc.reset();",
                  "err": {},
                  "uuid": "328d939b-5d9a-446e-8f78-b080ca60fcf0",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "setPlistProperty should attempt to modify, then add, plist properties",
                  "fullTitle": "plistBuddy extensionContext setPlistProperty should attempt to modify, then add, plist properties",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const plistFileName = \"testFile.plist\";\n    const plistProperty = \":RCTDevMenu:ExecutorClass\";\n    const plistValue = \"RCTWebSocketExecutor\";\n    const setCallArgs = `/usr/libexec/PlistBuddy -c 'Set ${plistProperty} ${plistValue}' '${plistFileName}'`;\n    const addCallArgs = `/usr/libexec/PlistBuddy -c 'Add ${plistProperty} string ${plistValue}' '${plistFileName}'`;\n    mockedExecFunc.withArgs(setCallArgs).returns(Promise.resolve({\n        outcome: Promise.reject(new Error(\"Setting does not exist\")),\n    }));\n    mockedExecFunc\n        .withArgs(addCallArgs)\n        .returns(Promise.resolve({ outcome: Promise.resolve(\"stdout\") }));\n    mockedExecFunc.throws();\n    const mockChildProcess = {\n        exec: mockedExecFunc,\n    };\n    const plistBuddy = new plistBuddy_1.PlistBuddy({ nodeChildProcess: mockChildProcess });\n    yield plistBuddy.setPlistProperty(plistFileName, plistProperty, plistValue);\n    assert(mockedExecFunc.calledWithExactly(setCallArgs), \"plistBuddy did not attempt to set first\");\n    assert(mockedExecFunc.calledWithExactly(addCallArgs), \"plistBuddy did not attempt to add after set failed\");\n    assert.strictEqual(mockedExecFunc.callCount, 2);\n});",
                  "err": {},
                  "uuid": "cf340367-69a8-45ac-9a5e-f3c11ba764c6",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setPlistProperty should stop after modifying if the attempt succeeds",
                  "fullTitle": "plistBuddy extensionContext setPlistProperty should stop after modifying if the attempt succeeds",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const plistFileName = \"testFile.plist\";\n    const plistProperty = \":RCTDevMenu:ExecutorClass\";\n    const plistValue = \"RCTWebSocketExecutor\";\n    const setCallArgs = `/usr/libexec/PlistBuddy -c 'Set ${plistProperty} ${plistValue}' '${plistFileName}'`;\n    mockedExecFunc\n        .withArgs(setCallArgs)\n        .returns(Promise.resolve({ outcome: Promise.resolve(\"stdout\") }));\n    mockedExecFunc.throws();\n    const mockChildProcess = {\n        exec: mockedExecFunc,\n    };\n    const plistBuddy = new plistBuddy_1.PlistBuddy({ nodeChildProcess: mockChildProcess });\n    yield plistBuddy.setPlistProperty(plistFileName, plistProperty, plistValue);\n    assert(mockedExecFunc.calledWithExactly(setCallArgs), \"plistBuddy did not attempt to set first\");\n    assert.strictEqual(mockedExecFunc.callCount, 1);\n});",
                  "err": {},
                  "uuid": "0b7683f9-44c1-4a9e-a11c-29cdc8f36c03",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getBundleId should return the bundle ID for RN <0.59",
                  "fullTitle": "plistBuddy extensionContext getBundleId should return the bundle ID for RN <0.59",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const projectRoot = path.join(\"/\", \"userHome\", \"rnProject\");\n    const iosProjectRoot = path.join(projectRoot, \"ios\");\n    const appName = \"myApp\";\n    const simulatorBundleId = \"com.contoso.simulator\";\n    const deviceBundleId = \"com.contoso.device\";\n    const plistBuddy = getPlistBuddy(appName, iosProjectRoot, undefined, simulatorBundleId, deviceBundleId, AppleProjectType.iOS);\n    let getReactNativeVersionsStub = sinon\n        .stub(projectVersionHelper_1.ProjectVersionHelper, \"getReactNativeVersions\")\n        .returns(Promise.resolve({\n        reactNativeVersion: \"0.58.5\",\n        reactNativeWindowsVersion: \"\",\n    }));\n    let getConfigurationDataStub = sinon.stub(plistBuddy, \"getConfigurationData\", fakeGetConfigurationData);\n    const [simulatorId1, simulatorId2, deviceId1, deviceId2] = yield Promise.all([\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, true, \"Debug\", appName),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, true, \"Debug\", appName, \"whateverScheme\"),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, false, undefined, appName),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, false, undefined, appName, \"whateverScheme\"),\n    ]);\n    getReactNativeVersionsStub.restore();\n    getConfigurationDataStub.restore();\n    assert.strictEqual(simulatorBundleId, simulatorId1);\n    assert.strictEqual(simulatorBundleId, simulatorId2);\n    assert.strictEqual(deviceBundleId, deviceId1);\n    assert.strictEqual(deviceBundleId, deviceId2);\n});",
                  "err": {},
                  "uuid": "439db36a-79e2-4fc3-ae23-56264105b728",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getBundleId should return the bundle ID for RN >=0.59",
                  "fullTitle": "plistBuddy extensionContext getBundleId should return the bundle ID for RN >=0.59",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const projectRoot = path.join(\"/\", \"userHome\", \"rnProject\");\n    const iosProjectRoot = path.join(projectRoot, \"ios\");\n    const appName = \"myApp\";\n    const scheme = \"myCustomScheme\";\n    const simulatorBundleId = \"com.contoso.simulator\";\n    const deviceBundleId = \"com.contoso.device\";\n    const plistBuddy = getPlistBuddy(appName, iosProjectRoot, \"myCustomScheme\", simulatorBundleId, deviceBundleId, AppleProjectType.iOS);\n    const getReactNativeVersionsStub = sinon\n        .stub(projectVersionHelper_1.ProjectVersionHelper, \"getReactNativeVersions\")\n        .returns(Promise.resolve({\n        reactNativeVersion: \"0.59.0\",\n        reactNativeWindowsVersion: \"\",\n    }));\n    const getConfigurationDataStub = sinon.stub(plistBuddy, \"getConfigurationData\", fakeGetConfigurationData);\n    const getInferredSchemeStub = sinon\n        .stub(plistBuddy, \"getInferredScheme\")\n        .returns(scheme);\n    const [simulatorId1, simulatorId2, deviceId1, deviceId2] = yield Promise.all([\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, true, \"Debug\", appName),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, true, \"Debug\", appName, scheme),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, false, undefined, appName),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, false, undefined, appName, scheme),\n    ]);\n    getReactNativeVersionsStub.restore();\n    getConfigurationDataStub.restore();\n    getInferredSchemeStub.restore();\n    assert.strictEqual(simulatorBundleId, simulatorId1);\n    assert.strictEqual(simulatorBundleId, simulatorId2);\n    assert.strictEqual(deviceBundleId, deviceId1);\n    assert.strictEqual(deviceBundleId, deviceId2);\n});",
                  "err": {},
                  "uuid": "e450e559-07b3-407f-9f26-fb25662c8e01",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getBundleId should return the bundle ID for an AppleTV project using RN >=0.59",
                  "fullTitle": "plistBuddy extensionContext getBundleId should return the bundle ID for an AppleTV project using RN >=0.59",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const projectRoot = path.join(\"/\", \"userHome\", \"rnProject\");\n    const iosProjectRoot = path.join(projectRoot, \"ios\");\n    const appName = \"myApp\";\n    const scheme = \"myCustomScheme-tvOS\";\n    const simulatorBundleId = \"com.contoso.simulator\";\n    const deviceBundleId = \"com.contoso.device\";\n    const plistBuddy = getPlistBuddy(appName, iosProjectRoot, scheme, simulatorBundleId, deviceBundleId, AppleProjectType.appleTV);\n    const getReactNativeVersionsStub = sinon\n        .stub(projectVersionHelper_1.ProjectVersionHelper, \"getReactNativeVersions\")\n        .returns(Promise.resolve({\n        reactNativeVersion: \"0.59.0\",\n        reactNativeWindowsVersion: \"\",\n    }));\n    const getConfigurationDataStub = sinon.stub(plistBuddy, \"getConfigurationData\", fakeGetConfigurationData);\n    const getInferredSchemeStub = sinon\n        .stub(plistBuddy, \"getInferredScheme\")\n        .returns(scheme);\n    const [simulatorId1, simulatorId2, deviceId1, deviceId2] = yield Promise.all([\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, true, \"Debug\", appName),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, true, \"Debug\", appName, scheme),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, false, undefined, appName),\n        plistBuddy.getBundleId(iosProjectRoot, projectRoot, launchArgs_1.PlatformType.iOS, false, undefined, appName, scheme),\n    ]);\n    getReactNativeVersionsStub.restore();\n    getConfigurationDataStub.restore();\n    getInferredSchemeStub.restore();\n    assert.strictEqual(simulatorBundleId, simulatorId1);\n    assert.strictEqual(simulatorBundleId, simulatorId2);\n    assert.strictEqual(deviceBundleId, deviceId1);\n    assert.strictEqual(deviceBundleId, deviceId2);\n});",
                  "err": {},
                  "uuid": "c94be7bd-2844-43a2-88ad-621990d23fcd",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getBundleId should return the bundle ID for a macOS project using RN >=0.59",
                  "fullTitle": "plistBuddy extensionContext getBundleId should return the bundle ID for a macOS project using RN >=0.59",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const projectRoot = path.join(\"/\", \"userHome\", \"rnProject\");\n    const macosProjectRoot = path.join(projectRoot, \"macos\");\n    const appName = \"myApp\";\n    const scheme = \"myCustomScheme-macOS\";\n    const simulatorBundleId = \"\";\n    const deviceBundleId = \"org.reactjs.native.rn-macos\";\n    const plistBuddy = getPlistBuddy(appName, macosProjectRoot, scheme, simulatorBundleId, deviceBundleId, AppleProjectType.macOS);\n    const getReactNativeVersionsStub = sinon\n        .stub(projectVersionHelper_1.ProjectVersionHelper, \"getReactNativeVersions\")\n        .returns(Promise.resolve({\n        reactNativeVersion: \"0.61.0\",\n        reactNativeWindowsVersion: \"\",\n    }));\n    const getConfigurationDataStub = sinon.stub(plistBuddy, \"getConfigurationData\", fakeGetConfigurationData);\n    const getInferredSchemeStub = sinon\n        .stub(plistBuddy, \"getInferredScheme\")\n        .returns(\"myCustomScheme\");\n    const [bundleId1, bundleId2] = yield Promise.all([\n        plistBuddy.getBundleId(macosProjectRoot, projectRoot, launchArgs_1.PlatformType.macOS, false, undefined, appName),\n        plistBuddy.getBundleId(macosProjectRoot, projectRoot, launchArgs_1.PlatformType.macOS, false, \"Debug\", appName, scheme),\n    ]);\n    getReactNativeVersionsStub.restore();\n    getConfigurationDataStub.restore();\n    getInferredSchemeStub.restore();\n    assert.strictEqual(deviceBundleId, bundleId1);\n    assert.strictEqual(deviceBundleId, bundleId2);\n});",
                  "err": {},
                  "uuid": "5c1cbe20-1adc-490a-89ec-68bd12d9431d",
                  "parentUUID": "4e13935e-b565-4359-b1d5-d50923515cfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "2380ce07-221f-418b-9e87-36d761a983d7",
                  "title": "fetchParameterFromBuildSettings",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/plistBuddy.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/plistBuddy.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"fetchParameterFromBuildSettings\"",
                      "fullTitle": "plistBuddy extensionContext fetchParameterFromBuildSettings \"before all\" hook in \"fetchParameterFromBuildSettings\"",
                      "timedOut": false,
                      "duration": 10,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "buildSettings = fs.readFileSync(buildSettingsFile);",
                      "err": {},
                      "uuid": "af7a20a8-ca7b-4411-ab63-d7593e60ed5b",
                      "parentUUID": "2380ce07-221f-418b-9e87-36d761a983d7",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "fetchParameterFromBuildSettings should return parameter value",
                      "fullTitle": "plistBuddy extensionContext fetchParameterFromBuildSettings fetchParameterFromBuildSettings should return parameter value",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const targetBuildDirRef = \"/Users/user/Library/Developer/Xcode/DerivedData/AwesomeProject0615-btdtcysqbddifyewiiztkumnopik/Build/Products/Debug-iphonesimulator\";\nconst fullProductNameRef = \"AwesomeProject0615.app\";\nconst targetBuildDir = plistBuddy.fetchParameterFromBuildSettings(buildSettings, \"TARGET_BUILD_DIR\");\nconst fullProductName = plistBuddy.fetchParameterFromBuildSettings(buildSettings, \"FULL_PRODUCT_NAME\");\nassert.strictEqual(targetBuildDir, targetBuildDirRef);\nassert.strictEqual(fullProductName, fullProductNameRef);",
                      "err": {},
                      "uuid": "3418d285-154e-4aa4-b44d-cca685a9ff45",
                      "parentUUID": "2380ce07-221f-418b-9e87-36d761a983d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fetchParameterFromBuildSettings should return null",
                      "fullTitle": "plistBuddy extensionContext fetchParameterFromBuildSettings fetchParameterFromBuildSettings should return null",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const targetBuildDir = plistBuddy.fetchParameterFromBuildSettings(buildSettings, \"TARGET_BUILD_DIR1\");\nconst testNull = plistBuddy.fetchParameterFromBuildSettings(buildSettings, \"TEST\");\nconst emptyStringCase = plistBuddy.fetchParameterFromBuildSettings(buildSettings, \"\");\nassert.strictEqual(targetBuildDir, null);\nassert.strictEqual(testNull, null);\nassert.notStrictEqual(emptyStringCase, null);",
                      "err": {},
                      "uuid": "305deb5e-394d-4aef-ba69-8a3178196c89",
                      "parentUUID": "2380ce07-221f-418b-9e87-36d761a983d7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3418d285-154e-4aa4-b44d-cca685a9ff45",
                    "305deb5e-394d-4aef-ba69-8a3178196c89"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "cf340367-69a8-45ac-9a5e-f3c11ba764c6",
                "0b7683f9-44c1-4a9e-a11c-29cdc8f36c03",
                "439db36a-79e2-4fc3-ae23-56264105b728",
                "e450e559-07b3-407f-9f26-fb25662c8e01",
                "c94be7bd-2844-43a2-88ad-621990d23fcd",
                "5c1cbe20-1adc-490a-89ec-68bd12d9431d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "92b2f5e2-bc39-4ec8-9ea8-1dd1e9e85438",
          "title": "plistBuddy",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/simulatorPlist.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/simulatorPlist.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f6fc3df0-6b61-4538-9499-6b1a98918068",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/ios/simulatorPlist.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/ios/simulatorPlist.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "findPlistFile should correctly find the NSUserDefaults plist file for the simulator",
                  "fullTitle": "plistBuddy extensionContext findPlistFile should correctly find the NSUserDefaults plist file for the simulator",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const projectRoot = path.join(\"/\", \"tmp\");\n    const iosProjectRoot = path.join(projectRoot, \"myProject\");\n    const bundleId = \"com.contoso.app\";\n    const findSimulatorHomeCommand = \"xcrun simctl getenv booted HOME\";\n    // The emulator's home folder is /simulator/home\n    const findSimulatorHomeResult = path.join(\"/\", \"Users\", \"theUser\", \"Library\", \"Developer\", \"CoreSimulator\", \"Devices\", \"FA511653-BA51-479F-A218-1DBD1910D5E5/data\");\n    const prefix = path.join(\"Containers\", \"Data\", \"Application\");\n    const suffix = path.join(\"Library\", \"Preferences\");\n    // The emulator has 3 apps\n    const appIds = [\n        \"17F3AED1-5B1D-4F97-B419-D1F079D9DE2D\",\n        \"957660FD-3417-474E-B2AC-8AA0A05AD9A0\",\n        \"18319C8B-0583-4967-8023-15859A0BF0F3\",\n    ];\n    // readdir finds appIds\n    const mockReadDir = sinon.stub();\n    mockReadDir\n        .withArgs(path.join(findSimulatorHomeResult, prefix))\n        .returns(Promise.resolve(appIds));\n    mockReadDir.throws();\n    // Only the second app has a plist file with thus bundle name\n    const existingPlistFile = path.join(findSimulatorHomeResult, prefix, \"957660FD-3417-474E-B2AC-8AA0A05AD9A0\", suffix, `${bundleId}.plist`);\n    // existsSync only finds existingPlistFile to exist\n    const mockExistsSync = sinon.stub();\n    mockExistsSync.withArgs(existingPlistFile).returns(true);\n    mockExistsSync.returns(false);\n    const mockFS = {\n        existsSync: mockExistsSync,\n        readDir: mockReadDir,\n    };\n    // getBundleId returns bundleId\n    const bundleIdStub = sinon.stub();\n    bundleIdStub.withArgs(iosProjectRoot).returns(Promise.resolve(bundleId));\n    bundleIdStub.returns(Promise.reject(\"Incorrect project root\"));\n    const mockPlistBuddy = {\n        getBundleId: bundleIdStub,\n    };\n    // exec-ing the correct command returns the simulator home\n    const execStub = sinon.stub();\n    execStub\n        .withArgs(findSimulatorHomeCommand)\n        .returns(Promise.resolve({ outcome: Promise.resolve(findSimulatorHomeResult) }));\n    execStub.throws();\n    const mockChildProcess = {\n        exec: execStub,\n    };\n    const simulatorPlist = new simulatorPlist_1.SimulatorPlist(iosProjectRoot, projectRoot, undefined, {\n        nodeFileSystem: mockFS,\n        plistBuddy: mockPlistBuddy,\n        nodeChildProcess: mockChildProcess,\n    });\n    const plistFile = yield simulatorPlist.findPlistFile();\n    assert(plistFile === existingPlistFile, \"Returned incorrect value\");\n});",
                  "err": {},
                  "uuid": "83982641-6b4d-4fa7-9168-7077d0220bb1",
                  "parentUUID": "f6fc3df0-6b61-4538-9499-6b1a98918068",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83982641-6b4d-4fa7-9168-7077d0220bb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3f03be90-4495-47e5-ac80-52d0069495dc",
          "title": "LaunchScenarioManager",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/launchScenarioManager.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/launchScenarioManager.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"LaunchScenarioManager\"",
              "fullTitle": "LaunchScenarioManager \"before all\" hook in \"LaunchScenarioManager\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdirSync(tmpPath);\nfs.mkdirSync(path.resolve(tmpPath, \".vscode\"));",
              "err": {},
              "uuid": "bb9ab916-2945-445f-899a-9033fda33aa5",
              "parentUUID": "3f03be90-4495-47e5-ac80-52d0069495dc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"LaunchScenarioManager\"",
              "fullTitle": "LaunchScenarioManager \"before each\" hook in \"LaunchScenarioManager\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.writeFileSync(launchPath, JSON.stringify(launchContent, null, 4));",
              "err": {},
              "uuid": "298e06d6-bbf1-4a10-9111-f4eac805917d",
              "parentUUID": "3f03be90-4495-47e5-ac80-52d0069495dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"LaunchScenarioManager\"",
              "fullTitle": "LaunchScenarioManager \"after all\" hook in \"LaunchScenarioManager\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.unlinkSync(launchPath);\nfs.rmdirSync(path.resolve(tmpPath, \".vscode\"));\nfs.rmdirSync(tmpPath);",
              "err": {},
              "uuid": "2205b27c-3d61-448d-a397-443b0ee4a0ed",
              "parentUUID": "3f03be90-4495-47e5-ac80-52d0069495dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e59d403e-bc27-4775-8489-9255b3bd56c3",
              "title": "updateLaunchScenario",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/launchScenarioManager.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/launchScenarioManager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should overwrite existing parameters for proper configuration",
                  "fullTitle": "LaunchScenarioManager updateLaunchScenario should overwrite existing parameters for proper configuration",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "autogenerateUpdateAndCheck(2, { env: { env1: \"newValue\" } });",
                  "err": {},
                  "uuid": "7c27cf6b-8986-47ed-a3de-0a5680ee3e02",
                  "parentUUID": "e59d403e-bc27-4775-8489-9255b3bd56c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add new parameters to proper configuration",
                  "fullTitle": "LaunchScenarioManager updateLaunchScenario should add new parameters to proper configuration",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "autogenerateUpdateAndCheck(5, { env: { env1: \"newValue1\", env2: \"newValue2\" } });",
                  "err": {},
                  "uuid": "00195715-0146-4586-bd52-ac5f79a17951",
                  "parentUUID": "e59d403e-bc27-4775-8489-9255b3bd56c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should nothing happens if launch.json do not contains config",
                  "fullTitle": "LaunchScenarioManager updateLaunchScenario should nothing happens if launch.json do not contains config",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: \"Debug Android\",\n    type: \"reactnative\",\n    request: \"launch\",\n    platform: \"android\",\n};\nlet configCopy = Object.assign({}, config);\ntryUpdateAndCheck(Object.assign(configCopy, { name: \"Other name\" }), { param: \"value1\" }, launchContent);\nconfigCopy = Object.assign({}, config);\ntryUpdateAndCheck(Object.assign(configCopy, { type: \"Other type\" }), { param: \"value2\" }, launchContent);\nconfigCopy = Object.assign({}, config);\ntryUpdateAndCheck(Object.assign(configCopy, { request: \"Other request\" }), { param: \"value3\" }, launchContent);\nconfigCopy = Object.assign({}, config);\ntryUpdateAndCheck(Object.assign(configCopy, { platform: \"Other platform\" }), { param: \"value4\" }, launchContent);",
                  "err": {},
                  "uuid": "e6e8e2ce-8fa0-4771-81eb-9899008a5804",
                  "parentUUID": "e59d403e-bc27-4775-8489-9255b3bd56c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c27cf6b-8986-47ed-a3de-0a5680ee3e02",
                "00195715-0146-4586-bd52-ac5f79a17951",
                "e6e8e2ce-8fa0-4771-81eb-9899008a5804"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3a43fa03-4b9c-41f6-95ec-895b878a30ca",
          "title": "macOSDebugModeManager",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/macos/macOSDebugModeManager.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/macos/macOSDebugModeManager.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "31fb4009-8f49-48fd-88ce-a762744e3688",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/macos/macOSDebugModeManager.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/macos/macOSDebugModeManager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "findPlistFile should correctly find the NSUserDefaults plist file for an app",
                  "fullTitle": "macOSDebugModeManager extensionContext findPlistFile should correctly find the NSUserDefaults plist file for an app",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const projectRoot = path.join(\"/\", \"tmp\");\n    const macosProjectRoot = path.join(projectRoot, \"myProject\");\n    const bundleId = \"org.reactjs.native.rn-macos\";\n    const existingPlistFilePath = path.join((0, os_1.homedir)(), \"Library\", \"Preferences\", `${bundleId}.plist`);\n    // \"exists\" only finds existingPlistFile file\n    const mockExists = sinon.stub();\n    mockExists.withArgs(existingPlistFilePath).returns(Promise.resolve(true));\n    mockExists.returns(Promise.resolve(false));\n    const mockFS = {\n        exists: mockExists,\n    };\n    // getBundleId returns bundleId\n    const bundleIdStub = sinon.stub();\n    bundleIdStub.withArgs(macosProjectRoot).returns(Promise.resolve(bundleId));\n    bundleIdStub.returns(Promise.reject(\"Incorrect project root\"));\n    const mockPlistBuddy = {\n        getBundleId: bundleIdStub,\n    };\n    let macOSDebugModeManager = new macOSDebugModeManager_1.MacOSDebugModeManager(macosProjectRoot, projectRoot, undefined, {\n        nodeFileSystem: mockFS,\n        plistBuddy: mockPlistBuddy,\n    });\n    const plistFile = yield macOSDebugModeManager.findPlistFile();\n    assert(plistFile === existingPlistFilePath, \"Returned incorrect value\");\n});",
                  "err": {},
                  "uuid": "d56ced3e-d91c-43ae-961c-e65ba63df132",
                  "parentUUID": "31fb4009-8f49-48fd-88ce-a762744e3688",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d56ced3e-d91c-43ae-961c-e65ba63df132"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "06c5d90c-6e95-4020-a674-3c77c1fef8e7",
          "title": "MobileTargetManager",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MobileTargetManager\"",
              "fullTitle": "MobileTargetManager \"before all\" hook in \"MobileTargetManager\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "showQuickPickStub = Sinon.stub(vscode_1.window, \"showQuickPick\", (items) => __awaiter(this, void 0, void 0, function* () {\n    targetsForSelection = (yield items);\n    return items[0];\n}));\ntargetsForSelection = [];",
              "err": {},
              "uuid": "ef8195de-49d3-4edd-b417-fc6e462018e0",
              "parentUUID": "06c5d90c-6e95-4020-a674-3c77c1fef8e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"MobileTargetManager\"",
              "fullTitle": "MobileTargetManager \"after all\" hook in \"MobileTargetManager\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "showQuickPickStub.reset();",
              "err": {},
              "uuid": "93ed1f6c-e6d7-47e4-a974-02232c877ef0",
              "parentUUID": "06c5d90c-6e95-4020-a674-3c77c1fef8e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "03163b07-0a6a-4106-8c15-7f267f064e0d",
              "title": "IOSTargetManager",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"IOSTargetManager\"",
                  "fullTitle": "MobileTargetManager IOSTargetManager \"before all\" hook in \"IOSTargetManager\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "targetManager = new iOSTargetManager_1.IOSTargetManager();\nrevertTargetsStates = () => {\n    onlineSimulator1 = {\n        name: \"simulatorName1\",\n        id: \"simulatorId1\",\n        isVirtualTarget: true,\n        isOnline: true,\n        system: \"1\",\n    };\n    onlineSimulator2 = {\n        name: \"simulatorName2\",\n        id: \"simulatorId2\",\n        isVirtualTarget: true,\n        isOnline: true,\n        system: \"1\",\n    };\n    offlineSimulator1 = {\n        name: \"simulatorName3\",\n        id: \"simulatorId3\",\n        isVirtualTarget: true,\n        isOnline: false,\n        system: \"1\",\n    };\n    offlineSimulator2 = {\n        name: \"simulatorName4\",\n        id: \"simulatorId4\",\n        isVirtualTarget: true,\n        isOnline: false,\n        system: \"1\",\n    };\n    device1 = {\n        name: \"deviceName1\",\n        id: \"deviceid1\",\n        isVirtualTarget: false,\n        isOnline: true,\n        system: \"1\",\n    };\n    device2 = {\n        name: \"deviceName2\",\n        id: \"deviceid2\",\n        isVirtualTarget: false,\n        isOnline: true,\n        system: \"1\",\n    };\n};\ncollectTargetsStub = Sinon.stub(targetManager, \"collectTargets\", () => __awaiter(this, void 0, void 0, function* () {\n    revertTargetsStates();\n    targetManager.targets = [\n        onlineSimulator1,\n        onlineSimulator2,\n        offlineSimulator1,\n        offlineSimulator2,\n        device1,\n        device2,\n    ];\n}));\nlaunchSimulatorStub = Sinon.stub(targetManager, \"launchSimulator\", (simulator) => __awaiter(this, void 0, void 0, function* () {\n    simulator.isOnline = true;\n    return iOSTargetManager_1.IOSTarget.fromInterface(simulator);\n}));\ntargetsForSelection = [];",
                  "err": {},
                  "uuid": "e2c4c120-58d1-493d-9a7f-14b7d40ca3cd",
                  "parentUUID": "03163b07-0a6a-4106-8c15-7f267f064e0d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"IOSTargetManager\"",
                  "fullTitle": "MobileTargetManager IOSTargetManager \"after all\" hook in \"IOSTargetManager\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "launchSimulatorStub.reset();\ncollectTargetsStub.reset();",
                  "err": {},
                  "uuid": "dbe4832b-969d-4bee-8fe1-bde1473d2df8",
                  "parentUUID": "03163b07-0a6a-4106-8c15-7f267f064e0d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                  "title": "Target selection",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Target selection\"",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target selection \"before each\" hook in \"Target selection\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield targetManager.collectTargets();\n            })",
                      "err": {},
                      "uuid": "e00de46c-939a-43bf-b5ac-df764553797d",
                      "parentUUID": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should show all targets in case filter has not been defined",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target selection Should show all targets in case filter has not been defined",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield checkTargetSeletionResult(undefined, options => options.length === 6);\n});",
                      "err": {},
                      "uuid": "58422da9-2322-4d0b-9ad1-25120ea27ee4",
                      "parentUUID": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should show targets by filter",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target selection Should show targets by filter",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const onlineTargetsFilter = (target) => target.isOnline;\n    yield checkTargetSeletionResult(onlineTargetsFilter, options => options.length === 4);\n});",
                      "err": {},
                      "uuid": "940bb229-de9a-400d-8674-eb36acfbd22e",
                      "parentUUID": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should auto select option in case there is only one target",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target selection Should auto select option in case there is only one target",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const showQuickPickCallCount = showQuickPickStub.callCount;\n    const specificNameTargetFilter = (target) => target.name === onlineSimulator1.name;\n    yield checkTargetSeletionResult(specificNameTargetFilter, undefined, (target) => target.id === onlineSimulator1.id);\n    assert.strictEqual(showQuickPickStub.callCount - showQuickPickCallCount, 0, \"There is only one target, but quick pick was shown\");\n});",
                      "err": {},
                      "uuid": "b9454d24-df95-4270-a0ca-246e1d7afa8f",
                      "parentUUID": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should launch the selected simulator in case it's offline",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target selection Should launch the selected simulator in case it's offline",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const specificNameTargetFilter = (target) => target.name === offlineSimulator1.name;\n    yield checkTargetSeletionResult(specificNameTargetFilter, undefined, (target) => target.isOnline && !!target.id && target.name === offlineSimulator1.name);\n});",
                      "err": {},
                      "uuid": "b19e7c28-51e8-4714-b2a3-bb53b37e223e",
                      "parentUUID": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should select target after system selection",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target selection Should select target after system selection",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                onlineSimulator2.system = \"2\";\n                offlineSimulator2.system = \"2\";\n                device1.system = \"2\";\n                const showQuickPickCallCount = showQuickPickStub.callCount;\n                yield checkTargetSeletionResult(undefined, options => options.length === 3);\n                assert.strictEqual(showQuickPickStub.callCount - showQuickPickCallCount, 2, \"Incorrect number of selection steps\");\n            })",
                      "err": {},
                      "uuid": "d9bae413-5fd7-4c52-a210-e4857b8a7cd6",
                      "parentUUID": "993ccb05-ee6b-4452-81d1-8230c4f37425",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "58422da9-2322-4d0b-9ad1-25120ea27ee4",
                    "940bb229-de9a-400d-8674-eb36acfbd22e",
                    "b9454d24-df95-4270-a0ca-246e1d7afa8f",
                    "b19e7c28-51e8-4714-b2a3-bb53b37e223e",
                    "d9bae413-5fd7-4c52-a210-e4857b8a7cd6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 98,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ceab5948-f9cb-4387-bf0d-96ae0148e057",
                  "title": "Target identification",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should properly recognize virtual target type",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target identification Should properly recognize virtual target type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(generalPlatform_1.TargetType.Simulator), true, \"Could not recognize any simulator\");\n    }), () => assert.fail(\"Could not recognize any simulator\"));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(onlineSimulator1.id), true, `Could not recognize simulator id: ${onlineSimulator1.id}`);\n    }), () => assert.fail(`Could not recognize simulator id: ${onlineSimulator1.id}`));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(\"simulatorId11\"), false, \"Misrecognized simulator id: simulatorId11\");\n    }));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(onlineSimulator2.name), true, `Could not recognize simulator name: ${onlineSimulator2.name}`);\n    }), () => assert.fail(`Could not recognize simulator name: ${onlineSimulator2.name}`));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(\"simulatorName22\"), false, \"Misrecognized simulator name: simulatorName22\");\n    }));\n});",
                      "err": {},
                      "uuid": "908ef926-028c-46de-ad06-91eafb67e7bb",
                      "parentUUID": "ceab5948-f9cb-4387-bf0d-96ae0148e057",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should properly recognize device target",
                      "fullTitle": "MobileTargetManager IOSTargetManager Target identification Should properly recognize device target",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(generalPlatform_1.TargetType.Device), false, \"Could not recognize any device\");\n    }), () => assert.fail(\"Could not recognize any device\"));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(device1.id), false, `Could not recognize device id: ${device1.id}`);\n    }), () => assert.fail(`Could not recognize device id: ${device1.id}`));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(\"deviceid111\"), false, \"Misrecognized device id: deviceid111\");\n    }));\n});",
                      "err": {},
                      "uuid": "3407e3f8-162a-4a6d-a791-7a7815b773da",
                      "parentUUID": "ceab5948-f9cb-4387-bf0d-96ae0148e057",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "908ef926-028c-46de-ad06-91eafb67e7bb",
                    "3407e3f8-162a-4a6d-a791-7a7815b773da"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e647f90-324f-47b6-bf25-44576b3369c2",
              "title": "AndroidTargetManager",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"AndroidTargetManager\"",
                  "fullTitle": "MobileTargetManager AndroidTargetManager \"before all\" hook in \"AndroidTargetManager\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "revertTargetsStates = () => {\n    onlineSimulator1 = {\n        name: \"emulatorName1\",\n        id: \"emulator-5551\",\n        isVirtualTarget: true,\n        isOnline: true,\n    };\n    onlineSimulator2 = {\n        name: \"emulatorName2\",\n        id: \"emulator-5552\",\n        isVirtualTarget: true,\n        isOnline: true,\n    };\n    offlineSimulator1 = {\n        name: \"emulatorName3\",\n        id: undefined,\n        isVirtualTarget: true,\n        isOnline: false,\n    }; //id: emulator-5553\n    offlineSimulator2 = {\n        name: \"emulatorName4\",\n        id: undefined,\n        isVirtualTarget: true,\n        isOnline: false,\n    }; //id: emulator-5554\n    device1 = { id: \"deviceid1\", isVirtualTarget: false, isOnline: true };\n    device2 = { id: \"deviceid2\", isVirtualTarget: false, isOnline: true };\n};\ndefaultSetup();",
                  "err": {},
                  "uuid": "bc1b36d8-02ac-4d3f-baf5-1761351820eb",
                  "parentUUID": "0e647f90-324f-47b6-bf25-44576b3369c2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"AndroidTargetManager\"",
                  "fullTitle": "MobileTargetManager AndroidTargetManager \"after all\" hook in \"AndroidTargetManager\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "getAvdsNamesStub.reset();\ngetOnlineTargetsStub.reset();\ngetAvdNameById.reset();\nlaunchSimulatorStub.reset();",
                  "err": {},
                  "uuid": "9f29a359-e8ce-4439-98c5-03b3a75d10e5",
                  "parentUUID": "0e647f90-324f-47b6-bf25-44576b3369c2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "c42380ed-1563-4f7b-be4c-8631f2c8684c",
                  "title": "Target selection",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"Target selection\"",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target selection \"before each\" hook in \"Target selection\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                revertTargetsStates();\n                yield targetManager.collectTargets();\n                targetsForSelection = [];\n            })",
                      "err": {},
                      "uuid": "09f78438-0aba-448d-a31b-3c83b7af733f",
                      "parentUUID": "c42380ed-1563-4f7b-be4c-8631f2c8684c",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should show all targets in case filter has not been defined",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target selection Should show all targets in case filter has not been defined",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield checkTargetSeletionResult(undefined, options => options.length === 6);\n});",
                      "err": {},
                      "uuid": "71abb6c4-5110-407e-9922-5ae5dd6375e9",
                      "parentUUID": "c42380ed-1563-4f7b-be4c-8631f2c8684c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should show targets by filter",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target selection Should show targets by filter",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const onlineTargetsFilter = (target) => target.isOnline;\n    yield checkTargetSeletionResult(onlineTargetsFilter, options => options.length === 4);\n});",
                      "err": {},
                      "uuid": "44a795b9-c502-4a1f-9228-291310189af0",
                      "parentUUID": "c42380ed-1563-4f7b-be4c-8631f2c8684c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should auto select option in case there is only one target",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target selection Should auto select option in case there is only one target",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const showQuickPickCallCount = showQuickPickStub.callCount;\n    const specificNameTargetFilter = (target) => target.name === onlineSimulator1.name;\n    yield checkTargetSeletionResult(specificNameTargetFilter, undefined, (target) => target.id === onlineSimulator1.id);\n    assert.strictEqual(showQuickPickStub.callCount - showQuickPickCallCount, 0, \"There is only one target, but quick pick was shown\");\n});",
                      "err": {},
                      "uuid": "0ed4c954-1b61-4e55-8dd5-e161779bee90",
                      "parentUUID": "c42380ed-1563-4f7b-be4c-8631f2c8684c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should launch the selected simulator in case it's offline",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target selection Should launch the selected simulator in case it's offline",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    const specificNameTargetFilter = (target) => target.name === offlineSimulator1.name;\n    yield checkTargetSeletionResult(specificNameTargetFilter, undefined, (target) => target.isOnline && !!target.id && target.name === offlineSimulator1.name);\n});",
                      "err": {},
                      "uuid": "aec979e1-28fb-4bc0-8f52-97a067545b18",
                      "parentUUID": "c42380ed-1563-4f7b-be4c-8631f2c8684c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "71abb6c4-5110-407e-9922-5ae5dd6375e9",
                    "44a795b9-c502-4a1f-9228-291310189af0",
                    "0ed4c954-1b61-4e55-8dd5-e161779bee90",
                    "aec979e1-28fb-4bc0-8f52-97a067545b18"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c2743126-c67a-4ab0-9c23-78376c5e325a",
                  "title": "Collect targets in case there is no 'emulator' utility in the PATH",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"Collect targets in case there is no 'emulator' utility in the PATH\"",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Collect targets in case there is no 'emulator' utility in the PATH \"before all\" hook in \"Collect targets in case there is no 'emulator' utility in the PATH\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "setupWithEmulatorCommands();",
                      "err": {},
                      "uuid": "ed58d44a-318d-4c9e-9424-5ffae85b8644",
                      "parentUUID": "c2743126-c67a-4ab0-9c23-78376c5e325a",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after all\" hook in \"Collect targets in case there is no 'emulator' utility in the PATH\"",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Collect targets in case there is no 'emulator' utility in the PATH \"after all\" hook in \"Collect targets in case there is no 'emulator' utility in the PATH\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "defaultSetup();",
                      "err": {},
                      "uuid": "ef37da59-cc35-4489-9881-ef03a311462f",
                      "parentUUID": "c2743126-c67a-4ab0-9c23-78376c5e325a",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Should not throw an error and collect only online targets in case the passed target type is undefined",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Collect targets in case there is no 'emulator' utility in the PATH Should not throw an error and collect only online targets in case the passed target type is undefined",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield targetManager.collectTargets();\n            assert.strictEqual((yield targetManager.getTargetList()).find(target => !target.isOnline), undefined, \"Should collect only online targets\");\n        }\n        catch (error) {\n            assert.fail(`Error has been thrown: ${error}`);\n        }\n    }));\n});",
                      "err": {},
                      "uuid": "c1a66c5b-2006-4e2b-8732-b86f49901949",
                      "parentUUID": "c2743126-c67a-4ab0-9c23-78376c5e325a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not throw an error in case the passed target type equals 'device'",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Collect targets in case there is no 'emulator' utility in the PATH Should not throw an error in case the passed target type equals 'device'",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield targetManager.collectTargets(generalPlatform_1.TargetType.Device);\n            assert.strictEqual((yield targetManager.getTargetList()).find(target => target.isVirtualTarget), undefined, \"Should collect only devices\");\n        }\n        catch (error) {\n            assert.fail(`Error has been thrown: ${error}`);\n        }\n    }));\n});",
                      "err": {},
                      "uuid": "6f92b67d-8ef5-4efe-8bb7-6834587acc68",
                      "parentUUID": "c2743126-c67a-4ab0-9c23-78376c5e325a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error in case the passed target type equals 'simulator'",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Collect targets in case there is no 'emulator' utility in the PATH Should throw an error in case the passed target type equals 'simulator'",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield targetManager.collectTargets(generalPlatform_1.TargetType.Simulator);\n            assert.fail(`Did not throw error.`);\n        }\n        catch (error) {\n            if (error instanceof internalError_1.InternalError) {\n                assert.strictEqual(error.errorCode, internalErrorCode_1.InternalErrorCode.CommandFailed);\n            }\n            else {\n                throw error;\n            }\n        }\n    }));\n});",
                      "err": {},
                      "uuid": "4406b133-2da8-4978-bda9-e0b154471150",
                      "parentUUID": "c2743126-c67a-4ab0-9c23-78376c5e325a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c1a66c5b-2006-4e2b-8732-b86f49901949",
                    "6f92b67d-8ef5-4efe-8bb7-6834587acc68",
                    "4406b133-2da8-4978-bda9-e0b154471150"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 30,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7fd8952a-c4a7-41db-8e77-fe9a4aafa5b0",
                  "title": "Target identification",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should properly recognize virtual target type",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification Should properly recognize virtual target type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(generalPlatform_1.TargetType.Simulator), true, \"Could not recognize any simulator\");\n    }), () => assert.fail(\"Could not recognize any simulator\"));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(onlineSimulator1.id), true, `Could not recognize simulator id: ${onlineSimulator1.id}`);\n    }), () => assert.fail(`Could not recognize simulator id: ${onlineSimulator1.id}`));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(\"simulatorId11\"), false, \"Misrecognized simulator id: simulatorId11\");\n    }));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(onlineSimulator2.name), true, `Could not recognize simulator name: ${onlineSimulator2.name}`);\n    }), () => assert.fail(`Could not recognize simulator name: ${onlineSimulator2.name}`));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(\"simulatorName22\"), false, \"Misrecognized simulator name: simulatorName22\");\n    }));\n});",
                      "err": {},
                      "uuid": "6f556897-6f71-40ff-b299-1009d62f3572",
                      "parentUUID": "7fd8952a-c4a7-41db-8e77-fe9a4aafa5b0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should properly recognize device target",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification Should properly recognize device target",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(generalPlatform_1.TargetType.Device), false, \"Could not recognize any device\");\n    }), () => assert.fail(\"Could not recognize any device\"));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(device1.id), false, `Could not recognize device id: ${device1.id}`);\n    }), () => assert.fail(`Could not recognize device id: ${device1.id}`));\n    yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n        return assert.strictEqual(yield targetManager.isVirtualTarget(\"deviceid111\"), false, \"Misrecognized device id: deviceid111\");\n    }));\n});",
                      "err": {},
                      "uuid": "c0eda2e8-34e5-42f0-95b2-507401a6f10a",
                      "parentUUID": "7fd8952a-c4a7-41db-8e77-fe9a4aafa5b0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6f556897-6f71-40ff-b299-1009d62f3572",
                    "c0eda2e8-34e5-42f0-95b2-507401a6f10a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                  "title": "Target identification in case there is no 'emulator' utility in the PATH",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/mobileTargetManager.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"Target identification in case there is no 'emulator' utility in the PATH\"",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH \"before all\" hook in \"Target identification in case there is no 'emulator' utility in the PATH\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "setupWithEmulatorCommands();",
                      "err": {},
                      "uuid": "1899117e-35f4-4811-b539-0261cb2a0020",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after all\" hook in \"Target identification in case there is no 'emulator' utility in the PATH\"",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH \"after all\" hook in \"Target identification in case there is no 'emulator' utility in the PATH\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "defaultSetup();",
                      "err": {},
                      "uuid": "0d3ecbd3-25e5-4d55-b08c-ded02e0ebdb2",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "Should not throw an error for the target equals simulator",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH Should not throw an error for the target equals simulator",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n            return assert.strictEqual(yield targetManager.isVirtualTarget(generalPlatform_1.TargetType.Simulator), true, \"Could not recognize any simulator\");\n        }), err => assert.fail(`Error has been thrown: ${err}`));\n    }));\n});",
                      "err": {},
                      "uuid": "ccb6db2c-0344-4bee-9f51-fbd72dd2e567",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not throw an error for the target equals online emulator id",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH Should not throw an error for the target equals online emulator id",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n            return assert.strictEqual(yield targetManager.isVirtualTarget(onlineSimulator1.id), true, \"Could not recognize simulator id\");\n        }), err => assert.fail(`Error has been thrown: ${err}`));\n    }));\n});",
                      "err": {},
                      "uuid": "28adb1e6-a75d-4c62-b00c-6566a530ed08",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not throw an error for the target equals device",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH Should not throw an error for the target equals device",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n            return assert.strictEqual(yield targetManager.isVirtualTarget(generalPlatform_1.TargetType.Device), false, \"Could not recognize any device\");\n        }), err => assert.fail(`Error has been thrown: ${err}`));\n    }));\n});",
                      "err": {},
                      "uuid": "1df2d581-d7d2-4372-86a4-05eceb2e7002",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should not throw an error for the target equals device id",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH Should not throw an error for the target equals device id",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n            return assert.strictEqual(yield targetManager.isVirtualTarget(device1.id), false, \"Could not recognize device id\");\n        }), err => assert.fail(`Error has been thrown: ${err}`));\n    }));\n});",
                      "err": {},
                      "uuid": "c2e72a0d-bce7-4d77-ae3f-50f9f4dcddac",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should throw an error for the target equals emulator AVD name",
                      "fullTitle": "MobileTargetManager AndroidTargetManager Target identification in case there is no 'emulator' utility in the PATH Should throw an error for the target equals emulator AVD name",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield executeWithoutEmulator(() => __awaiter(this, void 0, void 0, function* () {\n        yield checkTargetType(() => __awaiter(this, void 0, void 0, function* () {\n            const isVirtualTarget = yield targetManager.isVirtualTarget(offlineSimulator1.name);\n            assert.fail(`Did not throw error and return ${isVirtualTarget}`);\n        }), (err) => {\n            if (err instanceof internalError_1.NestedError) {\n                assert.strictEqual(err.innerError.errorCode, internalErrorCode_1.InternalErrorCode.CommandFailed);\n            }\n            else {\n                throw err;\n            }\n        });\n    }));\n});",
                      "err": {},
                      "uuid": "5372fe30-7c69-4868-bb70-21456ecd47cb",
                      "parentUUID": "5041d2cc-e972-42e4-9525-de5b27a218b9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ccb6db2c-0344-4bee-9f51-fbd72dd2e567",
                    "28adb1e6-a75d-4c62-b00c-6566a530ed08",
                    "1df2d581-d7d2-4372-86a4-05eceb2e7002",
                    "c2e72a0d-bce7-4d77-ae3f-50f9f4dcddac",
                    "5372fe30-7c69-4868-bb70-21456ecd47cb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "63d3f8f4-18be-459a-ad52-639b7343bd4a",
          "title": "inspectorConsoleView",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/inspectorConsoleView.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/inspectorConsoleView.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2729647-042b-4dec-8ec0-026606643d02",
              "title": "createNetworkRequestData",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/inspectorConsoleView.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/inspectorConsoleView.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return network request data with text response body",
                  "fullTitle": "inspectorConsoleView createNetworkRequestData should return network request data with text response body",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const request = {\n    headers: [\n        { key: \"Accept-Encoding\", value: \"gzip\" },\n        { key: \"Connection\", value: \"Keep-Alive\" },\n    ],\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    method: \"GET\",\n    timestamp: 1617959200269,\n    url: \"https://test.org\",\n};\nconst response = {\n    headers: [\n        { key: \"Content-Encoding\", value: \"gzip\" },\n        { key: \"x-frame-options\", value: \"deny\" },\n    ],\n    data: \"H4sIAAAAAAAA/ytJLS5RKEmtKDHkKoExjQB0Qz3xFQAAAA==\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    index: 0,\n    isMock: false,\n    status: 200,\n    timestamp: 1617959201269,\n    totalChunks: 1,\n    reason: \"\",\n};\nconst url = new url_1.URL(request.url);\nconst networkRequestDataReference = {\n    title: `%cNetwork request: ${request.method} ${url ? url.host + url.pathname : \"<unknown>\"}`,\n    networkRequestData: {\n        URL: request.url,\n        Method: request.method,\n        Status: response.status,\n        Duration: \"1000ms\",\n        \"Request Headers\": {\n            \"Accept-Encoding\": \"gzip\",\n            Connection: \"Keep-Alive\",\n        },\n        \"Response Headers\": {\n            \"Content-Encoding\": \"gzip\",\n            \"x-frame-options\": \"deny\",\n        },\n        \"Request Body\": \"\",\n        \"Response Body\": \"test text1\\ntest text2\",\n    },\n};\nconst networkRequestData = inspectorConsoleView.createNetworkRequestData(request, response);\nassert.deepStrictEqual(networkRequestData, networkRequestDataReference);",
                  "err": {},
                  "uuid": "98d412e4-7187-46d8-b5d0-b67d2ceb12ec",
                  "parentUUID": "d2729647-042b-4dec-8ec0-026606643d02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return network request data with JSON response body",
                  "fullTitle": "inspectorConsoleView createNetworkRequestData should return network request data with JSON response body",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const request = {\n    headers: [\n        { key: \"Accept-Encoding\", value: \"gzip\" },\n        { key: \"Connection\", value: \"Keep-Alive\" },\n        { key: \"Content-Type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"eyJ0ZXN0U3RyIjoidGVzdCIsInRlc3RPYmoiOnsidGVzdE51bSI6MTMyNCwidGVzdFN0cjEiOiJ0\\nZXN0MSJ9fQ==\\n\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    method: \"POST\",\n    timestamp: 1617959200269,\n    url: \"https://test.org\",\n};\nconst response = {\n    headers: [\n        { key: \"server\", value: \"nginx\" },\n        { key: \"x-frame-options\", value: \"deny\" },\n        { key: \"content-type\", value: \"application/json; charset=utf-8\" },\n    ],\n    data: \"eyJzdWNjZXNzIjp0cnVlfQ==\\n\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    index: 0,\n    isMock: false,\n    status: 200,\n    timestamp: 1617959201269,\n    totalChunks: 1,\n    reason: \"\",\n};\nconst url = new url_1.URL(request.url);\nconst networkRequestDataReference = {\n    title: `%cNetwork request: ${request.method} ${url ? url.host + url.pathname : \"<unknown>\"}`,\n    networkRequestData: {\n        URL: request.url,\n        Method: request.method,\n        Status: response.status,\n        Duration: \"1000ms\",\n        \"Request Headers\": {\n            \"Accept-Encoding\": \"gzip\",\n            Connection: \"Keep-Alive\",\n            \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        \"Response Headers\": {\n            server: \"nginx\",\n            \"x-frame-options\": \"deny\",\n            \"content-type\": \"application/json; charset=utf-8\",\n        },\n        \"Request Body\": {\n            testStr: \"test\",\n            testObj: { testNum: 1324, testStr1: \"test1\" },\n        },\n        \"Response Body\": { success: true },\n    },\n};\nconst networkRequestData = inspectorConsoleView.createNetworkRequestData(request, response);\nassert.deepStrictEqual(networkRequestData, networkRequestDataReference);",
                  "err": {},
                  "uuid": "e49c1d7f-eed0-4d96-94e7-03cbaf6b83da",
                  "parentUUID": "d2729647-042b-4dec-8ec0-026606643d02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly process a graphQL request",
                  "fullTitle": "inspectorConsoleView createNetworkRequestData should correctly process a graphQL request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const request = {\n    headers: [\n        { key: \"Accept-Encoding\", value: \"gzip\" },\n        { key: \"Connection\", value: \"Keep-Alive\" },\n        { key: \"Content-Type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"eyJxdWVyeSI6Ilxue1xucmF0ZXMoY3VycmVuY3k6IFwiVVNEXCIpIHtcbmN1cnJlbmN5XG5yYXRlXG59XG59XG4ifQ==\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    method: \"POST\",\n    timestamp: 1617959200269,\n    url: \"https://test.org\",\n};\nconst response = {\n    headers: [\n        { key: \"content-encoding\", value: \"gzip\" },\n        { key: \"server\", value: \"cloudflare\" },\n        { key: \"content-type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"H4sIAAAAAAAA/6tWSkksSVSyqlYqSixJLVayiq5WSi4tKkrNS65UslJydHVR0gFLATnGembmxkq1sbW1AO2x5pE2AAAA\\n\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    index: 0,\n    isMock: false,\n    status: 200,\n    timestamp: 1617959201269,\n    totalChunks: 1,\n    reason: \"\",\n};\nconst url = new url_1.URL(request.url);\nconst networkRequestDataReference = {\n    title: `%cNetwork request: ${request.method} ${url ? url.host + url.pathname : \"<unknown>\"}`,\n    networkRequestData: {\n        URL: request.url,\n        Method: request.method,\n        Status: response.status,\n        Duration: \"1000ms\",\n        \"Request Headers\": {\n            \"Accept-Encoding\": \"gzip\",\n            Connection: \"Keep-Alive\",\n            \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        \"Response Headers\": {\n            server: \"cloudflare\",\n            \"content-encoding\": \"gzip\",\n            \"content-type\": \"application/json;charset=utf-8\",\n        },\n        \"Request Body\": {\n            query: '\\n{\\nrates(currency: \"USD\") {\\ncurrency\\nrate\\n}\\n}\\n',\n        },\n        \"Response Body\": { data: { rates: [{ currency: \"AED\", rate: \"3.673\" }] } },\n    },\n};\nconst networkRequestData = inspectorConsoleView.createNetworkRequestData(request, response);\nassert.deepStrictEqual(networkRequestData, networkRequestDataReference);",
                  "err": {},
                  "uuid": "ab2a6c11-2bdc-460f-a2b0-9405a7538d0d",
                  "parentUUID": "d2729647-042b-4dec-8ec0-026606643d02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly process a request with URL search parameters",
                  "fullTitle": "inspectorConsoleView createNetworkRequestData should correctly process a request with URL search parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const request = {\n    headers: [\n        { key: \"Accept-Encoding\", value: \"gzip\" },\n        { key: \"Connection\", value: \"Keep-Alive\" },\n    ],\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    method: \"GET\",\n    timestamp: 1617959200269,\n    url: \"https://test.org?query=query%20aTest(%24arg1%3A%20String!)%20%7B%20test(who%3A%20%24arg1)%20%7D&operationName=aTest&variables=%7B%22arg1%22%3A%22me%22%7D\",\n};\nconst response = {\n    headers: [\n        { key: \"vary\", value: \"Accept-Encoding\" },\n        { key: \"content-type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"eyJlcnJvciI6ICJ0ZXN0RXJyb3IifQ==\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    index: 0,\n    isMock: false,\n    status: 400,\n    timestamp: 1617959201269,\n    totalChunks: 1,\n    reason: \"\",\n};\nconst url = new url_1.URL(request.url);\nconst networkRequestDataReference = {\n    title: `%cNetwork request: ${request.method} ${url ? url.host + url.pathname : \"<unknown>\"}`,\n    networkRequestData: {\n        URL: request.url,\n        Method: request.method,\n        Status: response.status,\n        Duration: \"1000ms\",\n        \"Request Headers\": {\n            \"Accept-Encoding\": \"gzip\",\n            Connection: \"Keep-Alive\",\n        },\n        \"Response Headers\": {\n            vary: \"Accept-Encoding\",\n            \"content-type\": \"application/json;charset=utf-8\",\n        },\n        \"Request Body\": \"\",\n        \"Request Query Parameters\": {\n            operationName: \"aTest\",\n            query: \"query aTest($arg1: String!) { test(who: $arg1) }\",\n            variables: '{\"arg1\":\"me\"}',\n        },\n        \"Response Body\": { error: \"testError\" },\n    },\n};\nconst networkRequestData = inspectorConsoleView.createNetworkRequestData(request, response);\nassert.deepStrictEqual(networkRequestData, networkRequestDataReference);",
                  "err": {},
                  "uuid": "c6c6e520-ad0f-4a4a-8370-1c21da5ca5e9",
                  "parentUUID": "d2729647-042b-4dec-8ec0-026606643d02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should correctly process a request with form data",
                  "fullTitle": "inspectorConsoleView createNetworkRequestData should correctly process a request with form data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const request = {\n    headers: [\n        { key: \"Accept-Encoding\", value: \"gzip\" },\n        { key: \"Connection\", value: \"Keep-Alive\" },\n        {\n            key: \"Content-Type\",\n            value: \"application/x-www-form-urlencoded;charset=UTF-8\",\n        },\n    ],\n    data: \"dXNlck5hbWU9dGVzdE5hbWUmdGVzdFByb3A9dGVzdFByb3BWYWw=\\n\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    method: \"POST\",\n    timestamp: 1617959200269,\n    url: \"https://test.org\",\n};\nconst response = {\n    headers: [\n        { key: \"server\", value: \"nginx\" },\n        { key: \"content-type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"eyJzdWNjZXNzIjp0cnVlfQ==\\n\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    index: 0,\n    isMock: false,\n    status: 200,\n    timestamp: 1617959201269,\n    totalChunks: 1,\n    reason: \"\",\n};\nconst url = new url_1.URL(request.url);\nconst networkRequestDataReference = {\n    title: `%cNetwork request: ${request.method} ${url ? url.host + url.pathname : \"<unknown>\"}`,\n    networkRequestData: {\n        URL: request.url,\n        Method: request.method,\n        Status: response.status,\n        Duration: \"1000ms\",\n        \"Request Headers\": {\n            \"Accept-Encoding\": \"gzip\",\n            Connection: \"Keep-Alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n        },\n        \"Response Headers\": {\n            server: \"nginx\",\n            \"content-type\": \"application/json;charset=utf-8\",\n        },\n        \"Request Body\": querystring.parse(\"userName=testName&testProp=testPropVal\"),\n        \"Response Body\": { success: true },\n    },\n};\nconst networkRequestData = inspectorConsoleView.createNetworkRequestData(request, response);\nassert.deepStrictEqual(networkRequestData, networkRequestDataReference);",
                  "err": {},
                  "uuid": "111a2a3f-9904-4d53-9be4-d22f3ebb50bd",
                  "parentUUID": "d2729647-042b-4dec-8ec0-026606643d02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98d412e4-7187-46d8-b5d0-b67d2ceb12ec",
                "e49c1d7f-eed0-4d96-94e7-03cbaf6b83da",
                "ab2a6c11-2bdc-460f-a2b0-9405a7538d0d",
                "c6c6e520-ad0f-4a4a-8370-1c21da5ca5e9",
                "111a2a3f-9904-4d53-9be4-d22f3ebb50bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "614b3f9a-de96-4885-9703-6cb535efe83f",
          "title": "requestBodyFormatter",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/requestBodyFormatter.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/requestBodyFormatter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "201883ea-dee9-4057-be5f-efb1e9ddad4a",
              "title": "formatBody",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/requestBodyFormatter.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/networkInspector/requestBodyFormatter.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"formatBody\"",
                  "fullTitle": "requestBodyFormatter formatBody \"before each\" hook in \"formatBody\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "loggedOutput = [];",
                  "err": {},
                  "uuid": "1bcb4a49-f347-4543-b2d2-680a7fecf50e",
                  "parentUUID": "201883ea-dee9-4057-be5f-efb1e9ddad4a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return text data and print warnings via logger",
                  "fullTitle": "requestBodyFormatter formatBody should return text data and print warnings via logger",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = {\n    headers: [\n        { key: \"Content-Encoding\", value: \"gzip\" },\n        { key: \"Content-Type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"H4sIAAAAAAAA/6tWSkksSVSyUihJLS6pBQAeHWwqDgAAAA==\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    index: 0,\n    isMock: false,\n    status: 200,\n    timestamp: 1617959201269,\n    totalChunks: 1,\n    reason: \"\",\n    insights: null,\n};\nconst formattedBodyRes = requestBodyFormatter.formatBody(response);\nassert.strictEqual(loggedOutput[0].includes(\"GraphQLFormatter\"), true);\nassert.strictEqual(loggedOutput[1].includes(\"JSONFormatter\"), true);\nassert.strictEqual(formattedBodyRes, '{\"data\": test}');",
                  "err": {},
                  "uuid": "f451ede6-bd5b-4ccd-a69c-5ab4edc90c9a",
                  "parentUUID": "201883ea-dee9-4057-be5f-efb1e9ddad4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse JSON objects and return an array of objects",
                  "fullTitle": "requestBodyFormatter formatBody should parse JSON objects and return an array of objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const request = {\n    headers: [\n        { key: \"Accept-Encoding\", value: \"gzip\" },\n        { key: \"Content-Type\", value: \"application/json;charset=utf-8\" },\n    ],\n    data: \"eyJkYXRhU3RyIjogInRlc3QifQp7ImRhdGFOdW0iOiAxMjN9CnsiZGF0YUFyciI6IFsxLCAyXX0=\",\n    id: \"6826df34-173d-4351-a7e5-d435328f2e54\",\n    timestamp: 1617959201269,\n    url: \"https://test.org\",\n    method: \"POST\",\n};\nconst formattedBodyReference = [\n    { dataStr: \"test\" },\n    { dataNum: 123 },\n    { dataArr: [1, 2] },\n];\nconst formattedBodyRes = requestBodyFormatter.formatBody(request);\nassert.deepStrictEqual(formattedBodyRes, formattedBodyReference);",
                  "err": {},
                  "uuid": "c8a40dd1-3bc1-4734-8293-217dd297834c",
                  "parentUUID": "201883ea-dee9-4057-be5f-efb1e9ddad4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f451ede6-bd5b-4ccd-a69c-5ab4edc90c9a",
                "c8a40dd1-3bc1-4734-8293-217dd297834c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "97ff4a6f-0cd1-4e20-8248-a3f983f7f1b7",
          "title": "packager",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/packager.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/packager.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/packager.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/packager.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"extensionContext\"",
                  "fullTitle": "packager extensionContext \"before each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "requestStub = sinon.stub(request_1.Request, \"request\");\nisExpoManagedAppStub = sinon.stub(exponentHelper_1.ExponentHelper.prototype, \"isExpoManagedApp\");\ngetExpPackagerOptionsStub = sinon.stub(exponentHelper_1.ExponentHelper.prototype, \"getExpPackagerOptions\");",
                  "err": {},
                  "uuid": "7bd3faeb-6935-4279-a051-76034a4f6886",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"extensionContext\"",
                  "fullTitle": "packager extensionContext \"after each\" hook in \"extensionContext\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "requestStub.restore();\nisExpoManagedAppStub.restore();\ngetExpPackagerOptionsStub.restore();",
                  "err": {},
                  "uuid": "74044889-3ca5-4ad6-8b2b-58a3ebc51cfe",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "isRunning should check correct status URL",
                  "fullTitle": "packager extensionContext isRunning should check correct status URL",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    requestStub.returns(Promise.resolve(\"packager-status:running\"));\n    try {\n        const isRunning = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, packager_1.Packager.DEFAULT_PORT).isRunning();\n        assert(isRunning);\n        assert(requestStub.firstCall.args[0].match(\"http://localhost:\" + packager_1.Packager.DEFAULT_PORT));\n    }\n    catch (error) {\n        assert.fail(null, null, \"packager was expected to be running\");\n    }\n});",
                  "err": {},
                  "uuid": "e3b0b592-74b5-4eb0-8f4e-2d9bf73e593f",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isRunning should report false if server doesn't respond",
                  "fullTitle": "packager extensionContext isRunning should report false if server doesn't respond",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    requestStub.returns(Promise.reject());\n    try {\n        const isRunning = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, 9091).isRunning();\n        assert(!isRunning);\n    }\n    catch (error) {\n        assert.fail(null, null, \"packager was not expected to be running\");\n    }\n});",
                  "err": {},
                  "uuid": "d0fa7fac-0ab9-4bc1-a1ea-2a0150791440",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "isRunning should report false if request fails",
                  "fullTitle": "packager extensionContext isRunning should report false if request fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    requestStub.returns(Promise.resolve(\"some_random_string\"));\n    try {\n        const isRunning = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, 10001).isRunning();\n        assert(!isRunning);\n    }\n    catch (error) {\n        assert.fail(null, null, \"packager was not expected to be running\");\n    }\n});",
                  "err": {},
                  "uuid": "cf1e95d1-c43d-49a6-8676-beac7ab7cf2f",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getPackagerArgs should return correct value (react-native@0.56.0)",
                  "fullTitle": "packager extensionContext getPackagerArgs should return correct value (react-native@0.56.0)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    isExpoManagedAppStub.returns(Promise.resolve(false));\n    const rnVersion = \"0.56.0\";\n    const expected = [\"--port\", \"10001\"];\n    const args = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, 10001).getPackagerArgs(PROJECT_PATH, rnVersion);\n    assert.deepEqual(args, expected);\n});",
                  "err": {},
                  "uuid": "f19cd3b5-2b41-4596-99c4-a036ffc31cea",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getPackagerArgs should return correct value (react-native@0.57.0)",
                  "fullTitle": "packager extensionContext getPackagerArgs should return correct value (react-native@0.57.0)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    isExpoManagedAppStub.returns(Promise.resolve(false));\n    const rnVersion = \"0.57.0\";\n    const expected = [\"--port\", \"10001\", \"--resetCache\"];\n    const args = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, 10001).getPackagerArgs(PROJECT_PATH, rnVersion, true);\n    assert.deepEqual(args, expected);\n});",
                  "err": {},
                  "uuid": "7f584f5f-9d39-4be3-b4f3-0298eb4ad17f",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getPackagerArgs should return correct value for expo app (react-native@0.56.0)",
                  "fullTitle": "packager extensionContext getPackagerArgs should return correct value for expo app (react-native@0.56.0)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    isExpoManagedAppStub.returns(Promise.resolve(true));\n    getExpPackagerOptionsStub.returns(Promise.resolve({}));\n    const rnVersion = \"0.56.0\";\n    const expected = [\"--port\", \"10001\", \"--resetCache\", \"--root\", \".vscode\"];\n    const args = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, 10001).getPackagerArgs(PROJECT_PATH, rnVersion, true);\n    assert.deepEqual(args, expected);\n});",
                  "err": {},
                  "uuid": "23009da7-c82f-49ae-b8d0-eabdb11de7c8",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getPackagerArgs should return correct value for expo app (react-native@0.57.0)",
                  "fullTitle": "packager extensionContext getPackagerArgs should return correct value for expo app (react-native@0.57.0)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    isExpoManagedAppStub.returns(Promise.resolve(true));\n    getExpPackagerOptionsStub.returns(Promise.resolve({\n        assetExts: [\"txt\", \"md\"],\n    }));\n    const rnVersion = \"0.57.0\";\n    const expected = [\"--port\", \"10001\", \"--assetExts\", [\"txt\", \"md\"]];\n    const args = yield new packager_1.Packager(WORKSPACE_PATH, PROJECT_PATH, 10001).getPackagerArgs(PROJECT_PATH, rnVersion);\n    assert.deepEqual(args, expected);\n});",
                  "err": {},
                  "uuid": "30eb2f1d-43bf-43ec-8994-09261a493ac0",
                  "parentUUID": "2fb5896b-fc42-4639-8fe5-ae74e7992035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3b0b592-74b5-4eb0-8f4e-2d9bf73e593f",
                "d0fa7fac-0ab9-4bc1-a1ea-2a0150791440",
                "cf1e95d1-c43d-49a6-8676-beac7ab7cf2f",
                "f19cd3b5-2b41-4596-99c4-a036ffc31cea",
                "7f584f5f-9d39-4be3-b4f3-0298eb4ad17f",
                "23009da7-c82f-49ae-b8d0-eabdb11de7c8",
                "30eb2f1d-43bf-43ec-8994-09261a493ac0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cef990a6-e385-4b40-a8ab-fdd00e94c7d8",
          "title": "reactDirManager.ts",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/reactDirManager.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/reactDirManager.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36530772-1613-4f2f-a350-09e5fe61693b",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/reactDirManager.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/reactDirManager.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6b979034-27a2-4b18-99f5-d5679439fe44",
                  "title": "ReactDirPath",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/reactDirManager.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/reactDirManager.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should end with the correct path to the react folder",
                      "fullTitle": "reactDirManager.ts extensionContext ReactDirPath Should end with the correct path to the react folder",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let reactPath = new reactDirManager_1.ReactDirManager(\"\").reactDirPath;\nassert.strictEqual(\".react\", path.basename(reactPath));\nreactPath = path.dirname(reactPath);\nassert.strictEqual(\".vscode\", path.basename(reactPath));",
                      "err": {},
                      "uuid": "44a443f0-0fed-4502-8f6b-5b8bd2409f13",
                      "parentUUID": "6b979034-27a2-4b18-99f5-d5679439fe44",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "44a443f0-0fed-4502-8f6b-5b8bd2409f13"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88dcd5f3-d702-46c2-8290-75e27de419f7",
          "title": "rn-extension",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/rn-extension.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/rn-extension.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "632b4be1-ae31-4f87-8910-00775a2e0784",
              "title": "createAdditionalWorkspaceFolder",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/rn-extension.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/rn-extension.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "createAdditionalWorkspaceFolder returns null",
                  "fullTitle": "rn-extension createAdditionalWorkspaceFolder createAdditionalWorkspaceFolder returns null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const folderPath = \"folderPath\";\nconst result = (0, rn_extension_1.createAdditionalWorkspaceFolder)(folderPath);\nassert.strictEqual(result, null);",
                  "err": {},
                  "uuid": "ff0621f9-2a40-46e6-8c50-b3fb2f17a0bf",
                  "parentUUID": "632b4be1-ae31-4f87-8910-00775a2e0784",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "ad0cc560-064e-458f-8f57-b0842916d8da",
                  "title": "createAdditionalWorkspaceFolder returns a new workspace folder",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/rn-extension.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/rn-extension.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"createAdditionalWorkspaceFolder returns a new workspace folder\"",
                      "fullTitle": "rn-extension createAdditionalWorkspaceFolder createAdditionalWorkspaceFolder returns a new workspace folder \"before all\" hook in \"createAdditionalWorkspaceFolder returns a new workspace folder\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fsHelper.makeDirectoryRecursiveSync(nodeModulesDir);",
                      "err": {},
                      "uuid": "201ad88d-2069-4e76-b6d7-cd4e85a76b3e",
                      "parentUUID": "ad0cc560-064e-458f-8f57-b0842916d8da",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after all\" hook in \"createAdditionalWorkspaceFolder returns a new workspace folder\"",
                      "fullTitle": "rn-extension createAdditionalWorkspaceFolder createAdditionalWorkspaceFolder returns a new workspace folder \"after all\" hook in \"createAdditionalWorkspaceFolder returns a new workspace folder\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "fsHelper.removePathRecursivelySync(path.join(sampleReactNativeProjectDir, nodeModulesFolderName));",
                      "err": {},
                      "uuid": "d0852d83-459b-47db-b519-40ffef4bd4e4",
                      "parentUUID": "ad0cc560-064e-458f-8f57-b0842916d8da",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "createAdditionalWorkspaceFolder should create a worspace folder, return the created folder with index increaed by 1",
                      "fullTitle": "rn-extension createAdditionalWorkspaceFolder createAdditionalWorkspaceFolder returns a new workspace folder createAdditionalWorkspaceFolder should create a worspace folder, return the created folder with index increaed by 1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currentCountOfWorkspaceFolders = (0, rn_extension_1.getCountOfWorkspaceFolders)();\nconst result = (0, rn_extension_1.createAdditionalWorkspaceFolder)(nodeModulesDir);\nconst expectedURI = vscode.Uri.file(nodeModulesDir);\nconst expectedIndex = currentCountOfWorkspaceFolders + 1;\nconst expectedResult = {\n    uri: expectedURI,\n    name: nodeModulesFolderName,\n    index: expectedIndex,\n};\nassert.deepStrictEqual(result, expectedResult);",
                      "err": {},
                      "uuid": "740fb938-cafd-4633-b376-41ab89b31fa8",
                      "parentUUID": "ad0cc560-064e-458f-8f57-b0842916d8da",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "createAdditionalWorkspaceFolder is used more than once, should create new worspace folders, return the last folder with increased index",
                      "fullTitle": "rn-extension createAdditionalWorkspaceFolder createAdditionalWorkspaceFolder returns a new workspace folder createAdditionalWorkspaceFolder is used more than once, should create new worspace folders, return the last folder with increased index",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const currentCountOfWorkspaceFolders = (0, rn_extension_1.getCountOfWorkspaceFolders)();\nconst innerProjectName = \"innerSampleProject\";\nconst innerProjectDir = path.join(sampleReactNativeProjectDir, innerProjectName);\nconst innerNodeModulesDir = path.join(innerProjectDir, nodeModulesFolderName);\nfsHelper.makeDirectoryRecursiveSync(innerNodeModulesDir);\nteardown(() => {\n    fsHelper.removePathRecursivelySync(innerProjectDir);\n});\n(0, rn_extension_1.createAdditionalWorkspaceFolder)(nodeModulesDir);\nconst result = (0, rn_extension_1.createAdditionalWorkspaceFolder)(innerNodeModulesDir);\nconst expectedURI = vscode.Uri.file(innerNodeModulesDir);\nconst expectedIndex = currentCountOfWorkspaceFolders + 2;\nconst expectedResult = {\n    uri: expectedURI,\n    name: nodeModulesFolderName,\n    index: expectedIndex,\n};\nassert.deepStrictEqual(result, expectedResult);",
                      "err": {},
                      "uuid": "d0d2e4de-75d2-4b78-9c23-bf2e3e7947d7",
                      "parentUUID": "ad0cc560-064e-458f-8f57-b0842916d8da",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "740fb938-cafd-4633-b376-41ab89b31fa8",
                    "d0d2e4de-75d2-4b78-9c23-bf2e3e7947d7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "ff0621f9-2a40-46e6-8c50-b3fb2f17a0bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cb8169b0-ad4b-4413-a9e1-7512c4c7eb07",
          "title": "tipNotificationService",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"tipNotificationService\"",
              "fullTitle": "tipNotificationService \"before each\" hook in \"tipNotificationService\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    tipNotificationService = tipsNotificationService_1.TipNotificationService.getInstance();\n    config.delete(tipsConfigName);\n    yield settingsHelper_1.SettingsHelper.setShowTips(true);\n});",
              "err": {},
              "uuid": "71b48adc-fd13-47af-9382-43cc0e69c710",
              "parentUUID": "cb8169b0-ad4b-4413-a9e1-7512c4c7eb07",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"tipNotificationService\"",
              "fullTitle": "tipNotificationService \"after each\" hook in \"tipNotificationService\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (tipNotificationService) {\n    tipNotificationService.dispose();\n}\ntipsNotificationService_1.TipNotificationService.instance = null;",
              "err": {},
              "uuid": "f5db8491-714e-4f28-9ab4-34e01b55a857",
              "parentUUID": "cb8169b0-ad4b-4413-a9e1-7512c4c7eb07",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "75bf716b-2e5c-4fbd-951f-017b1f492d15",
              "title": "initializeTipsConfig",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create correct tips config",
                  "fullTitle": "tipNotificationService initializeTipsConfig should create correct tips config",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            yield tipNotificationService.initializeTipsConfig();\n            const tipsConfig = tipNotificationService.tipsConfig;\n            const numberType = \"number\";\n            assert.strictEqual(typeof tipsConfig.daysAfterLastUsage, numberType);\n            assert.strictEqual(typeof tipsConfig.firstTimeMaxDaysToRemind, numberType);\n            assert.strictEqual(typeof tipsConfig.firstTimeMinDaysToRemind, numberType);\n            assert.strictEqual(typeof tipsConfig.maxDaysToRemind, numberType);\n            assert.strictEqual(typeof tipsConfig.minDaysToRemind, numberType);\n        })",
                  "err": {},
                  "uuid": "a266b93a-76bd-4079-ae29-65025e0a5a41",
                  "parentUUID": "75bf716b-2e5c-4fbd-951f-017b1f492d15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a266b93a-76bd-4079-ae29-65025e0a5a41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a031bf62-a18d-45a6-b70f-872455acbd28",
              "title": "showTipNotification",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                  "title": "without user actions",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"without user actions\"",
                      "fullTitle": "tipNotificationService showTipNotification without user actions \"before all\" hook in \"without user actions\"",
                      "timedOut": false,
                      "duration": 42,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "windowShowInformationMessageStub = sinon\n    .stub(vscode_1.window, \"showInformationMessage\")\n    .returns(Promise.resolve(undefined));",
                      "err": {},
                      "uuid": "dec016bb-23cb-47ac-a43b-e345ac4feec0",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [
                    {
                      "title": "\"after all\" hook in \"without user actions\"",
                      "fullTitle": "tipNotificationService showTipNotification without user actions \"after all\" hook in \"without user actions\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "windowShowInformationMessageStub.restore();",
                      "err": {},
                      "uuid": "6c1b028f-21e5-4e5c-978c-a60d739b8120",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "tests": [
                    {
                      "title": "should create config and fill shownDate into one of general tips",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should create config and fill shownDate into one of general tips",
                      "timedOut": true,
                      "duration": 2008,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield tipNotificationService.showTipNotification();\n                assert.ok(config.has(tipsConfigName));\n                const tipsConfig = config.get(tipsConfigName);\n                let shownTips = Object.values(tipsConfig.tips.generalTips).filter(tip => tip.shownDate);\n                assert.strictEqual(shownTips.length, 1);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "d10e96f2-50d6-4e2c-b89c-73ebe331f4c5",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create config and fill shownDate into one of specific tips",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should create config and fill shownDate into one of specific tips",
                      "timedOut": true,
                      "duration": 2012,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                const specificTipKey = \"networkInspectorLogsColorTheme\";\n                yield tipNotificationService.showTipNotification(false, specificTipKey);\n                assert.ok(config.has(tipsConfigName));\n                const tipsConfig = config.get(tipsConfigName);\n                assert.strictEqual(typeof tipsConfig.tips.specificTips[specificTipKey].shownDate, \"string\", `shownDate of ${specificTipKey} isn't set`);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "9621999e-58d3-4482-a7d6-1653783fcfae",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should decrease daysLeftBeforeGeneralTip by one and no tip is shown",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should decrease daysLeftBeforeGeneralTip by one and no tip is shown",
                      "timedOut": true,
                      "duration": 2005,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield tipNotificationService.initializeTipsConfig();\n                const tipsConfigBefore = tipNotificationService.tipsConfig;\n                tipsConfigBefore.daysLeftBeforeGeneralTip = 5;\n                tipsConfigBefore.lastExtensionUsageDate = new Date();\n                tipsConfigBefore.lastExtensionUsageDate.setDate(tipsConfigBefore.lastExtensionUsageDate.getDate() - 1);\n                config.set(tipsConfigName, tipsConfigBefore);\n                yield tipNotificationService.showTipNotification();\n                const tipsConfigAfter = config.get(tipsConfigName);\n                assert.deepStrictEqual(tipsConfigBefore.tips, tipsConfigAfter.tips);\n                assert.deepStrictEqual(tipsConfigAfter.daysLeftBeforeGeneralTip, 4);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "9a7420c8-88dd-408f-abdd-9fd4b1046422",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should show another tip from general tips for the first round",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should show another tip from general tips for the first round",
                      "timedOut": true,
                      "duration": 2005,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield tipNotificationService.initializeTipsConfig();\n                const tipsConfigBefore = tipNotificationService.tipsConfig;\n                tipsConfigBefore.tips.generalTips[\"networkInspector\"].shownDate = new Date();\n                config.set(tipsConfigName, tipsConfigBefore);\n                yield tipNotificationService.showTipNotification();\n                const tipsConfigAfter = config.get(tipsConfigName);\n                let shownTips = Object.values(tipsConfigAfter.tips.generalTips).filter(tip => tip.shownDate);\n                assert.strictEqual(shownTips.length, 2);\n                let assertCondition = () => tipsConfigAfter.daysLeftBeforeGeneralTip >=\n                    tipsConfigAfter.firstTimeMinDaysToRemind &&\n                    tipsConfigAfter.daysLeftBeforeGeneralTip <=\n                        tipsConfigAfter.firstTimeMaxDaysToRemind;\n                assert.strictEqual(assertCondition(), true);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "62e7411f-0754-4e37-81be-e7c0fff9f19d",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should show another tip from general tips for the second round",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should show another tip from general tips for the second round",
                      "timedOut": true,
                      "duration": 2007,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield tipNotificationService.initializeTipsConfig();\n                const tipsConfigBefore = tipNotificationService.tipsConfig;\n                const shownDate = new Date(2021, 6, 26);\n                Object.values(tipsConfigBefore.tips.generalTips).forEach(tip => {\n                    tip.shownDate = shownDate;\n                });\n                tipsConfigBefore.allTipsShownFirstly = true;\n                tipsConfigBefore.daysLeftBeforeGeneralTip = 0;\n                config.set(tipsConfigName, tipsConfigBefore);\n                yield tipNotificationService.showTipNotification();\n                const tipsConfigAfter = config.get(tipsConfigName);\n                let shownTips = Object.values(tipsConfigAfter.tips.generalTips).filter(tip => Date.parse(tip.shownDate) > shownDate.getTime());\n                assert.strictEqual(shownTips.length, 1);\n                let assertCondition = () => tipsConfigAfter.daysLeftBeforeGeneralTip >= tipsConfigAfter.minDaysToRemind &&\n                    tipsConfigAfter.daysLeftBeforeGeneralTip <= tipsConfigAfter.maxDaysToRemind;\n                assert.strictEqual(assertCondition(), true);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "a7db184f-3894-44c9-9409-477af50908c2",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should change allTipsShownFirstly from false to true in case all general tips have been shown for the first time",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should change allTipsShownFirstly from false to true in case all general tips have been shown for the first time",
                      "timedOut": true,
                      "duration": 2007,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield tipNotificationService.initializeTipsConfig();\n                const tipsConfigBefore = tipNotificationService.tipsConfig;\n                const shownDate = new Date(2021, 6, 26);\n                const generalTipsKeysBefore = Object.keys(tipsConfigBefore.tips.generalTips);\n                for (let i = 0; i < generalTipsKeysBefore.length - 1; i++) {\n                    tipsConfigBefore.tips.generalTips[generalTipsKeysBefore[i]].shownDate =\n                        shownDate;\n                }\n                config.set(tipsConfigName, tipsConfigBefore);\n                yield tipNotificationService.showTipNotification();\n                const tipsConfigAfter = config.get(tipsConfigName);\n                const shownTips = Object.values(tipsConfigAfter.tips.generalTips).filter(tip => tip.shownDate);\n                assert.strictEqual(shownTips.length, generalTipsKeysBefore.length);\n                assert.strictEqual(tipsConfigAfter.allTipsShownFirstly, true);\n                let assertCondition = () => tipsConfigAfter.daysLeftBeforeGeneralTip >= tipsConfigAfter.minDaysToRemind &&\n                    tipsConfigAfter.daysLeftBeforeGeneralTip <= tipsConfigAfter.maxDaysToRemind;\n                assert.strictEqual(assertCondition(), true);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "5226ea56-9cbf-4b09-be4a-e293613c3fd1",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not show a general tip",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should not show a general tip",
                      "timedOut": true,
                      "duration": 2001,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield settingsHelper_1.SettingsHelper.setShowTips(false);\n                yield tipNotificationService.initializeTipsConfig();\n                yield tipNotificationService.showTipNotification();\n                const tipsConfigAfter = config.get(tipsConfigName);\n                const shownGeneralTips = Object.values(tipsConfigAfter.tips.generalTips).filter(tip => tip.shownDate);\n                const shownSpecificTips = Object.values(tipsConfigAfter.tips.specificTips).filter(tip => tip.shownDate);\n                assert.strictEqual(shownGeneralTips.length, 0);\n                assert.strictEqual(shownSpecificTips.length, 0);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "aa38d558-3a85-4d6a-b6fe-e57e5a136688",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not show a specific tip",
                      "fullTitle": "tipNotificationService showTipNotification without user actions should not show a specific tip",
                      "timedOut": true,
                      "duration": 2005,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                yield settingsHelper_1.SettingsHelper.setShowTips(false);\n                yield tipNotificationService.initializeTipsConfig();\n                yield tipNotificationService.showTipNotification(false, \"networkInspectorLogsColorTheme\");\n                const tipsConfigAfter = config.get(tipsConfigName);\n                const shownGeneralTips = Object.values(tipsConfigAfter.tips.generalTips).filter(tip => tip.shownDate);\n                const shownSpecificTips = Object.values(tipsConfigAfter.tips.specificTips).filter(tip => tip.shownDate);\n                assert.strictEqual(shownGeneralTips.length, 0);\n                assert.strictEqual(shownSpecificTips.length, 0);\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "ee3912c2-8e5e-4c67-b901-61e6c36f5c35",
                      "parentUUID": "b81216f4-8a6c-4fc6-a34d-7f4916f58df6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "d10e96f2-50d6-4e2c-b89c-73ebe331f4c5",
                    "9621999e-58d3-4482-a7d6-1653783fcfae",
                    "9a7420c8-88dd-408f-abdd-9fd4b1046422",
                    "62e7411f-0754-4e37-81be-e7c0fff9f19d",
                    "a7db184f-3894-44c9-9409-477af50908c2",
                    "5226ea56-9cbf-4b09-be4a-e293613c3fd1",
                    "aa38d558-3a85-4d6a-b6fe-e57e5a136688",
                    "ee3912c2-8e5e-4c67-b901-61e6c36f5c35"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 16050,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a0262cf2-6c02-40e3-97ea-36b93bef9471",
                  "title": "with user actions",
                  "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
                  "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not show tips after the user has disabled the display of tips",
                      "fullTitle": "tipNotificationService showTipNotification with user actions should not show tips after the user has disabled the display of tips",
                      "timedOut": true,
                      "duration": 2008,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "__awaiter(this, void 0, void 0, function* () {\n                let windowShowInformationMessageStub = sinon\n                    .stub(vscode_1.window, \"showInformationMessage\")\n                    .returns(Promise.resolve(\"Don't show tips again\"));\n                yield tipNotificationService.initializeTipsConfig();\n                yield tipNotificationService.showTipNotification();\n                const tipsConfigAfterDisplayingTip = config.get(tipsConfigName);\n                const shownGeneralTipsAfterDisplayingTip = Object.values(tipsConfigAfterDisplayingTip.tips.generalTips).filter(tip => tip.shownDate);\n                assert.strictEqual(shownGeneralTipsAfterDisplayingTip.length, 1);\n                assert.strictEqual(settingsHelper_1.SettingsHelper.getShowTips(), false);\n                windowShowInformationMessageStub.restore();\n            })",
                      "err": {
                        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                        "diff": null
                      },
                      "uuid": "bbe8805d-e1bf-4ec6-a464-9b8a066d7475",
                      "parentUUID": "a0262cf2-6c02-40e3-97ea-36b93bef9471",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "bbe8805d-e1bf-4ec6-a464-9b8a066d7475"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 2008,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "302720e1-32bb-491f-b5b0-052524b5b94b",
              "title": "setKnownDateForFeatureById",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add knownDate to a general tip",
                  "fullTitle": "tipNotificationService setKnownDateForFeatureById should add knownDate to a general tip",
                  "timedOut": true,
                  "duration": 2008,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            yield tipNotificationService.initializeTipsConfig();\n            const tipKey = \"debuggingRNWAndMacOSApps\";\n            yield tipNotificationService.setKnownDateForFeatureById(tipKey);\n            const tipsConfigAfterAddingKnownDate = config.get(tipsConfigName);\n            assert.strictEqual(typeof tipsConfigAfterAddingKnownDate.tips.generalTips[tipKey].knownDate, \"string\", `knownDate of ${tipKey} isn't set`);\n            yield tipNotificationService.setKnownDateForFeatureById(tipKey);\n            const tipsConfigAfterUpdatingKnownDate = config.get(tipsConfigName);\n            const addedKnownDate = new Date(tipsConfigAfterAddingKnownDate.tips.generalTips[tipKey].knownDate);\n            const updatedKnownDate = new Date(tipsConfigAfterUpdatingKnownDate.tips.generalTips[tipKey].knownDate);\n            assert.strictEqual(updatedKnownDate.getTime() > addedKnownDate.getTime(), true);\n        })",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                    "diff": null
                  },
                  "uuid": "4b4cea31-8f2c-421f-84dd-655245e4a200",
                  "parentUUID": "302720e1-32bb-491f-b5b0-052524b5b94b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add knownDate to a specific tip",
                  "fullTitle": "tipNotificationService setKnownDateForFeatureById should add knownDate to a specific tip",
                  "timedOut": true,
                  "duration": 2007,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            yield tipNotificationService.initializeTipsConfig();\n            const tipKey = \"networkInspectorLogsColorTheme\";\n            yield tipNotificationService.setKnownDateForFeatureById(tipKey, false);\n            const tipsConfigAfter = config.get(tipsConfigName);\n            assert.strictEqual(typeof tipsConfigAfter.tips.specificTips[tipKey].knownDate, \"string\", `knownDate of ${tipKey} isn't set`);\n        })",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                    "diff": null
                  },
                  "uuid": "48a7ee30-e901-41eb-b5e6-99e3f461f4cd",
                  "parentUUID": "302720e1-32bb-491f-b5b0-052524b5b94b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4b4cea31-8f2c-421f-84dd-655245e4a200",
                "48a7ee30-e901-41eb-b5e6-99e3f461f4cd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4015,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90be1e9b-73cb-4148-8137-c48e0f14d2ff",
              "title": "updateTipsConfig",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update config after deleting a tip from storage",
                  "fullTitle": "tipNotificationService updateTipsConfig should update config after deleting a tip from storage",
                  "timedOut": true,
                  "duration": 2082,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const mockedTipsNotificationServiceBefore = proxyquire(tipsNotificationServicePath, {\n                \"./tipsStorage\": {\n                    default: mockedTipsStorageBefore,\n                },\n            })[\"TipNotificationService\"];\n            const mockedTipsNotificationServiceInstanceBefore = mockedTipsNotificationServiceBefore.getInstance();\n            yield mockedTipsNotificationServiceInstanceBefore.initializeTipsConfig();\n            const tipsConfigInitial = (mockedTipsNotificationServiceInstanceBefore).parseDatesInRawConfig(config.get(tipsConfigName));\n            const mockedTipsStorageAfter = {\n                generalTips: {\n                    elementInspector: {\n                        text: \"Element Inspector Tip Text\",\n                        anchorLink: \"#react-native-commands-in-the-command-palette\",\n                    },\n                },\n                specificTips: {\n                    networkInspectorLogsColorTheme: {\n                        text: \"Network Inspector Logs Tip Text\",\n                        anchorLink: \"#network-inspector-logs-theme\",\n                    },\n                },\n            };\n            const mockedTipsNotificationServiceAfter = proxyquire(tipsNotificationServicePath, {\n                \"./tipsStorage\": {\n                    default: mockedTipsStorageAfter,\n                },\n            })[\"TipNotificationService\"];\n            const mockedTipsNotificationServiceInstanceAfter = mockedTipsNotificationServiceAfter.getInstance();\n            yield mockedTipsNotificationServiceInstanceAfter.updateTipsConfig();\n            const tipsConfigUpdated = (mockedTipsNotificationServiceInstanceAfter).parseDatesInRawConfig(config.get(tipsConfigName));\n            const expectedTipsConfigGeneralTipsAfter = {\n                elementInspector: {},\n            };\n            const expectedTipsConfigSpecificTipsAfter = {\n                networkInspectorLogsColorTheme: {},\n            };\n            assert.notDeepStrictEqual(tipsConfigInitial, tipsConfigUpdated);\n            assert.deepStrictEqual(tipsConfigInitial.tips.generalTips, expectedTipsConfigGeneralTipsBefore);\n            assert.deepStrictEqual(tipsConfigInitial.tips.specificTips, expectedTipsConfigSpecificTipsBefore);\n            assert.deepStrictEqual(tipsConfigUpdated.tips.generalTips, expectedTipsConfigGeneralTipsAfter);\n            assert.deepStrictEqual(tipsConfigUpdated.tips.specificTips, expectedTipsConfigSpecificTipsAfter);\n        })",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                    "diff": null
                  },
                  "uuid": "95afa4c6-3fc0-452e-b748-651ba53397ff",
                  "parentUUID": "90be1e9b-73cb-4148-8137-c48e0f14d2ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update config after adding a tip to storage",
                  "fullTitle": "tipNotificationService updateTipsConfig should update config after adding a tip to storage",
                  "timedOut": true,
                  "duration": 2009,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const mockedTipsNotificationServiceBefore = proxyquire(tipsNotificationServicePath, {\n                \"./tipsStorage\": {\n                    default: mockedTipsStorageBefore,\n                },\n            })[\"TipNotificationService\"];\n            const mockedTipsNotificationServiceInstanceBefore = mockedTipsNotificationServiceBefore.getInstance();\n            yield settingsHelper_1.SettingsHelper.setShowTips(false);\n            yield mockedTipsNotificationServiceInstanceBefore.initializeTipsConfig();\n            const tipsConfigInitial = (mockedTipsNotificationServiceInstanceBefore).parseDatesInRawConfig(config.get(tipsConfigName));\n            const mockedTipsStorageAfter = {\n                generalTips: {\n                    elementInspector: {\n                        text: \"Element Inspector Tip Text\",\n                        anchorLink: \"#react-native-commands-in-the-command-palette\",\n                    },\n                    customEnvVariables: {\n                        text: \"Custom Env Variables Tip Text\",\n                        anchorLink: \"#custom-environment-variables\",\n                    },\n                    networkInspector: {\n                        text: \"Network Inspector Tip Text\",\n                        anchorLink: \"#network-inspector\",\n                    },\n                },\n                specificTips: {\n                    networkInspectorLogsColorTheme: {\n                        text: \"Network Inspector Logs Tip Text\",\n                        anchorLink: \"#network-inspector-logs-theme\",\n                    },\n                },\n            };\n            const mockedTipsNotificationServiceAfter = proxyquire(tipsNotificationServicePath, {\n                \"./tipsStorage\": {\n                    default: mockedTipsStorageAfter,\n                },\n            })[\"TipNotificationService\"];\n            const mockedTipsNotificationServiceInstanceAfter = mockedTipsNotificationServiceAfter.getInstance();\n            yield mockedTipsNotificationServiceInstanceAfter.updateTipsConfig();\n            const tipsConfigUpdated = (mockedTipsNotificationServiceInstanceAfter).parseDatesInRawConfig(config.get(tipsConfigName));\n            const expectedTipsConfigGeneralTipsAfter = {\n                elementInspector: {},\n                customEnvVariables: {},\n                networkInspector: {},\n            };\n            const expectedTipsConfigSpecificTipsAfter = {\n                networkInspectorLogsColorTheme: {},\n            };\n            assert.notDeepStrictEqual(tipsConfigInitial, tipsConfigUpdated);\n            assert.deepStrictEqual(tipsConfigInitial.tips.generalTips, expectedTipsConfigGeneralTipsBefore);\n            assert.deepStrictEqual(tipsConfigInitial.tips.specificTips, expectedTipsConfigSpecificTipsBefore);\n            assert.deepStrictEqual(tipsConfigUpdated.tips.generalTips, expectedTipsConfigGeneralTipsAfter);\n            assert.deepStrictEqual(tipsConfigUpdated.tips.specificTips, expectedTipsConfigSpecificTipsAfter);\n        })",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                    "diff": null
                  },
                  "uuid": "8bdfb2d8-cc07-4ee9-9bd2-e36aa808c5fc",
                  "parentUUID": "90be1e9b-73cb-4148-8137-c48e0f14d2ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update config after updating tips storage",
                  "fullTitle": "tipNotificationService updateTipsConfig should update config after updating tips storage",
                  "timedOut": true,
                  "duration": 2019,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(this, void 0, void 0, function* () {\n            const mockedTipsNotificationServiceBefore = proxyquire(tipsNotificationServicePath, {\n                \"./tipsStorage\": {\n                    default: mockedTipsStorageBefore,\n                },\n            })[\"TipNotificationService\"];\n            const mockedTipsNotificationServiceInstanceBefore = mockedTipsNotificationServiceBefore.getInstance();\n            yield mockedTipsNotificationServiceInstanceBefore.initializeTipsConfig();\n            const tipsConfigInitial = (mockedTipsNotificationServiceInstanceBefore).parseDatesInRawConfig(config.get(tipsConfigName));\n            const mockedTipsStorageAfter = {\n                generalTips: {\n                    elementInspector: {\n                        text: \"Element Inspector Tip Text\",\n                        anchorLink: \"#react-native-commands-in-the-command-palette\",\n                    },\n                    networkInspector: {\n                        text: \"Network Inspector Tip Text\",\n                        anchorLink: \"#network-inspector\",\n                    },\n                },\n                specificTips: {\n                    networkInspectorLogsColorTheme: {\n                        text: \"Network Inspector Logs Tip Text\",\n                        anchorLink: \"#network-inspector-logs-theme\",\n                    },\n                },\n            };\n            const mockedTipsNotificationServiceAfter = proxyquire(tipsNotificationServicePath, {\n                \"./tipsStorage\": {\n                    default: mockedTipsStorageAfter,\n                },\n            })[\"TipNotificationService\"];\n            const mockedTipsNotificationServiceInstanceAfter = mockedTipsNotificationServiceAfter.getInstance();\n            yield mockedTipsNotificationServiceInstanceAfter.updateTipsConfig();\n            const tipsConfigUpdated = (mockedTipsNotificationServiceInstanceAfter).parseDatesInRawConfig(config.get(tipsConfigName));\n            const expectedTipsConfigGeneralTipsAfter = {\n                elementInspector: {},\n                networkInspector: {},\n            };\n            const expectedTipsConfigSpecificTipsAfter = {\n                networkInspectorLogsColorTheme: {},\n            };\n            assert.notDeepStrictEqual(tipsConfigInitial, tipsConfigUpdated);\n            assert.deepStrictEqual(tipsConfigInitial.tips.generalTips, expectedTipsConfigGeneralTipsBefore);\n            assert.deepStrictEqual(tipsConfigInitial.tips.specificTips, expectedTipsConfigSpecificTipsBefore);\n            assert.deepStrictEqual(tipsConfigUpdated.tips.generalTips, expectedTipsConfigGeneralTipsAfter);\n            assert.deepStrictEqual(tipsConfigUpdated.tips.specificTips, expectedTipsConfigSpecificTipsAfter);\n        })",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/Users/ezio/Desktop/vscode-react-native/test/extension/tipsNotificationService/tipsNotificationService.test.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at processTimers (node:internal/timers:512:7)",
                    "diff": null
                  },
                  "uuid": "f28b1dd5-7ac9-4429-8daa-b11a5c13e150",
                  "parentUUID": "90be1e9b-73cb-4148-8137-c48e0f14d2ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "95afa4c6-3fc0-452e-b748-651ba53397ff",
                "8bdfb2d8-cc07-4ee9-9bd2-e36aa808c5fc",
                "f28b1dd5-7ac9-4429-8daa-b11a5c13e150"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ecbbc4d9-3958-47d9-823c-8d560c307c00",
          "title": "workspace",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/workspace.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/extension/workspace.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d567eae9-e51d-4192-962f-40fbaf831b50",
              "title": "extensionContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/extension/workspace.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/extension/workspace.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should get react-native.workspace.exclude correctly from workspace settings file",
                  "fullTitle": "workspace extensionContext Should get react-native.workspace.exclude correctly from workspace settings file",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const noWorkspacePath = undefined;\n    const exclude1 = yield settingsHelper_1.SettingsHelper.getWorkspaceFileExcludeFolder(noWorkspacePath);\n    assert.strictEqual(exclude1.length, 0);\n    const noExcludeWorkspacePath = path.resolve(__dirname, \"..\", \"resources\", \"workspaceSettingsSample\", \"noExcludeSetting.json\");\n    const exclude2 = yield settingsHelper_1.SettingsHelper.getWorkspaceFileExcludeFolder(noExcludeWorkspacePath);\n    assert.strictEqual(exclude2.length, 0);\n    const excludeWorkspacePath = path.resolve(__dirname, \"..\", \"resources\", \"workspaceSettingsSample\", \"excludeSetting.json\");\n    const exclude3 = yield settingsHelper_1.SettingsHelper.getWorkspaceFileExcludeFolder(excludeWorkspacePath);\n    assert.strictEqual(exclude3.length, 1);\n    assert.strictEqual(exclude3[0], \"testProject2\");\n});",
                  "err": {},
                  "uuid": "fc154d1c-a36b-400d-a087-3f328c497380",
                  "parentUUID": "d567eae9-e51d-4192-962f-40fbaf831b50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc154d1c-a36b-400d-a087-3f328c497380"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb917eff-cf3b-41a7-8e56-74bb0d69436e",
          "title": "localizationTest",
          "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/localization/localization.test.js",
          "file": "Users/ezio/Desktop/vscode-react-native/test/localization/localization.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c9390d59-51d7-4dc5-a2e2-b173b453a313",
              "title": "localizationContext",
              "fullFile": "/Users/ezio/Desktop/vscode-react-native/test/localization/localization.test.js",
              "file": "Users/ezio/Desktop/vscode-react-native/test/localization/localization.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "localize should show correct message on ZH-CN for CommandFailed error",
                  "fullTitle": "localizationTest localizationContext localize should show correct message on ZH-CN for CommandFailed error",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(commandFailedErrorChs.message, \"执行命令 IncorrectCommand 时出错 (error code 101)\");\ndone();",
                  "err": {},
                  "uuid": "e09cf374-3e7f-4c1c-991e-9c1deb83ca5f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "localize should show correct message on ZH-CN for iOSDeployNotFound error",
                  "fullTitle": "localizationTest localizationContext localize should show correct message on ZH-CN for iOSDeployNotFound error",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(iosDeployErrorChs.message, \"找不到 iOS 部署。请确保全局安装该部署(npm install -g ios-deploy) (error code 201)\");\ndone();",
                  "err": {},
                  "uuid": "d69f2b12-9dca-4018-8204-9f7554134610",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e09cf374-3e7f-4c1c-991e-9c1deb83ca5f",
                "d69f2b12-9dca-4018-8204-9f7554134610"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "92eb1806-ae62-47da-bec2-8edbefd60913",
        "a4ec7493-021a-441b-831b-10ed59e004a5",
        "69cc3297-28c7-4905-b6e2-61a83ba0c4f6"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 2,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "Rn-Test-Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "/Users/ezio/Desktop/vscode-react-native/mochawesome-report",
        "reportFilename": "Rn-Test-Report",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}